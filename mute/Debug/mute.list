
mute.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a874  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800aa48  0800aa48  0001aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b038  0800b038  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b038  0800b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b03c  0800b03c  0001b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800b040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008230  20000260  0800b29c  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008490  0800b29c  00028490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae30  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453b  00000000  00000000  0003b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00040ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac3e  00000000  00000000  000425b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025eca  00000000  00000000  0006d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6118  00000000  00000000  000930c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001791d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d8  00000000  00000000  00179228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000260 	.word	0x20000260
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa2c 	.word	0x0800aa2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000264 	.word	0x20000264
 800020c:	0800aa2c 	.word	0x0800aa2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 fb1c 	bl	800256c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f816 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 fa7e 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f000 fa4e 	bl	80013dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000f40:	f000 f888 	bl	8001054 <MX_ADC1_Init>
  MX_DAC_Init();
 8000f44:	f000 f93a 	bl	80011bc <MX_DAC_Init>
  MX_TIM3_Init();
 8000f48:	f000 f9d0 	bl	80012ec <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f4c:	f000 f96a 	bl	8001224 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f50:	f000 f996 	bl	8001280 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000f54:	f000 fa18 	bl	8001388 <MX_USART1_UART_Init>
  MX_User_Init();
 8000f58:	f007 fd74 	bl	8008a44 <MX_User_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_User_Process();
 8000f5c:	f007 fd9c 	bl	8008a98 <MX_User_Process>
  {
 8000f60:	e7fc      	b.n	8000f5c <main+0x30>
	...

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2234      	movs	r2, #52	; 0x34
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 fe1e 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <SystemClock_Config+0xe8>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <SystemClock_Config+0xe8>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <SystemClock_Config+0xe8>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <SystemClock_Config+0xec>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <SystemClock_Config+0xec>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <SystemClock_Config+0xec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fd8:	23b4      	movs	r3, #180	; 0xb4
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 fe1b 	bl	8006c28 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff8:	f000 fb20 	bl	800163c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffc:	f005 fa14 	bl	8006428 <HAL_PWREx_EnableOverDrive>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001006:	f000 fb19 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001016:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2105      	movs	r1, #5
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fa4d 	bl	80064c8 <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001034:	f000 fb02 	bl	800163c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800103e:	2000      	movs	r0, #0
 8001040:	f005 fb28 	bl	8006694 <HAL_RCC_MCOConfig>
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001068:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <MX_ADC1_Init+0x160>)
 800106a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800106e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001072:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001074:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800107c:	2201      	movs	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001082:	2201      	movs	r2, #1
 8001084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108e:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001096:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <MX_ADC1_Init+0x164>)
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	483e      	ldr	r0, [pc, #248]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010b6:	f001 faef 	bl	8002698 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 fabc 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010cc:	2306      	movs	r3, #6
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4836      	ldr	r0, [pc, #216]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010d6:	f001 fc51 	bl	800297c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010e0:	f000 faac 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	482f      	ldr	r0, [pc, #188]	; (80011b0 <MX_ADC1_Init+0x15c>)
 80010f2:	f001 fc43 	bl	800297c <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010fc:	f000 fa9e 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001100:	2302      	movs	r3, #2
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001104:	2303      	movs	r3, #3
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4828      	ldr	r0, [pc, #160]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800110e:	f001 fc35 	bl	800297c <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001118:	f000 fa90 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800111c:	2303      	movs	r3, #3
 800111e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800112a:	f001 fc27 	bl	800297c <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001134:	f000 fa82 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001138:	230c      	movs	r3, #12
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800113c:	2305      	movs	r3, #5
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001146:	f001 fc19 	bl	800297c <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001150:	f000 fa74 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001154:	230d      	movs	r3, #13
 8001156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_ADC1_Init+0x15c>)
 8001162:	f001 fc0b 	bl	800297c <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800116c:	f000 fa66 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001170:	230e      	movs	r3, #14
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001174:	2307      	movs	r3, #7
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800117e:	f001 fbfd 	bl	800297c <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001188:	f000 fa58 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800118c:	230f      	movs	r3, #15
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001190:	2308      	movs	r3, #8
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0x15c>)
 800119a:	f001 fbef 	bl	800297c <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80011a4:	f000 fa4a 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000027c 	.word	0x2000027c
 80011b4:	40012000 	.word	0x40012000
 80011b8:	0f000001 	.word	0x0f000001

080011bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_DAC_Init+0x60>)
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <MX_DAC_Init+0x64>)
 80011ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <MX_DAC_Init+0x60>)
 80011d2:	f001 ff94 	bl	80030fe <HAL_DAC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011dc:	f000 fa2e 	bl	800163c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_DAC_Init+0x60>)
 80011f0:	f001 fff9 	bl	80031e6 <HAL_DAC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011fa:	f000 fa1f 	bl	800163c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2210      	movs	r2, #16
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_DAC_Init+0x60>)
 8001206:	f001 ffee 	bl	80031e6 <HAL_DAC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001210:	f000 fa14 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000324 	.word	0x20000324
 8001220:	40007400 	.word	0x40007400

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x50>)
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_I2C1_Init+0x54>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x50>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_I2C1_Init+0x58>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_I2C1_Init+0x50>)
 8001242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x50>)
 8001262:	f002 fd5d 	bl	8003d20 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800126c:	f000 f9e6 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000338 	.word	0x20000338
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0

08001280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_SPI2_Init+0x64>)
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MX_SPI2_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SPI2_Init+0x64>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_SPI2_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_SPI2_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_SPI2_Init+0x64>)
 80012d2:	f005 ff47 	bl	8007164 <HAL_SPI_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012dc:	f000 f9ae 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200003ec 	.word	0x200003ec
 80012e8:	40003800 	.word	0x40003800

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM3_Init+0x94>)
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_TIM3_Init+0x98>)
 800130c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM3_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM3_Init+0x94>)
 8001316:	2210      	movs	r2, #16
 8001318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3750;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_TIM3_Init+0x94>)
 800131c:	f640 62a6 	movw	r2, #3750	; 0xea6
 8001320:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_TIM3_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM3_Init+0x94>)
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_TIM3_Init+0x94>)
 8001330:	f005 ffa1 	bl	8007276 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800133a:	f000 f97f 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_TIM3_Init+0x94>)
 800134c:	f006 f95a 	bl	8007604 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 f971 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_TIM3_Init+0x94>)
 8001368:	f006 fb80 	bl	8007a6c <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001372:	f000 f963 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000444 	.word	0x20000444
 8001384:	40000400 	.word	0x40000400

08001388 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_USART1_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 8001394:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f006 fbe4 	bl	8007b8c <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 f937 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000048c 	.word	0x2000048c
 80013d8:	40011000 	.word	0x40011000

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_DMA_Init+0x58>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_DMA_Init+0x58>)
 80013ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DMA_Init+0x58>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_DMA_Init+0x58>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <MX_DMA_Init+0x58>)
 8001408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_DMA_Init+0x58>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2011      	movs	r0, #17
 8001420:	f001 fe37 	bl	8003092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001424:	2011      	movs	r0, #17
 8001426:	f001 fe50 	bl	80030ca <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b75      	ldr	r3, [pc, #468]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a74      	ldr	r2, [pc, #464]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a6d      	ldr	r2, [pc, #436]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b6b      	ldr	r3, [pc, #428]	; (8001628 <MX_GPIO_Init+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <MX_GPIO_Init+0x1f0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a66      	ldr	r2, [pc, #408]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b64      	ldr	r3, [pc, #400]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2103      	movs	r1, #3
 80014de:	4853      	ldr	r0, [pc, #332]	; (800162c <MX_GPIO_Init+0x1f4>)
 80014e0:	f002 fc04 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4851      	ldr	r0, [pc, #324]	; (8001630 <MX_GPIO_Init+0x1f8>)
 80014ea:	f002 fbff 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 710e 	mov.w	r1, #568	; 0x238
 80014f4:	484f      	ldr	r0, [pc, #316]	; (8001634 <MX_GPIO_Init+0x1fc>)
 80014f6:	f002 fbf9 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014fa:	2303      	movs	r3, #3
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4846      	ldr	r0, [pc, #280]	; (800162c <MX_GPIO_Init+0x1f4>)
 8001512:	f002 fa57 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4840      	ldr	r0, [pc, #256]	; (8001630 <MX_GPIO_Init+0x1f8>)
 800152e:	f002 fa49 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	483a      	ldr	r0, [pc, #232]	; (8001630 <MX_GPIO_Init+0x1f8>)
 8001546:	f002 fa3d 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800154a:	f240 5307 	movw	r3, #1287	; 0x507
 800154e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4835      	ldr	r0, [pc, #212]	; (8001634 <MX_GPIO_Init+0x1fc>)
 8001560:	f002 fa30 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	482d      	ldr	r0, [pc, #180]	; (800162c <MX_GPIO_Init+0x1f4>)
 8001578:	f002 fa24 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800157c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001580:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800158e:	230c      	movs	r3, #12
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4824      	ldr	r0, [pc, #144]	; (800162c <MX_GPIO_Init+0x1f4>)
 800159a:	f002 fa13 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	481d      	ldr	r0, [pc, #116]	; (8001630 <MX_GPIO_Init+0x1f8>)
 80015bc:	f002 fa02 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d2:	230a      	movs	r3, #10
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_GPIO_Init+0x1f8>)
 80015de:	f002 f9f1 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e2:	2304      	movs	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015f2:	230c      	movs	r3, #12
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_GPIO_Init+0x200>)
 80015fe:	f002 f9e1 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 8001602:	f44f 730e 	mov.w	r3, #568	; 0x238
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_GPIO_Init+0x1fc>)
 800161c:	f002 f9d2 	bl	80039c4 <HAL_GPIO_Init>

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40020800 	.word	0x40020800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40020c00 	.word	0x40020c00

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <HAL_ADC_MspInit+0x110>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d172      	bne.n	80017a0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a33      	ldr	r2, [pc, #204]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_ADC_MspInit+0x114>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_ADC_MspInit+0x114>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800170e:	233c      	movs	r3, #60	; 0x3c
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	2303      	movs	r3, #3
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4823      	ldr	r0, [pc, #140]	; (80017b0 <HAL_ADC_MspInit+0x118>)
 8001722:	f002 f94f 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001726:	230f      	movs	r3, #15
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172a:	2303      	movs	r3, #3
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	481e      	ldr	r0, [pc, #120]	; (80017b4 <HAL_ADC_MspInit+0x11c>)
 800173a:	f002 f943 	bl	80039c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_ADC_MspInit+0x124>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001744:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001774:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001786:	f001 fd7d 	bl	8003284 <HAL_DMA_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001790:	f7ff ff54 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_ADC_MspInit+0x120>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40012000 	.word	0x40012000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	200002c4 	.word	0x200002c4
 80017bc:	40026410 	.word	0x40026410

080017c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_DAC_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d127      	bne.n	8001832 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_DAC_MspInit+0x80>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_DAC_MspInit+0x80>)
 80017ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_DAC_MspInit+0x80>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_DAC_MspInit+0x80>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_DAC_MspInit+0x80>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_DAC_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800181a:	2330      	movs	r3, #48	; 0x30
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_DAC_MspInit+0x84>)
 800182e:	f002 f8c9 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40007400 	.word	0x40007400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_I2C_MspInit+0xf0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d161      	bne.n	800192e <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_I2C_MspInit+0xf4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_I2C_MspInit+0xf4>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_I2C_MspInit+0xf4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188a:	2312      	movs	r3, #18
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001896:	2304      	movs	r3, #4
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4827      	ldr	r0, [pc, #156]	; (8001940 <HAL_I2C_MspInit+0xf8>)
 80018a2:	f002 f88f 	bl	80039c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_I2C_MspInit+0xf4>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_I2C_MspInit+0xf4>)
 80018b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_I2C_MspInit+0xf4>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_I2C_MspInit+0x100>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001902:	4810      	ldr	r0, [pc, #64]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 8001904:	f001 fcbe 	bl	8003284 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800190e:	f7ff fe95 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_I2C_MspInit+0xfc>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	201f      	movs	r0, #31
 8001924:	f001 fbb5 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001928:	201f      	movs	r0, #31
 800192a:	f001 fbce 	bl	80030ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40005400 	.word	0x40005400
 800193c:	40023800 	.word	0x40023800
 8001940:	40020400 	.word	0x40020400
 8001944:	2000038c 	.word	0x2000038c
 8001948:	400260a0 	.word	0x400260a0

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_SPI_MspInit+0x84>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12c      	bne.n	80019c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_SPI_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b8:	2305      	movs	r3, #5
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_SPI_MspInit+0x8c>)
 80019c4:	f001 fffe 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40003800 	.word	0x40003800
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400

080019dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_TIM_Base_MspInit+0x48>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d115      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x4c>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	201d      	movs	r0, #29
 8001a10:	f001 fb3f 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a14:	201d      	movs	r0, #29
 8001a16:	f001 fb58 	bl	80030ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_UART_MspInit+0x84>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12c      	bne.n	8001aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_UART_MspInit+0x88>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_UART_MspInit+0x8c>)
 8001aa4:	f001 ff8e 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 fd82 	bl	8002610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Stream6_IRQHandler+0x10>)
 8001b16:	f001 fcdd 	bl	80034d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000038c 	.word	0x2000038c

08001b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM3_IRQHandler+0x10>)
 8001b2a:	f005 fc63 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000444 	.word	0x20000444

08001b38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <I2C1_EV_IRQHandler+0x10>)
 8001b3e:	f002 fd53 	bl	80045e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000338 	.word	0x20000338

08001b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
	}

return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
	}
	return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
	return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f006 ff82 	bl	8008b60 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200004d0 	.word	0x200004d0
 8001c90:	20008490 	.word	0x20008490

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd7 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f006 ff41 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff f91f 	bl	8000f2c <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001cfc:	0800b040 	.word	0x0800b040
  ldr r2, =_sbss
 8001d00:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8001d04:	20008490 	.word	0x20008490

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>

08001d0a <initialize_and_calibrate_adc>:
static float offset_ch5;
static float offset_ch6;
static float offset_ch7;

int16_t initialize_and_calibrate_adc()
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
    return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <init_adc_dma>:

void init_adc_dma()
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <init_adc>:
    // Clear the EOC (End-Of-Conversion) bit
    ADC1->SR = 0;
}

void init_adc(float *scales, float *offsets)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    scale_ch0 = scales[0];
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <init_adc+0xb4>)
 8001d38:	6013      	str	r3, [r2, #0]
    scale_ch1 = scales[1];
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <init_adc+0xb8>)
 8001d40:	6013      	str	r3, [r2, #0]
    scale_ch2 = scales[2];
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <init_adc+0xbc>)
 8001d48:	6013      	str	r3, [r2, #0]
    scale_ch3 = scales[3];
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <init_adc+0xc0>)
 8001d50:	6013      	str	r3, [r2, #0]
    scale_ch4 = scales[4];
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <init_adc+0xc4>)
 8001d58:	6013      	str	r3, [r2, #0]
    scale_ch5 = scales[5];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <init_adc+0xc8>)
 8001d60:	6013      	str	r3, [r2, #0]
    scale_ch6 = scales[6];
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <init_adc+0xcc>)
 8001d68:	6013      	str	r3, [r2, #0]
    scale_ch7 = scales[7];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <init_adc+0xd0>)
 8001d70:	6013      	str	r3, [r2, #0]
    offset_ch0 = offsets[0];
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <init_adc+0xd4>)
 8001d78:	6013      	str	r3, [r2, #0]
    offset_ch1 = offsets[1];
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <init_adc+0xd8>)
 8001d80:	6013      	str	r3, [r2, #0]
    offset_ch2 = offsets[2];
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <init_adc+0xdc>)
 8001d88:	6013      	str	r3, [r2, #0]
    offset_ch3 = offsets[3];
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <init_adc+0xe0>)
 8001d90:	6013      	str	r3, [r2, #0]
    offset_ch4 = offsets[4];
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <init_adc+0xe4>)
 8001d98:	6013      	str	r3, [r2, #0]
    offset_ch5 = offsets[5];
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <init_adc+0xe8>)
 8001da0:	6013      	str	r3, [r2, #0]
    offset_ch6 = offsets[6];
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <init_adc+0xec>)
 8001da8:	6013      	str	r3, [r2, #0]
    offset_ch7 = offsets[7];
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <init_adc+0xf0>)
 8001db0:	6013      	str	r3, [r2, #0]
    calibration_adc = initialize_and_calibrate_adc(ADC1);
 8001db2:	481a      	ldr	r0, [pc, #104]	; (8001e1c <init_adc+0xf4>)
 8001db4:	f7ff ffa9 	bl	8001d0a <initialize_and_calibrate_adc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <init_adc+0xf8>)
 8001dbe:	801a      	strh	r2, [r3, #0]
    printf("ADC1 calibration value: %d\n", (int) calibration_adc);
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <init_adc+0xf8>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <init_adc+0xfc>)
 8001dca:	f006 fff1 	bl	8008db0 <iprintf>
    // RV1 -> AD7 -> PA3 -> ADC_IN3  -> buffer[4]
    // RV2 -> AD6 -> PA2 -> ADC_IN2  -> buffer[5]
    // RV3 -> AD5 -> PA1 -> ADC_IN1  -> buffer[6]
    // RV4 -> AD4 -> PA0 -> ADC_IN0  -> buffer[7]

    init_adc_dma();
 8001dce:	f7ff ffa4 	bl	8001d1a <init_adc_dma>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000508 	.word	0x20000508
 8001de0:	2000050c 	.word	0x2000050c
 8001de4:	20000510 	.word	0x20000510
 8001de8:	20000514 	.word	0x20000514
 8001dec:	20000518 	.word	0x20000518
 8001df0:	2000051c 	.word	0x2000051c
 8001df4:	20000520 	.word	0x20000520
 8001df8:	20000524 	.word	0x20000524
 8001dfc:	20000528 	.word	0x20000528
 8001e00:	2000052c 	.word	0x2000052c
 8001e04:	20000530 	.word	0x20000530
 8001e08:	20000534 	.word	0x20000534
 8001e0c:	20000538 	.word	0x20000538
 8001e10:	2000053c 	.word	0x2000053c
 8001e14:	20000540 	.word	0x20000540
 8001e18:	20000544 	.word	0x20000544
 8001e1c:	40012000 	.word	0x40012000
 8001e20:	20000504 	.word	0x20000504
 8001e24:	0800aa48 	.word	0x0800aa48

08001e28 <start_adc>:

void start_adc()
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 8);
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4903      	ldr	r1, [pc, #12]	; (8001e3c <start_adc+0x14>)
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <start_adc+0x18>)
 8001e32:	f000 fc75 	bl	8002720 <HAL_ADC_Start_DMA>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200004f4 	.word	0x200004f4
 8001e40:	2000027c 	.word	0x2000027c

08001e44 <init_buttons>:
    buttons[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET;
    buttons[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET;
}

void init_buttons()
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
    // initialized in main.c
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <start_buttons>:

void start_buttons()
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
    // nothing to start
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <init_dac>:
    if (ch2 < 0) ch2 = 0;
    HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, ch2, ch1);
}

void init_dac(float *scales, float *offsets)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]

    dac1_scale = scales[0];
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <init_dac+0x38>)
 8001e70:	6013      	str	r3, [r2, #0]
    dac2_scale = scales[1];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <init_dac+0x3c>)
 8001e78:	6013      	str	r3, [r2, #0]
    dac1_offset = offsets[0];
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <init_dac+0x40>)
 8001e80:	6013      	str	r3, [r2, #0]
    dac2_offset = offsets[1];
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <init_dac+0x44>)
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000554 	.word	0x20000554
 8001e9c:	20000558 	.word	0x20000558
 8001ea0:	2000055c 	.word	0x2000055c
 8001ea4:	20000560 	.word	0x20000560

08001ea8 <start_dac>:

void start_dac()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001eac:	2100      	movs	r1, #0
 8001eae:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <start_dac+0x18>)
 8001eb0:	f001 f947 	bl	8003142 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <start_dac+0x18>)
 8001eb8:	f001 f943 	bl	8003142 <HAL_DAC_Start>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000324 	.word	0x20000324

08001ec4 <init_gates>:
bool gates_in[DEMIURGE_NUM_GATES];
bool gates_out[DEMIURGE_NUM_GATES];
bool gates_dir[DEMIURGE_NUM_GATES];

void init_gates(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <start_gates>:
    if (gates_dir[0])
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, gates_out[0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void start_gates()
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
    // nothing to start
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <readRegister>:
    0x18, 0x19, 0x1A,  // LED 3; R, G, B
    0x03, 0x04, 0x05   // LED 4; R, G, B
};

static uint8_t readRegister(int regAddress)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, AW20036_ADDR, regAddress, 1, &data, 1, I2C_TIMEOUT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2364      	movs	r3, #100	; 0x64
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f107 030f 	add.w	r3, r7, #15
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	2174      	movs	r1, #116	; 0x74
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <readRegister+0x50>)
 8001f04:	f002 f94a 	bl	800419c <HAL_I2C_Mem_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <readRegister+0x44>
    {
        uint32_t errorCode = hi2c1.ErrorCode;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <readRegister+0x50>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	613b      	str	r3, [r7, #16]
        printf("I2C error: %d, %ld", status, errorCode);
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <readRegister+0x54>)
 8001f20:	f006 ff46 	bl	8008db0 <iprintf>
    }
    return data;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000338 	.word	0x20000338
 8001f34:	0800aa64 	.word	0x0800aa64

08001f38 <setRegister>:

static void setRegister(int regAddress, int value)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    uint8_t data = value;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, AW20036_ADDR, regAddress, 1, &data, 1, I2C_TIMEOUT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	9302      	str	r3, [sp, #8]
 8001f50:	2301      	movs	r3, #1
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	f107 030f 	add.w	r3, r7, #15
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2174      	movs	r1, #116	; 0x74
 8001f5e:	480a      	ldr	r0, [pc, #40]	; (8001f88 <setRegister+0x50>)
 8001f60:	f002 f822 	bl	8003fa8 <HAL_I2C_Mem_Write>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <setRegister+0x48>
    {
        uint32_t errorCode = hi2c1.ErrorCode;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <setRegister+0x50>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	613b      	str	r3, [r7, #16]
        printf("I2C error: %d, %ld", status, errorCode);
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4804      	ldr	r0, [pc, #16]	; (8001f8c <setRegister+0x54>)
 8001f7c:	f006 ff18 	bl	8008db0 <iprintf>
    }
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000338 	.word	0x20000338
 8001f8c:	0800aa64 	.word	0x0800aa64

08001f90 <turnoff_AW20036>:

static void turnoff_AW20036()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    // Turn off AW20036 chip
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9a:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <turnoff_AW20036+0x14>)
 8001f9c:	f001 fea6 	bl	8003cec <HAL_GPIO_WritePin>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <turnon_AW20036>:

static void turnon_AW20036()
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    // Turn on AW20036 chip
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb2:	4802      	ldr	r0, [pc, #8]	; (8001fbc <turnon_AW20036+0x14>)
 8001fb4:	f001 fe9a 	bl	8003cec <HAL_GPIO_WritePin>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <test_led>:
    0x59,
    0x80
};

static void test_led(int reg, int color)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    setRegister(0xF0, 0xC2);
 8001fca:	21c2      	movs	r1, #194	; 0xc2
 8001fcc:	20f0      	movs	r0, #240	; 0xf0
 8001fce:	f7ff ffb3 	bl	8001f38 <setRegister>
    setRegister(reg, color);
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ffaf 	bl	8001f38 <setRegister>
    HAL_Delay(100);
 8001fda:	2064      	movs	r0, #100	; 0x64
 8001fdc:	f000 fb38 	bl	8002650 <HAL_Delay>
    setRegister(reg, 0x0);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa8 	bl	8001f38 <setRegister>
    HAL_Delay(100);
 8001fe8:	2064      	movs	r0, #100	; 0x64
 8001fea:	f000 fb31 	bl	8002650 <HAL_Delay>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <write_registers>:

void write_registers()
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
    setRegister(0xF0, 0xC0);
 8001ffe:	21c0      	movs	r1, #192	; 0xc0
 8002000:	20f0      	movs	r0, #240	; 0xf0
 8002002:	f7ff ff99 	bl	8001f38 <setRegister>
    setRegister(0x1, 0x0);
 8002006:	2100      	movs	r1, #0
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff ff95 	bl	8001f38 <setRegister>
    setRegister(0x3, 0x18);  // High 4 bits= IMAX, Low = ALLON
 800200e:	2118      	movs	r1, #24
 8002010:	2003      	movs	r0, #3
 8002012:	f7ff ff91 	bl	8001f38 <setRegister>
    //    0100: 60mA 1100: 20mA
    //    0101: 80mA 1101: 26.7mA
    //    0110: 120mA 1110: 40mA
    //    0111: 160mA 1111: 53.3mA

    setRegister(0x4, 0x1);  // clear all
 8002016:	2101      	movs	r1, #1
 8002018:	2004      	movs	r0, #4
 800201a:	f7ff ff8d 	bl	8001f38 <setRegister>
    setRegister(0x80, 0x2);
 800201e:	2102      	movs	r1, #2
 8002020:	2080      	movs	r0, #128	; 0x80
 8002022:	f7ff ff89 	bl	8001f38 <setRegister>
    setRegister(0x31, 0x3F);
 8002026:	213f      	movs	r1, #63	; 0x3f
 8002028:	2031      	movs	r0, #49	; 0x31
 800202a:	f7ff ff85 	bl	8001f38 <setRegister>
    setRegister(0x32, 0x3F);
 800202e:	213f      	movs	r1, #63	; 0x3f
 8002030:	2032      	movs	r0, #50	; 0x32
 8002032:	f7ff ff81 	bl	8001f38 <setRegister>
    setRegister(0x33, 0x3F);
 8002036:	213f      	movs	r1, #63	; 0x3f
 8002038:	2033      	movs	r0, #51	; 0x33
 800203a:	f7ff ff7d 	bl	8001f38 <setRegister>
    setRegister(0x34, 0x3F);
 800203e:	213f      	movs	r1, #63	; 0x3f
 8002040:	2034      	movs	r0, #52	; 0x34
 8002042:	f7ff ff79 	bl	8001f38 <setRegister>
    setRegister(0x35, 0x3F);
 8002046:	213f      	movs	r1, #63	; 0x3f
 8002048:	2035      	movs	r0, #53	; 0x35
 800204a:	f7ff ff75 	bl	8001f38 <setRegister>
    setRegister(0x36, 0x3F);
 800204e:	213f      	movs	r1, #63	; 0x3f
 8002050:	2036      	movs	r0, #54	; 0x36
 8002052:	f7ff ff71 	bl	8001f38 <setRegister>

    setRegister(0xF0, 0xC1);    // DIM page
 8002056:	21c1      	movs	r1, #193	; 0xc1
 8002058:	20f0      	movs	r0, #240	; 0xf0
 800205a:	f7ff ff6d 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e006      	b.n	8002072 <write_registers+0x7a>
        setRegister(i, 0x2f);   // half dimming
 8002064:	212f      	movs	r1, #47	; 0x2f
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff ff66 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b23      	cmp	r3, #35	; 0x23
 8002076:	ddf5      	ble.n	8002064 <write_registers+0x6c>

    setRegister(0xF0, 0xC2);    // FADE page
 8002078:	21c2      	movs	r1, #194	; 0xc2
 800207a:	20f0      	movs	r0, #240	; 0xf0
 800207c:	f7ff ff5c 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	e006      	b.n	8002094 <write_registers+0x9c>
        setRegister(i, 0x00);   // off
 8002086:	2100      	movs	r1, #0
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7ff ff55 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b23      	cmp	r3, #35	; 0x23
 8002098:	ddf5      	ble.n	8002086 <write_registers+0x8e>

    setRegister(0xF0, 0xC3);    // Pattern page
 800209a:	21c3      	movs	r1, #195	; 0xc3
 800209c:	20f0      	movs	r0, #240	; 0xf0
 800209e:	f7ff ff4b 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e006      	b.n	80020b6 <write_registers+0xbe>
        setRegister(i, 0x0);    // Pattern 0. Not enabled in reg 0x43 Page 0.
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff44 	bl	8001f38 <setRegister>
    for (int i = 0; i < 36; i++)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b23      	cmp	r3, #35	; 0x23
 80020ba:	ddf5      	ble.n	80020a8 <write_registers+0xb0>

    setRegister(0xF0, 0xC0);
 80020bc:	21c0      	movs	r1, #192	; 0xc0
 80020be:	20f0      	movs	r0, #240	; 0xf0
 80020c0:	f7ff ff3a 	bl	8001f38 <setRegister>
    for (int i = 0; i < sizeof(page0_of_interest); i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	e014      	b.n	80020f4 <write_registers+0xfc>
        printf("Page 0, Address %d = %d\n", page0_of_interest[i], readRegister(page0_of_interest[i]));
 80020ca:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <write_registers+0x10c>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461c      	mov	r4, r3
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <write_registers+0x10c>)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff feff 	bl	8001ee0 <readRegister>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4621      	mov	r1, r4
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <write_registers+0x110>)
 80020ea:	f006 fe61 	bl	8008db0 <iprintf>
    for (int i = 0; i < sizeof(page0_of_interest); i++)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b1e      	cmp	r3, #30
 80020f8:	d9e7      	bls.n	80020ca <write_registers+0xd2>
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	20000010 	.word	0x20000010
 8002108:	0800aa90 	.word	0x0800aa90

0800210c <init_leds>:

void init_leds()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
    turnoff_AW20036();
 8002110:	f7ff ff3e 	bl	8001f90 <turnoff_AW20036>
    HAL_Delay(10);
 8002114:	200a      	movs	r0, #10
 8002116:	f000 fa9b 	bl	8002650 <HAL_Delay>
    turnon_AW20036();
 800211a:	f7ff ff45 	bl	8001fa8 <turnon_AW20036>
    HAL_Delay(10);
 800211e:	200a      	movs	r0, #10
 8002120:	f000 fa96 	bl	8002650 <HAL_Delay>

    setRegister(0xF0, 0); // addressing page 0
 8002124:	2100      	movs	r1, #0
 8002126:	20f0      	movs	r0, #240	; 0xf0
 8002128:	f7ff ff06 	bl	8001f38 <setRegister>

    printf("Chip ID: %d\n", readRegister(0));
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fed7 	bl	8001ee0 <readRegister>
 8002132:	4603      	mov	r3, r0
 8002134:	4619      	mov	r1, r3
 8002136:	481c      	ldr	r0, [pc, #112]	; (80021a8 <init_leds+0x9c>)
 8002138:	f006 fe3a 	bl	8008db0 <iprintf>
    printf("Sleep Mode Ctrl: %d\n", readRegister(1));
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff fecf 	bl	8001ee0 <readRegister>
 8002142:	4603      	mov	r3, r0
 8002144:	4619      	mov	r1, r3
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <init_leds+0xa0>)
 8002148:	f006 fe32 	bl	8008db0 <iprintf>
    printf("Global Current Config: %d\n", readRegister(3));
 800214c:	2003      	movs	r0, #3
 800214e:	f7ff fec7 	bl	8001ee0 <readRegister>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	4816      	ldr	r0, [pc, #88]	; (80021b0 <init_leds+0xa4>)
 8002158:	f006 fe2a 	bl	8008db0 <iprintf>
    printf("Clock Ctrl: %d\n", readRegister(5));
 800215c:	2005      	movs	r0, #5
 800215e:	f7ff febf 	bl	8001ee0 <readRegister>
 8002162:	4603      	mov	r3, r0
 8002164:	4619      	mov	r1, r3
 8002166:	4813      	ldr	r0, [pc, #76]	; (80021b4 <init_leds+0xa8>)
 8002168:	f006 fe22 	bl	8008db0 <iprintf>
    printf("Fault Config 1: %d\n", readRegister(9));
 800216c:	2009      	movs	r0, #9
 800216e:	f7ff feb7 	bl	8001ee0 <readRegister>
 8002172:	4603      	mov	r3, r0
 8002174:	4619      	mov	r1, r3
 8002176:	4810      	ldr	r0, [pc, #64]	; (80021b8 <init_leds+0xac>)
 8002178:	f006 fe1a 	bl	8008db0 <iprintf>
    printf("Fault Config 2: %d\n", readRegister(0xa));
 800217c:	200a      	movs	r0, #10
 800217e:	f7ff feaf 	bl	8001ee0 <readRegister>
 8002182:	4603      	mov	r3, r0
 8002184:	4619      	mov	r1, r3
 8002186:	480d      	ldr	r0, [pc, #52]	; (80021bc <init_leds+0xb0>)
 8002188:	f006 fe12 	bl	8008db0 <iprintf>
    printf("Interrupt Status: %d\n", readRegister(0xb));
 800218c:	200b      	movs	r0, #11
 800218e:	f7ff fea7 	bl	8001ee0 <readRegister>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	480a      	ldr	r0, [pc, #40]	; (80021c0 <init_leds+0xb4>)
 8002198:	f006 fe0a 	bl	8008db0 <iprintf>
    HAL_Delay(10);
 800219c:	200a      	movs	r0, #10
 800219e:	f000 fa57 	bl	8002650 <HAL_Delay>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	0800aaac 	.word	0x0800aaac
 80021ac:	0800aabc 	.word	0x0800aabc
 80021b0:	0800aad4 	.word	0x0800aad4
 80021b4:	0800aaf0 	.word	0x0800aaf0
 80021b8:	0800ab00 	.word	0x0800ab00
 80021bc:	0800ab14 	.word	0x0800ab14
 80021c0:	0800ab28 	.word	0x0800ab28

080021c4 <set_led>:

void set_led(uint8_t led, int fade)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
    leds_page2[led] = fade;
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	b2d1      	uxtb	r1, r2
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <set_led+0x24>)
 80021d8:	54d1      	strb	r1, [r2, r3]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000564 	.word	0x20000564

080021ec <start_leds>:
    *(++ptr) = g;
    *(++ptr) = b;
}

void start_leds()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
    write_registers();
 80021f2:	f7ff ff01 	bl	8001ff8 <write_registers>

    for (int i = 0; i < sizeof(led_reg); i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	e00a      	b.n	8002212 <start_leds+0x26>
    {
        test_led(led_reg[i], 0xFF);
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <start_leds+0xa4>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	21ff      	movs	r1, #255	; 0xff
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff feda 	bl	8001fc0 <test_led>
    for (int i = 0; i < sizeof(led_reg); i++)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0b      	cmp	r3, #11
 8002216:	d9f1      	bls.n	80021fc <start_leds+0x10>
    }
    HAL_Delay(100);
 8002218:	2064      	movs	r0, #100	; 0x64
 800221a:	f000 fa19 	bl	8002650 <HAL_Delay>
    for (int i = 0; i < 12; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	e00a      	b.n	800223a <start_leds+0x4e>
    {
        set_led(led_reg[i], 0);
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <start_leds+0xa4>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ffc8 	bl	80021c4 <set_led>
    for (int i = 0; i < 12; i++)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b0b      	cmp	r3, #11
 800223e:	ddf1      	ble.n	8002224 <start_leds+0x38>
    }
    setRegister(0xF0, 0xC1);
 8002240:	21c1      	movs	r1, #193	; 0xc1
 8002242:	20f0      	movs	r0, #240	; 0xf0
 8002244:	f7ff fe78 	bl	8001f38 <setRegister>
    setRegister(0x31, 0x0);
 8002248:	2100      	movs	r1, #0
 800224a:	2031      	movs	r0, #49	; 0x31
 800224c:	f7ff fe74 	bl	8001f38 <setRegister>
    setRegister(0x32, 0x0);
 8002250:	2100      	movs	r1, #0
 8002252:	2032      	movs	r0, #50	; 0x32
 8002254:	f7ff fe70 	bl	8001f38 <setRegister>
    setRegister(0x33, 0x0);
 8002258:	2100      	movs	r1, #0
 800225a:	2033      	movs	r0, #51	; 0x33
 800225c:	f7ff fe6c 	bl	8001f38 <setRegister>
    setRegister(0x34, 0x0);
 8002260:	2100      	movs	r1, #0
 8002262:	2034      	movs	r0, #52	; 0x34
 8002264:	f7ff fe68 	bl	8001f38 <setRegister>
    setRegister(0x35, 0x0);
 8002268:	2100      	movs	r1, #0
 800226a:	2035      	movs	r0, #53	; 0x35
 800226c:	f7ff fe64 	bl	8001f38 <setRegister>
    setRegister(0x36, 0x0);
 8002270:	2100      	movs	r1, #0
 8002272:	2036      	movs	r0, #54	; 0x36
 8002274:	f7ff fe60 	bl	8001f38 <setRegister>
    setRegister(0xF0, 0xC2);
 8002278:	21c2      	movs	r1, #194	; 0xc2
 800227a:	20f0      	movs	r0, #240	; 0xf0
 800227c:	f7ff fe5c 	bl	8001f38 <setRegister>
    printf("LEDs started\n");
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <start_leds+0xa8>)
 8002282:	f006 fe1b 	bl	8008ebc <puts>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000004 	.word	0x20000004
 8002294:	0800ab40 	.word	0x0800ab40

08002298 <init_potentiometers>:
void update_potentiometers()
{
}

void init_potentiometers()
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <start_potentiometers>:

void start_potentiometers()
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <init_testpoints>:
*/

#include "demiurge-hardware.h"

void init_testpoints()
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <start_testpoints>:

void start_testpoints()
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <set_testpoint>:
            break;
    }
}

void set_testpoint(int point)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    switch (point)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d015      	beq.n	800230a <set_testpoint+0x3a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	dc18      	bgt.n	8002316 <set_testpoint+0x46>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d003      	beq.n	80022f2 <set_testpoint+0x22>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d006      	beq.n	80022fe <set_testpoint+0x2e>
            break;
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
            break;
        default:
            break;
 80022f0:	e011      	b.n	8002316 <set_testpoint+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2108      	movs	r1, #8
 80022f6:	480a      	ldr	r0, [pc, #40]	; (8002320 <set_testpoint+0x50>)
 80022f8:	f001 fcf8 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 80022fc:	e00c      	b.n	8002318 <set_testpoint+0x48>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	2110      	movs	r1, #16
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <set_testpoint+0x50>)
 8002304:	f001 fcf2 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 8002308:	e006      	b.n	8002318 <set_testpoint+0x48>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2120      	movs	r1, #32
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <set_testpoint+0x50>)
 8002310:	f001 fcec 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 8002314:	e000      	b.n	8002318 <set_testpoint+0x48>
            break;
 8002316:	bf00      	nop
    }
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40020400 	.word	0x40020400

08002324 <clear_testpoint>:

void clear_testpoint(int point)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    switch (point)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d015      	beq.n	800235e <clear_testpoint+0x3a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b03      	cmp	r3, #3
 8002336:	dc18      	bgt.n	800236a <clear_testpoint+0x46>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d003      	beq.n	8002346 <clear_testpoint+0x22>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d006      	beq.n	8002352 <clear_testpoint+0x2e>
            break;
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
            break;
        default:
            break;
 8002344:	e011      	b.n	800236a <clear_testpoint+0x46>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	2108      	movs	r1, #8
 800234a:	480a      	ldr	r0, [pc, #40]	; (8002374 <clear_testpoint+0x50>)
 800234c:	f001 fcce 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 8002350:	e00c      	b.n	800236c <clear_testpoint+0x48>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2110      	movs	r1, #16
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <clear_testpoint+0x50>)
 8002358:	f001 fcc8 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 800235c:	e006      	b.n	800236c <clear_testpoint+0x48>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2120      	movs	r1, #32
 8002362:	4804      	ldr	r0, [pc, #16]	; (8002374 <clear_testpoint+0x50>)
 8002364:	f001 fcc2 	bl	8003cec <HAL_GPIO_WritePin>
            break;
 8002368:	e000      	b.n	800236c <clear_testpoint+0x48>
            break;
 800236a:	bf00      	nop
    }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40020400 	.word	0x40020400

08002378 <init_timer>:
*/

#include "demiurge-hardware.h"

void init_timer(int samplerate)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <start_timer>:

void start_timer()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim3);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <start_timer+0x10>)
 8002392:	f004 ffbf 	bl	8007314 <HAL_TIM_Base_Start_IT>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000444 	.word	0x20000444

080023a0 <demiurge_driver_init>:

float dac_scales[] = {204.7f, 204.7f};
float dac_offsets[] = {10.0f, 10.0f};

void demiurge_driver_init()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
    init_testpoints();
 80023a4:	f7ff ff86 	bl	80022b4 <init_testpoints>
    init_adc(adc_scales, adc_offsets);
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <demiurge_driver_init+0x38>)
 80023aa:	480c      	ldr	r0, [pc, #48]	; (80023dc <demiurge_driver_init+0x3c>)
 80023ac:	f7ff fcbc 	bl	8001d28 <init_adc>
    init_buttons();
 80023b0:	f7ff fd48 	bl	8001e44 <init_buttons>
    init_dac(dac_scales, dac_offsets);
 80023b4:	490a      	ldr	r1, [pc, #40]	; (80023e0 <demiurge_driver_init+0x40>)
 80023b6:	480b      	ldr	r0, [pc, #44]	; (80023e4 <demiurge_driver_init+0x44>)
 80023b8:	f7ff fd52 	bl	8001e60 <init_dac>
    init_gates();
 80023bc:	f7ff fd82 	bl	8001ec4 <init_gates>
    init_leds();
 80023c0:	f7ff fea4 	bl	800210c <init_leds>
    init_potentiometers();
 80023c4:	f7ff ff68 	bl	8002298 <init_potentiometers>

    init_timer(demiurge_samplerate);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <demiurge_driver_init+0x48>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ffd3 	bl	8002378 <init_timer>
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000006c 	.word	0x2000006c
 80023dc:	2000004c 	.word	0x2000004c
 80023e0:	20000094 	.word	0x20000094
 80023e4:	2000008c 	.word	0x2000008c
 80023e8:	200005ac 	.word	0x200005ac

080023ec <demiurge_driver_start>:

void demiurge_driver_start()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
    start_testpoints();
 80023f0:	f7ff ff67 	bl	80022c2 <start_testpoints>

    set_testpoint(0);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff ff6b 	bl	80022d0 <set_testpoint>
    clear_testpoint(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff ff92 	bl	8002324 <clear_testpoint>

    start_adc();
 8002400:	f7ff fd12 	bl	8001e28 <start_adc>
    start_buttons();
 8002404:	f7ff fd25 	bl	8001e52 <start_buttons>
    start_dac();
 8002408:	f7ff fd4e 	bl	8001ea8 <start_dac>
    start_gates();
 800240c:	f7ff fd61 	bl	8001ed2 <start_gates>
    start_leds();
 8002410:	f7ff feec 	bl	80021ec <start_leds>
    start_potentiometers();
 8002414:	f7ff ff47 	bl	80022a6 <start_potentiometers>

    set_testpoint(0);
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ff59 	bl	80022d0 <set_testpoint>
    clear_testpoint(0);
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff ff80 	bl	8002324 <clear_testpoint>
    set_testpoint(0);
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff ff53 	bl	80022d0 <set_testpoint>
    clear_testpoint(0);
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff ff7a 	bl	8002324 <clear_testpoint>

    start_timer();
 8002430:	f7ff ffac 	bl	800238c <start_timer>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <demiurge_driver_info>:

    stop_testpoints();
}

demiurge_driver_info_t *demiurge_driver_info()
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
    return &driver_info;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <demiurge_driver_info+0x10>)
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	20000030 	.word	0x20000030

0800244c <demiurge_input_mode>:
    adc_scales[position + DEMIURGE_POTENTIOMETER_OFFSET - 1] = -k;
    adc_offsets[position + DEMIURGE_POTENTIOMETER_OFFSET - 1] = max;
}

void demiurge_input_mode(int position, inout_type type)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
    switch (type)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d833      	bhi.n	80024c6 <demiurge_input_mode+0x7a>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <demiurge_input_mode+0x18>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	080024a7 	.word	0x080024a7
 800246c:	080024c5 	.word	0x080024c5
 8002470:	080024c5 	.word	0x080024c5
    {
        case CV:
            // Set ADC to a 0-10V range
            adc_scales[position + DEMIURGE_AUDIOINPUT_OFFSET - 1] = -1 / 204.8;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <demiurge_input_mode+0x88>)
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <demiurge_input_mode+0x8c>)
 8002480:	601a      	str	r2, [r3, #0]
            adc_offsets[position + DEMIURGE_AUDIOINPUT_OFFSET - 1] = 10.0f + calibration_cv[position];
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <demiurge_input_mode+0x90>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3b01      	subs	r3, #1
 8002492:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <demiurge_input_mode+0x94>)
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	edc3 7a00 	vstr	s15, [r3]
            break;
 80024a4:	e00f      	b.n	80024c6 <demiurge_input_mode+0x7a>
        case Audio:
            // Set ADC to a -10V to +10V range
            adc_scales[position + DEMIURGE_AUDIOINPUT_OFFSET - 1] = -1 / 204.8;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <demiurge_input_mode+0x88>)
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <demiurge_input_mode+0x8c>)
 80024b2:	601a      	str	r2, [r3, #0]
            adc_offsets[position + DEMIURGE_AUDIOINPUT_OFFSET - 1] = 10.0f;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <demiurge_input_mode+0x94>)
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <demiurge_input_mode+0x98>)
 80024c0:	601a      	str	r2, [r3, #0]
            break;
 80024c2:	e000      	b.n	80024c6 <demiurge_input_mode+0x7a>
        case Trig:
            break;
 80024c4:	bf00      	nop
        case Gate:
            break;
    }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000004c 	.word	0x2000004c
 80024d8:	bba00000 	.word	0xbba00000
 80024dc:	20000588 	.word	0x20000588
 80024e0:	2000006c 	.word	0x2000006c
 80024e4:	41200000 	.word	0x41200000

080024e8 <demiurge_output_mode>:

void demiurge_output_mode(int position, inout_type type)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
    switch (type)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d829      	bhi.n	800254e <demiurge_output_mode+0x66>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <demiurge_output_mode+0x18>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	0800252f 	.word	0x0800252f
 8002508:	0800254d 	.word	0x0800254d
 800250c:	0800254d 	.word	0x0800254d
    {
        case CV:
            // Set DAC to a 0-10V range
            dac_scales[position + DEMIURGE_AUDIOOUTPUT_OFFSET - 1] = 204.7f;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <demiurge_output_mode+0x74>)
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <demiurge_output_mode+0x78>)
 800251c:	601a      	str	r2, [r3, #0]
            dac_offsets[position + DEMIURGE_AUDIOOUTPUT_OFFSET - 1] = 10.0f;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3b01      	subs	r3, #1
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <demiurge_output_mode+0x7c>)
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <demiurge_output_mode+0x80>)
 800252a:	601a      	str	r2, [r3, #0]
            break;
 800252c:	e00f      	b.n	800254e <demiurge_output_mode+0x66>
        case Audio:
            // Set DAC to a -10V to +10V range
            dac_scales[position + DEMIURGE_AUDIOOUTPUT_OFFSET - 1] = 204.7f;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3b01      	subs	r3, #1
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <demiurge_output_mode+0x74>)
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <demiurge_output_mode+0x78>)
 800253a:	601a      	str	r2, [r3, #0]
            dac_offsets[position + DEMIURGE_AUDIOOUTPUT_OFFSET - 1] = 10.0f;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <demiurge_output_mode+0x7c>)
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <demiurge_output_mode+0x80>)
 8002548:	601a      	str	r2, [r3, #0]
            break;
 800254a:	e000      	b.n	800254e <demiurge_output_mode+0x66>
        case Trig:
            break;
 800254c:	bf00      	nop
        case Gate:
            break;
    }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000008c 	.word	0x2000008c
 8002560:	434cb333 	.word	0x434cb333
 8002564:	20000094 	.word	0x20000094
 8002568:	41200000 	.word	0x41200000

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <HAL_Init+0x40>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_Init+0x40>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_Init+0x40>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002594:	2003      	movs	r0, #3
 8002596:	f000 fd71 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	200e      	movs	r0, #14
 800259c:	f000 f808 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f7ff f852 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x54>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd89 	bl	80030e6 <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00e      	b.n	80025fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d80a      	bhi.n	80025fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	f000 fd51 	bl	8003092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_InitTick+0x5c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000000 	.word	0x20000000
 8002608:	200000a0 	.word	0x200000a0
 800260c:	2000009c 	.word	0x2000009c

08002610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200000a0 	.word	0x200000a0
 8002634:	200005a8 	.word	0x200005a8

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200005a8 	.word	0x200005a8

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200000a0 	.word	0x200000a0

08002698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e033      	b.n	8002716 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe ffee 	bl	8001698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026de:	f023 0302 	bic.w	r3, r3, #2
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa78 	bl	8002be0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	e001      	b.n	800270c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_ADC_Start_DMA+0x1e>
 800273a:	2302      	movs	r3, #2
 800273c:	e0e9      	b.n	8002912 <HAL_ADC_Start_DMA+0x1f2>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d018      	beq.n	8002786 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002764:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_ADC_Start_DMA+0x1fc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_ADC_Start_DMA+0x200>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9a      	lsrs	r2, r3, #18
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002778:	e002      	b.n	8002780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3b01      	subs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 80a1 	bne.w	80028f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f023 0206 	bic.w	r2, r3, #6
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
 8002802:	e002      	b.n	800280a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 8002814:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_ADC_Start_DMA+0x208>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_ADC_Start_DMA+0x20c>)
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_ADC_Start_DMA+0x210>)
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002846:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	334c      	adds	r3, #76	; 0x4c
 8002862:	4619      	mov	r1, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f000 fdba 	bl	80033e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2b00      	cmp	r3, #0
 8002876:	d12a      	bne.n	80028ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_ADC_Start_DMA+0x214>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d015      	beq.n	80028ae <HAL_ADC_Start_DMA+0x18e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <HAL_ADC_Start_DMA+0x218>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d105      	bne.n	8002898 <HAL_ADC_Start_DMA+0x178>
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_ADC_Start_DMA+0x21c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d136      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d130      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d129      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e020      	b.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_ADC_Start_DMA+0x214>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11b      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d114      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	e00b      	b.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000
 8002920:	431bde83 	.word	0x431bde83
 8002924:	40012300 	.word	0x40012300
 8002928:	08002dd9 	.word	0x08002dd9
 800292c:	08002e93 	.word	0x08002e93
 8002930:	08002eaf 	.word	0x08002eaf
 8002934:	40012000 	.word	0x40012000
 8002938:	40012100 	.word	0x40012100
 800293c:	40012200 	.word	0x40012200

08002940 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e113      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x244>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d925      	bls.n	80029f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	4603      	mov	r3, r0
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4403      	add	r3, r0
 80029e6:	3b1e      	subs	r3, #30
 80029e8:	409a      	lsls	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e022      	b.n	8002a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	2207      	movs	r2, #7
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4403      	add	r3, r0
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d824      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b05      	subs	r3, #5
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8a:	e04c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d824      	bhi.n	8002ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b23      	subs	r3, #35	; 0x23
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b23      	subs	r3, #35	; 0x23
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
 8002adc:	e023      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	; 0x41
 8002af0:	221f      	movs	r2, #31
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	400a      	ands	r2, r1
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b41      	subs	r3, #65	; 0x41
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_ADC_ConfigChannel+0x250>)
 8002b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <HAL_ADC_ConfigChannel+0x254>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10f      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1d8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_ADC_ConfigChannel+0x254>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12b      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x23a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_ADC_ConfigChannel+0x258>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x1f4>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b11      	cmp	r3, #17
 8002b6e:	d122      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_ADC_ConfigChannel+0x258>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d111      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_ADC_ConfigChannel+0x260>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	0c9a      	lsrs	r2, r3, #18
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ba8:	e002      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f9      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40012300 	.word	0x40012300
 8002bd0:	40012000 	.word	0x40012000
 8002bd4:	10000012 	.word	0x10000012
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	431bde83 	.word	0x431bde83

08002be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <ADC_Init+0x1f0>)
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	021a      	lsls	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <ADC_Init+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e00f      	b.n	8002cde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0202 	bic.w	r2, r2, #2
 8002cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	005a      	lsls	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	3b01      	subs	r3, #1
 8002d38:	035a      	lsls	r2, r3, #13
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	e007      	b.n	8002d54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	051a      	lsls	r2, r3, #20
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d96:	025a      	lsls	r2, r3, #9
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	029a      	lsls	r2, r3, #10
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012300 	.word	0x40012300
 8002dd4:	0f000001 	.word	0x0f000001

08002dd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13c      	bne.n	8002e6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d12b      	bne.n	8002e64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d127      	bne.n	8002e64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d119      	bne.n	8002e64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0220 	bic.w	r2, r2, #32
 8002e3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff fd6b 	bl	8002940 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e6a:	e00e      	b.n	8002e8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fd75 	bl	8002968 <HAL_ADC_ErrorCallback>
}
 8002e7e:	e004      	b.n	8002e8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fd57 	bl	8002954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fd4a 	bl	8002968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	; (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff29 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff3e 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff8e 	bl	8002fd0 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5d 	bl	8002f7c <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff31 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e014      	b.n	800313a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe fb4d 	bl	80017c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	795b      	ldrb	r3, [r3, #5]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_DAC_Start+0x16>
 8003154:	2302      	movs	r3, #2
 8003156:	e040      	b.n	80031da <HAL_DAC_Start+0x98>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800318c:	2b3c      	cmp	r3, #60	; 0x3c
 800318e:	d11d      	bne.n	80031cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	e014      	b.n	80031cc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	213c      	movs	r1, #60	; 0x3c
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0202 	orr.w	r2, r2, #2
 80031ca:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	795b      	ldrb	r3, [r3, #5]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_DAC_ConfigChannel+0x18>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e03c      	b.n	8003278 <HAL_DAC_ConfigChannel+0x92>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2202      	movs	r2, #2
 8003208:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	f640 72fe 	movw	r2, #4094	; 0xffe
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	22c0      	movs	r2, #192	; 0xc0
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff f9d2 	bl	8002638 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e099      	b.n	80033d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c0:	e00f      	b.n	80032e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c2:	f7ff f9b9 	bl	8002638 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d908      	bls.n	80032e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e078      	b.n	80033d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e8      	bne.n	80032c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_DMA_Init+0x158>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4313      	orrs	r3, r2
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b04      	cmp	r3, #4
 8003374:	d117      	bne.n	80033a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fa9f 	bl	80038cc <DMA_CheckFifoParam>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033a2:	2301      	movs	r3, #1
 80033a4:	e016      	b.n	80033d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa56 	bl	8003860 <DMA_CalcBaseAndBitshift>
 80033b4:	4603      	mov	r3, r0
 80033b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	223f      	movs	r2, #63	; 0x3f
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	f010803f 	.word	0xf010803f

080033e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_DMA_Start_IT+0x26>
 8003402:	2302      	movs	r3, #2
 8003404:	e040      	b.n	8003488 <HAL_DMA_Start_IT+0xa8>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d12f      	bne.n	800347a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f9e8 	bl	8003804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0216 	orr.w	r2, r2, #22
 800344e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0208 	orr.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e005      	b.n	8003486 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d004      	beq.n	80034ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00c      	b.n	80034c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034e0:	4b8e      	ldr	r3, [pc, #568]	; (800371c <HAL_DMA_IRQHandler+0x248>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a8e      	ldr	r2, [pc, #568]	; (8003720 <HAL_DMA_IRQHandler+0x24c>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0a9b      	lsrs	r3, r3, #10
 80034ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2208      	movs	r2, #8
 8003500:	409a      	lsls	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01a      	beq.n	8003540 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2208      	movs	r2, #8
 800352e:	409a      	lsls	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	2201      	movs	r2, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2201      	movs	r2, #1
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0202 	orr.w	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	2204      	movs	r2, #4
 800357c:	409a      	lsls	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2204      	movs	r2, #4
 800359a:	409a      	lsls	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2210      	movs	r2, #16
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d043      	beq.n	8003644 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d03c      	beq.n	8003644 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2210      	movs	r2, #16
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d024      	beq.n	8003644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e01f      	b.n	8003644 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e016      	b.n	8003644 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0208 	bic.w	r2, r2, #8
 8003632:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	2220      	movs	r2, #32
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 808f 	beq.w	8003774 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8087 	beq.w	8003774 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2220      	movs	r2, #32
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b05      	cmp	r3, #5
 800367c:	d136      	bne.n	80036ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0216 	bic.w	r2, r2, #22
 800368c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800369c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <HAL_DMA_IRQHandler+0x1da>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0208 	bic.w	r2, r2, #8
 80036bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	223f      	movs	r2, #63	; 0x3f
 80036c4:	409a      	lsls	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07e      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
        }
        return;
 80036ea:	e079      	b.n	80037e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01d      	beq.n	8003736 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	2b00      	cmp	r3, #0
 800370e:	d031      	beq.n	8003774 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e02c      	b.n	8003774 <HAL_DMA_IRQHandler+0x2a0>
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000
 8003720:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e01e      	b.n	8003774 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10f      	bne.n	8003764 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	d032      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d022      	beq.n	80037ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2205      	movs	r2, #5
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d307      	bcc.n	80037bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f2      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x2cc>
 80037ba:	e000      	b.n	80037be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
 80037de:	e000      	b.n	80037e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037e0:	bf00      	nop
    }
  }
}
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f6:	b2db      	uxtb	r3, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d108      	bne.n	8003844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003842:	e007      	b.n	8003854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	3b10      	subs	r3, #16
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <DMA_CalcBaseAndBitshift+0x68>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d909      	bls.n	80038a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	659a      	str	r2, [r3, #88]	; 0x58
 80038a0:	e007      	b.n	80038b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	aaaaaaab 	.word	0xaaaaaaab
 80038c8:	0800af08 	.word	0x0800af08

080038cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d856      	bhi.n	800399a <DMA_CheckFifoParam+0xce>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x28>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003917 	.word	0x08003917
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800399b 	.word	0x0800399b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d046      	beq.n	800399e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003914:	e043      	b.n	800399e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800391e:	d140      	bne.n	80039a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e03d      	b.n	80039a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392e:	d121      	bne.n	8003974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d837      	bhi.n	80039a6 <DMA_CheckFifoParam+0xda>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <DMA_CheckFifoParam+0x70>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003953 	.word	0x08003953
 8003944:	0800394d 	.word	0x0800394d
 8003948:	08003965 	.word	0x08003965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      break;
 8003950:	e030      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d025      	beq.n	80039aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003962:	e022      	b.n	80039aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396c:	d11f      	bne.n	80039ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003972:	e01c      	b.n	80039ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d903      	bls.n	8003982 <DMA_CheckFifoParam+0xb6>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003980:	e018      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      break;
 8003986:	e015      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e00b      	b.n	80039b2 <DMA_CheckFifoParam+0xe6>
      break;
 800399a:	bf00      	nop
 800399c:	e00a      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 800399e:	bf00      	nop
 80039a0:	e008      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e006      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
    }
  } 
  
  return status; 
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e165      	b.n	8003cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 8154 	bne.w	8003ca6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d005      	beq.n	8003a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d130      	bne.n	8003a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d017      	beq.n	8003ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d123      	bne.n	8003b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80ae 	beq.w	8003ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4a5c      	ldr	r2, [pc, #368]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5a:	4b5a      	ldr	r3, [pc, #360]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b66:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_GPIO_Init+0x304>)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_Init+0x308>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d025      	beq.n	8003bde <HAL_GPIO_Init+0x21a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01f      	beq.n	8003bda <HAL_GPIO_Init+0x216>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <HAL_GPIO_Init+0x310>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d019      	beq.n	8003bd6 <HAL_GPIO_Init+0x212>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <HAL_GPIO_Init+0x314>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_GPIO_Init+0x20e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <HAL_GPIO_Init+0x318>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00d      	beq.n	8003bce <HAL_GPIO_Init+0x20a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <HAL_GPIO_Init+0x31c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x206>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a49      	ldr	r2, [pc, #292]	; (8003ce4 <HAL_GPIO_Init+0x320>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_GPIO_Init+0x202>
 8003bc2:	2306      	movs	r3, #6
 8003bc4:	e00c      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	e00a      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bca:	2305      	movs	r3, #5
 8003bcc:	e008      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bce:	2304      	movs	r3, #4
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e004      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_GPIO_Init+0x21c>
 8003bde:	2300      	movs	r3, #0
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f002 0203 	and.w	r2, r2, #3
 8003be6:	0092      	lsls	r2, r2, #2
 8003be8:	4093      	lsls	r3, r2
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf0:	4935      	ldr	r1, [pc, #212]	; (8003cc8 <HAL_GPIO_Init+0x304>)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c22:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c28:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <HAL_GPIO_Init+0x324>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	f67f ae96 	bls.w	80039e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40013800 	.word	0x40013800
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	40020400 	.word	0x40020400
 8003cd4:	40020800 	.word	0x40020800
 8003cd8:	40020c00 	.word	0x40020c00
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40021400 	.word	0x40021400
 8003ce4:	40021800 	.word	0x40021800
 8003ce8:	40013c00 	.word	0x40013c00

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d08:	e003      	b.n	8003d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	041a      	lsls	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e12b      	b.n	8003f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fd7e 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d84:	f002 fcfa 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a81      	ldr	r2, [pc, #516]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d807      	bhi.n	8003da4 <HAL_I2C_Init+0x84>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a80      	ldr	r2, [pc, #512]	; (8003f98 <HAL_I2C_Init+0x278>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bf94      	ite	ls
 8003d9c:	2301      	movls	r3, #1
 8003d9e:	2300      	movhi	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e006      	b.n	8003db2 <HAL_I2C_Init+0x92>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a7d      	ldr	r2, [pc, #500]	; (8003f9c <HAL_I2C_Init+0x27c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bf94      	ite	ls
 8003dac:	2301      	movls	r3, #1
 8003dae:	2300      	movhi	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0e7      	b.n	8003f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a78      	ldr	r2, [pc, #480]	; (8003fa0 <HAL_I2C_Init+0x280>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	0c9b      	lsrs	r3, r3, #18
 8003dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d802      	bhi.n	8003df4 <HAL_I2C_Init+0xd4>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	e009      	b.n	8003e08 <HAL_I2C_Init+0xe8>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	4a69      	ldr	r2, [pc, #420]	; (8003fa4 <HAL_I2C_Init+0x284>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	3301      	adds	r3, #1
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	495c      	ldr	r1, [pc, #368]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d819      	bhi.n	8003e5c <HAL_I2C_Init+0x13c>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e59      	subs	r1, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e36:	1c59      	adds	r1, r3, #1
 8003e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_I2C_Init+0x138>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1e59      	subs	r1, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e56:	e051      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	e04f      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d111      	bne.n	8003e88 <HAL_I2C_Init+0x168>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e012      	b.n	8003eae <HAL_I2C_Init+0x18e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	0099      	lsls	r1, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Init+0x196>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e022      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <HAL_I2C_Init+0x1bc>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e58      	subs	r0, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	440b      	add	r3, r1
 8003ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	e00f      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1e58      	subs	r0, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	0099      	lsls	r1, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	6809      	ldr	r1, [r1, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6911      	ldr	r1, [r2, #16]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	4311      	orrs	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	000186a0 	.word	0x000186a0
 8003f98:	001e847f 	.word	0x001e847f
 8003f9c:	003d08ff 	.word	0x003d08ff
 8003fa0:	431bde83 	.word	0x431bde83
 8003fa4:	10624dd3 	.word	0x10624dd3

08003fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7fe fb39 	bl	8002638 <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	f040 80d9 	bne.w	8004188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	496d      	ldr	r1, [pc, #436]	; (8004194 <HAL_I2C_Mem_Write+0x1ec>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 fff7 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	e0cc      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2C_Mem_Write+0x56>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0c5      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2221      	movs	r2, #33	; 0x21
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a4d      	ldr	r2, [pc, #308]	; (8004198 <HAL_I2C_Mem_Write+0x1f0>)
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004066:	88f8      	ldrh	r0, [r7, #6]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	8979      	ldrh	r1, [r7, #10]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f001 fd86 	bl	8005b88 <I2C_RequestMemoryWrite>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d052      	beq.n	8004128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e081      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f002 f878 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b04      	cmp	r3, #4
 800409c:	d107      	bne.n	80040ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06b      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11b      	bne.n	8004128 <HAL_I2C_Mem_Write+0x180>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1aa      	bne.n	8004086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f002 f864 	bl	8006202 <I2C_WaitOnBTFFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2b04      	cmp	r3, #4
 8004146:	d107      	bne.n	8004158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e016      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	00100002 	.word	0x00100002
 8004198:	ffff0000 	.word	0xffff0000

0800419c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	817b      	strh	r3, [r7, #10]
 80041ae:	460b      	mov	r3, r1
 80041b0:	813b      	strh	r3, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b6:	f7fe fa3f 	bl	8002638 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 8208 	bne.w	80045da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2319      	movs	r3, #25
 80041d0:	2201      	movs	r2, #1
 80041d2:	497b      	ldr	r1, [pc, #492]	; (80043c0 <HAL_I2C_Mem_Read+0x224>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f001 fefd 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	e1fb      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x56>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e1f4      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2222      	movs	r2, #34	; 0x22
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_I2C_Mem_Read+0x228>)
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425a:	88f8      	ldrh	r0, [r7, #6]
 800425c:	893a      	ldrh	r2, [r7, #8]
 800425e:	8979      	ldrh	r1, [r7, #10]
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	4603      	mov	r3, r0
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 fd22 	bl	8005cb4 <I2C_RequestMemoryRead>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e1b0      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e184      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d11b      	bne.n	80042ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e164      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d11b      	bne.n	800432a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004300:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	e144      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004340:	e138      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	2b03      	cmp	r3, #3
 8004348:	f200 80f1 	bhi.w	800452e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b01      	cmp	r3, #1
 8004352:	d123      	bne.n	800439c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 ffc5 	bl	80062e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e139      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800439a:	e10b      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d14e      	bne.n	8004442 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	2200      	movs	r2, #0
 80043ac:	4906      	ldr	r1, [pc, #24]	; (80043c8 <HAL_I2C_Mem_Read+0x22c>)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f001 fe10 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e10e      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
 80043be:	bf00      	nop
 80043c0:	00100002 	.word	0x00100002
 80043c4:	ffff0000 	.word	0xffff0000
 80043c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004440:	e0b8      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2200      	movs	r2, #0
 800444a:	4966      	ldr	r1, [pc, #408]	; (80045e4 <HAL_I2C_Mem_Read+0x448>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 fdc1 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0bf      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	2200      	movs	r2, #0
 80044a6:	494f      	ldr	r1, [pc, #316]	; (80045e4 <HAL_I2C_Mem_Read+0x448>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f001 fd93 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e091      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800452c:	e042      	b.n	80045b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f001 fed8 	bl	80062e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e04c      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d118      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f aec2 	bne.w	8004342 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	00010004 	.word	0x00010004

080045e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004608:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b10      	cmp	r3, #16
 8004616:	d003      	beq.n	8004620 <HAL_I2C_EV_IRQHandler+0x38>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	f040 80c1 	bne.w	80047a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_I2C_EV_IRQHandler+0x6e>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004640:	d003      	beq.n	800464a <HAL_I2C_EV_IRQHandler+0x62>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004648:	d101      	bne.n	800464e <HAL_I2C_EV_IRQHandler+0x66>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_I2C_EV_IRQHandler+0x68>
 800464e:	2300      	movs	r3, #0
 8004650:	2b01      	cmp	r3, #1
 8004652:	f000 8132 	beq.w	80048ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00c      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x92>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	0a5b      	lsrs	r3, r3, #9
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d006      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 fec0 	bl	80063f2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fcdc 	bl	8005030 <I2C_Master_SB>
 8004678:	e092      	b.n	80047a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0xb2>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	0a5b      	lsrs	r3, r3, #9
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fd52 	bl	800513c <I2C_Master_ADD10>
 8004698:	e082      	b.n	80047a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0xd2>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fd6c 	bl	8005190 <I2C_Master_ADDR>
 80046b8:	e072      	b.n	80047a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d03b      	beq.n	800473e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d4:	f000 80f3 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	09db      	lsrs	r3, r3, #7
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00f      	beq.n	8004704 <HAL_I2C_EV_IRQHandler+0x11c>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_I2C_EV_IRQHandler+0x11c>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f94c 	bl	800499a <I2C_MasterTransmit_TXE>
 8004702:	e04d      	b.n	80047a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80d6 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80cf 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004720:	7bbb      	ldrb	r3, [r7, #14]
 8004722:	2b21      	cmp	r3, #33	; 0x21
 8004724:	d103      	bne.n	800472e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9d3 	bl	8004ad2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472c:	e0c7      	b.n	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	f040 80c4 	bne.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa41 	bl	8004bbe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473c:	e0bf      	b.n	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474c:	f000 80b7 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x194>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x194>
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fab6 	bl	8004ce6 <I2C_MasterReceive_RXNE>
 800477a:	e011      	b.n	80047a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 809a 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8093 	beq.w	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb5f 	bl	8004e5c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800479e:	e08e      	b.n	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
 80047a0:	e08d      	b.n	80048be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e007      	b.n	80047c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	0a5b      	lsrs	r3, r3, #9
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047ec:	69b9      	ldr	r1, [r7, #24]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 ff1d 	bl	800562e <I2C_Slave_ADDR>
 80047f4:	e066      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x22e>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a5b      	lsrs	r3, r3, #9
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 ff58 	bl	80056c4 <I2C_Slave_STOPF>
 8004814:	e056      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004816:	7bbb      	ldrb	r3, [r7, #14]
 8004818:	2b21      	cmp	r3, #33	; 0x21
 800481a:	d002      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x23a>
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	2b29      	cmp	r3, #41	; 0x29
 8004820:	d125      	bne.n	800486e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	09db      	lsrs	r3, r3, #7
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00f      	beq.n	800484e <HAL_I2C_EV_IRQHandler+0x266>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	0a9b      	lsrs	r3, r3, #10
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_I2C_EV_IRQHandler+0x266>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d103      	bne.n	800484e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe33 	bl	80054b2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800484c:	e039      	b.n	80048c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d033      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02d      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fe60 	bl	800552c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800486c:	e029      	b.n	80048c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00f      	beq.n	800489a <HAL_I2C_EV_IRQHandler+0x2b2>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0a9b      	lsrs	r3, r3, #10
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fe6b 	bl	800556e <I2C_SlaveReceive_RXNE>
 8004898:	e014      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	0a5b      	lsrs	r3, r3, #9
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fe99 	bl	80055ea <I2C_SlaveReceive_BTF>
 80048b8:	e004      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	70fb      	strb	r3, [r7, #3]
 8004926:	4613      	mov	r3, r2
 8004928:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d150      	bne.n	8004a62 <I2C_MasterTransmit_TXE+0xc8>
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b21      	cmp	r3, #33	; 0x21
 80049c4:	d14d      	bne.n	8004a62 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d01d      	beq.n	8004a08 <I2C_MasterTransmit_TXE+0x6e>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d01a      	beq.n	8004a08 <I2C_MasterTransmit_TXE+0x6e>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d8:	d016      	beq.n	8004a08 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2211      	movs	r2, #17
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff62 	bl	80048ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a06:	e060      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a16:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d107      	bne.n	8004a52 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ff7d 	bl	800494a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a50:	e03b      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff ff35 	bl	80048ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a60:	e033      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b21      	cmp	r3, #33	; 0x21
 8004a66:	d005      	beq.n	8004a74 <I2C_MasterTransmit_TXE+0xda>
 8004a68:	7bbb      	ldrb	r3, [r7, #14]
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d12d      	bne.n	8004aca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b22      	cmp	r3, #34	; 0x22
 8004a72:	d12a      	bne.n	8004aca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d108      	bne.n	8004a90 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a8e:	e01c      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d103      	bne.n	8004aa4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f88e 	bl	8004bbe <I2C_MemoryTransmit_TXE_BTF>
}
 8004aa2:	e012      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ac8:	e7ff      	b.n	8004aca <I2C_MasterTransmit_TXE+0x130>
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b21      	cmp	r3, #33	; 0x21
 8004aea:	d164      	bne.n	8004bb6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b1a:	e04c      	b.n	8004bb6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d01d      	beq.n	8004b5e <I2C_MasterTransmit_BTF+0x8c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d01a      	beq.n	8004b5e <I2C_MasterTransmit_BTF+0x8c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b2e:	d016      	beq.n	8004b5e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2211      	movs	r2, #17
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff feb7 	bl	80048ca <HAL_I2C_MasterTxCpltCallback>
}
 8004b5c:	e02b      	b.n	8004bb6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d107      	bne.n	8004ba8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fed2 	bl	800494a <HAL_I2C_MemTxCpltCallback>
}
 8004ba6:	e006      	b.n	8004bb6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fe8a 	bl	80048ca <HAL_I2C_MasterTxCpltCallback>
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10b      	bne.n	8004bf6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	1c9a      	adds	r2, r3, #2
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004bf4:	e073      	b.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	121b      	asrs	r3, r3, #8
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c10:	e065      	b.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10b      	bne.n	8004c32 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c30:	e055      	b.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d151      	bne.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b22      	cmp	r3, #34	; 0x22
 8004c3e:	d10d      	bne.n	8004c5c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c5a:	e040      	b.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b21      	cmp	r3, #33	; 0x21
 8004c6a:	d112      	bne.n	8004c92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	781a      	ldrb	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c90:	e025      	b.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d120      	bne.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b21      	cmp	r3, #33	; 0x21
 8004ca0:	d11d      	bne.n	8004cde <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fe36 	bl	800494a <HAL_I2C_MemTxCpltCallback>
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b22      	cmp	r3, #34	; 0x22
 8004cf8:	f040 80ac 	bne.w	8004e54 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d921      	bls.n	8004d4e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	f040 808c 	bne.w	8004e54 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d4c:	e082      	b.n	8004e54 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d075      	beq.n	8004e42 <I2C_MasterReceive_RXNE+0x15c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d002      	beq.n	8004d62 <I2C_MasterReceive_RXNE+0x7c>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d16f      	bne.n	8004e42 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fa8e 	bl	8006284 <I2C_WaitOnSTOPRequestThroughIT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d142      	bne.n	8004df4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d10a      	bne.n	8004dde <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff fdc1 	bl	800495e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ddc:	e03a      	b.n	8004e54 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2212      	movs	r2, #18
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fd76 	bl	80048de <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004df2:	e02f      	b.n	8004e54 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fd99 	bl	8004972 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e40:	e008      	b.n	8004e54 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e50:	605a      	str	r2, [r3, #4]
}
 8004e52:	e7ff      	b.n	8004e54 <I2C_MasterReceive_RXNE+0x16e>
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d11b      	bne.n	8004eac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e82:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004eaa:	e0bd      	b.n	8005028 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d129      	bne.n	8004f0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d00a      	beq.n	8004ee2 <I2C_MasterReceive_BTF+0x86>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d007      	beq.n	8004ee2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f08:	e08e      	b.n	8005028 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d176      	bne.n	8005002 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d002      	beq.n	8004f20 <I2C_MasterReceive_BTF+0xc4>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d108      	bne.n	8004f32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e019      	b.n	8004f66 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d002      	beq.n	8004f3e <I2C_MasterReceive_BTF+0xe2>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d108      	bne.n	8004f50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e00a      	b.n	8004f66 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d007      	beq.n	8004f66 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fc0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d10a      	bne.n	8004fec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fcba 	bl	800495e <HAL_I2C_MemRxCpltCallback>
}
 8004fea:	e01d      	b.n	8005028 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2212      	movs	r2, #18
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fc6f 	bl	80048de <HAL_I2C_MasterRxCpltCallback>
}
 8005000:	e012      	b.n	8005028 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d117      	bne.n	8005074 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800505c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800505e:	e067      	b.n	8005130 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]
}
 8005072:	e05d      	b.n	8005130 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800507c:	d133      	bne.n	80050e6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b21      	cmp	r3, #33	; 0x21
 8005088:	d109      	bne.n	800509e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800509a:	611a      	str	r2, [r3, #16]
 800509c:	e008      	b.n	80050b0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <I2C_Master_SB+0x92>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d108      	bne.n	80050d4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d032      	beq.n	8005130 <I2C_Master_SB+0x100>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02d      	beq.n	8005130 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e2:	605a      	str	r2, [r3, #4]
}
 80050e4:	e024      	b.n	8005130 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10e      	bne.n	800510c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	11db      	asrs	r3, r3, #7
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 0306 	and.w	r3, r3, #6
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f063 030f 	orn	r3, r3, #15
 8005102:	b2da      	uxtb	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	611a      	str	r2, [r3, #16]
}
 800510a:	e011      	b.n	8005130 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d10d      	bne.n	8005130 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	b29b      	uxth	r3, r3
 800511a:	11db      	asrs	r3, r3, #7
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0306 	and.w	r3, r3, #6
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f063 030e 	orn	r3, r3, #14
 8005128:	b2da      	uxtb	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	b2da      	uxtb	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <I2C_Master_ADD10+0x26>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <I2C_Master_ADD10+0x48>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005182:	605a      	str	r2, [r3, #4]
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b091      	sub	sp, #68	; 0x44
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b22      	cmp	r3, #34	; 0x22
 80051b8:	f040 8169 	bne.w	800548e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <I2C_Master_ADDR+0x54>
 80051c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d10b      	bne.n	80051e4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	e160      	b.n	80054a6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11d      	bne.n	8005228 <I2C_Master_ADDR+0x98>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051f4:	d118      	bne.n	8005228 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	651a      	str	r2, [r3, #80]	; 0x50
 8005226:	e13e      	b.n	80054a6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d113      	bne.n	800525a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e115      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 808a 	bne.w	800537a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800526c:	d137      	bne.n	80052de <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528c:	d113      	bne.n	80052b6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	e0e7      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b6:	2300      	movs	r3, #0
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e0d3      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d02e      	beq.n	8005342 <I2C_Master_ADDR+0x1b2>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d02b      	beq.n	8005342 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	2b12      	cmp	r3, #18
 80052ee:	d102      	bne.n	80052f6 <I2C_Master_ADDR+0x166>
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d125      	bne.n	8005342 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d00e      	beq.n	800531a <I2C_Master_ADDR+0x18a>
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d00b      	beq.n	800531a <I2C_Master_ADDR+0x18a>
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	2b10      	cmp	r3, #16
 8005306:	d008      	beq.n	800531a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e007      	b.n	800532a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005328:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	e0a1      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005350:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e085      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d14d      	bne.n	8005420 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b04      	cmp	r3, #4
 8005388:	d016      	beq.n	80053b8 <I2C_Master_ADDR+0x228>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b02      	cmp	r3, #2
 800538e:	d013      	beq.n	80053b8 <I2C_Master_ADDR+0x228>
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	2b10      	cmp	r3, #16
 8005394:	d010      	beq.n	80053b8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e007      	b.n	80053c8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d117      	bne.n	8005408 <I2C_Master_ADDR+0x278>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053de:	d00b      	beq.n	80053f8 <I2C_Master_ADDR+0x268>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d008      	beq.n	80053f8 <I2C_Master_ADDR+0x268>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d005      	beq.n	80053f8 <I2C_Master_ADDR+0x268>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d002      	beq.n	80053f8 <I2C_Master_ADDR+0x268>
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d107      	bne.n	8005408 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005406:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	e032      	b.n	8005486 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800542e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543e:	d117      	bne.n	8005470 <I2C_Master_ADDR+0x2e0>
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005446:	d00b      	beq.n	8005460 <I2C_Master_ADDR+0x2d0>
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2b01      	cmp	r3, #1
 800544c:	d008      	beq.n	8005460 <I2C_Master_ADDR+0x2d0>
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	2b08      	cmp	r3, #8
 8005452:	d005      	beq.n	8005460 <I2C_Master_ADDR+0x2d0>
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	2b10      	cmp	r3, #16
 8005458:	d002      	beq.n	8005460 <I2C_Master_ADDR+0x2d0>
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	2b20      	cmp	r3, #32
 800545e:	d107      	bne.n	8005470 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800546e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800548c:	e00b      	b.n	80054a6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	e7ff      	b.n	80054a6 <I2C_Master_ADDR+0x316>
 80054a6:	bf00      	nop
 80054a8:	3744      	adds	r7, #68	; 0x44
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02b      	beq.n	8005524 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d114      	bne.n	8005524 <I2C_SlaveTransmit_TXE+0x72>
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b29      	cmp	r3, #41	; 0x29
 80054fe:	d111      	bne.n	8005524 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2228      	movs	r2, #40	; 0x28
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff f9e7 	bl	80048f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02c      	beq.n	80055e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d114      	bne.n	80055e2 <I2C_SlaveReceive_RXNE+0x74>
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b2a      	cmp	r3, #42	; 0x2a
 80055bc:	d111      	bne.n	80055e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2222      	movs	r2, #34	; 0x22
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2228      	movs	r2, #40	; 0x28
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff f992 	bl	8004906 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005648:	2b28      	cmp	r3, #40	; 0x28
 800564a:	d127      	bne.n	800569c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	81bb      	strh	r3, [r7, #12]
 800567e:	e002      	b.n	8005686 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800568e:	89ba      	ldrh	r2, [r7, #12]
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff f940 	bl	800491a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800569a:	e00e      	b.n	80056ba <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005720:	d172      	bne.n	8005808 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b22      	cmp	r3, #34	; 0x22
 8005726:	d002      	beq.n	800572e <I2C_Slave_STOPF+0x6a>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b2a      	cmp	r3, #42	; 0x2a
 800572c:	d135      	bne.n	800579a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0204 	orr.w	r2, r3, #4
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005760:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe f83e 	bl	80037e8 <HAL_DMA_GetState>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d049      	beq.n	8005806 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	4a69      	ldr	r2, [pc, #420]	; (800591c <I2C_Slave_STOPF+0x258>)
 8005778:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd fe86 	bl	8003490 <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d03d      	beq.n	8005806 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005798:	e035      	b.n	8005806 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe f808 	bl	80037e8 <HAL_DMA_GetState>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d014      	beq.n	8005808 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	4a4e      	ldr	r2, [pc, #312]	; (800591c <I2C_Slave_STOPF+0x258>)
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd fe50 	bl	8003490 <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
 8005804:	e000      	b.n	8005808 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005806:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d03e      	beq.n	8005890 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d112      	bne.n	8005846 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d112      	bne.n	800587a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f043 0204 	orr.w	r2, r3, #4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f843 	bl	8005924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800589e:	e039      	b.n	8005914 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b2a      	cmp	r3, #42	; 0x2a
 80058a4:	d109      	bne.n	80058ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2228      	movs	r2, #40	; 0x28
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff f826 	bl	8004906 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b28      	cmp	r3, #40	; 0x28
 80058c4:	d111      	bne.n	80058ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a15      	ldr	r2, [pc, #84]	; (8005920 <I2C_Slave_STOPF+0x25c>)
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff f827 	bl	8004936 <HAL_I2C_ListenCpltCallback>
}
 80058e8:	e014      	b.n	8005914 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	2b22      	cmp	r3, #34	; 0x22
 80058f0:	d002      	beq.n	80058f8 <I2C_Slave_STOPF+0x234>
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b22      	cmp	r3, #34	; 0x22
 80058f6:	d10d      	bne.n	8005914 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe fff9 	bl	8004906 <HAL_I2C_SlaveRxCpltCallback>
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08005e85 	.word	0x08005e85
 8005920:	ffff0000 	.word	0xffff0000

08005924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	2b10      	cmp	r3, #16
 8005940:	d002      	beq.n	8005948 <I2C_ITError+0x24>
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d10a      	bne.n	800595e <I2C_ITError+0x3a>
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b22      	cmp	r3, #34	; 0x22
 800594c:	d107      	bne.n	800595e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005964:	2b28      	cmp	r3, #40	; 0x28
 8005966:	d107      	bne.n	8005978 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2228      	movs	r2, #40	; 0x28
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005976:	e015      	b.n	80059a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005986:	d00a      	beq.n	800599e <I2C_ITError+0x7a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b60      	cmp	r3, #96	; 0x60
 800598c:	d007      	beq.n	800599e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b2:	d162      	bne.n	8005a7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d020      	beq.n	8005a14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	4a6a      	ldr	r2, [pc, #424]	; (8005b80 <I2C_ITError+0x25c>)
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fd fd56 	bl	8003490 <HAL_DMA_Abort_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8089 	beq.w	8005afe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4798      	blx	r3
 8005a12:	e074      	b.n	8005afe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	4a59      	ldr	r2, [pc, #356]	; (8005b80 <I2C_ITError+0x25c>)
 8005a1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fd35 	bl	8003490 <HAL_DMA_Abort_IT>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d068      	beq.n	8005afe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d10b      	bne.n	8005a52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
 8005a78:	e041      	b.n	8005afe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b60      	cmp	r3, #96	; 0x60
 8005a84:	d125      	bne.n	8005ad2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d10b      	bne.n	8005aba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fe ff5b 	bl	8004986 <HAL_I2C_AbortCpltCallback>
 8005ad0:	e015      	b.n	8005afe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d10b      	bne.n	8005af8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fe ff3a 	bl	8004972 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d113      	bne.n	8005b78 <I2C_ITError+0x254>
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b28      	cmp	r3, #40	; 0x28
 8005b54:	d110      	bne.n	8005b78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <I2C_ITError+0x260>)
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe fedf 	bl	8004936 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08005e85 	.word	0x08005e85
 8005b84:	ffff0000 	.word	0xffff0000

08005b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fa08 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d103      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e05f      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	492d      	ldr	r1, [pc, #180]	; (8005cb0 <I2C_RequestMemoryWrite+0x128>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa40 	bl	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e04c      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 faaa 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e02b      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	e021      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa84 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e005      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	00010002 	.word	0x00010002

08005cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f96a 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d103      	bne.n	8005d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0aa      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4952      	ldr	r1, [pc, #328]	; (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f9a2 	bl	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e097      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa0c 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d107      	bne.n	8005d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e076      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
 8005d9a:	e021      	b.n	8005de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f9e6 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d107      	bne.n	8005dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e050      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd6:	893b      	ldrh	r3, [r7, #8]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f9cb 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d107      	bne.n	8005e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e035      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f8d3 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d103      	bne.n	8005e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e013      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e50:	897b      	ldrh	r3, [r7, #10]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4906      	ldr	r1, [pc, #24]	; (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f90b 	bl	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	00010002 	.word	0x00010002

08005e84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e9e:	4b4b      	ldr	r3, [pc, #300]	; (8005fcc <I2C_DMAAbort+0x148>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <I2C_DMAAbort+0x14c>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a1a      	lsrs	r2, r3, #8
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00da      	lsls	r2, r3, #3
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005eca:	e00a      	b.n	8005ee2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee0:	d0ea      	beq.n	8005eb8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	2200      	movs	r2, #0
 8005ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	2200      	movs	r2, #0
 8005f00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	2200      	movs	r2, #0
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	2200      	movs	r2, #0
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b60      	cmp	r3, #96	; 0x60
 8005f52:	d10e      	bne.n	8005f72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7fe fd0b 	bl	8004986 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f70:	e027      	b.n	8005fc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f78:	2b28      	cmp	r3, #40	; 0x28
 8005f7a:	d117      	bne.n	8005fac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2228      	movs	r2, #40	; 0x28
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005faa:	e007      	b.n	8005fbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f7fe fcd8 	bl	8004972 <HAL_I2C_ErrorCallback>
}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000000 	.word	0x20000000
 8005fd0:	14f8b589 	.word	0x14f8b589

08005fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	e025      	b.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fec:	d021      	beq.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fc fb23 	bl	8002638 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d116      	bne.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e023      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10d      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x84>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	43da      	mvns	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4013      	ands	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	e00c      	b.n	8006072 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d0b6      	beq.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006090:	e051      	b.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d123      	bne.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e046      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f0:	d021      	beq.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fc faa1 	bl	8002638 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d116      	bne.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e020      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10c      	bne.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	43da      	mvns	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf14      	ite	ne
 8006152:	2301      	movne	r3, #1
 8006154:	2300      	moveq	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	e00b      	b.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	43da      	mvns	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf14      	ite	ne
 800616c:	2301      	movne	r3, #1
 800616e:	2300      	moveq	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d18d      	bne.n	8006092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618c:	e02d      	b.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f900 	bl	8006394 <I2C_IsAcknowledgeFailed>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e02d      	b.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a4:	d021      	beq.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fc fa47 	bl	8002638 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d116      	bne.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e007      	b.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b80      	cmp	r3, #128	; 0x80
 80061f6:	d1ca      	bne.n	800618e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620e:	e02d      	b.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f8bf 	bl	8006394 <I2C_IsAcknowledgeFailed>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e02d      	b.n	800627c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006226:	d021      	beq.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fc fa06 	bl	8002638 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d116      	bne.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e007      	b.n	800627c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d1ca      	bne.n	8006210 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	0a1a      	lsrs	r2, r3, #8
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f043 0220 	orr.w	r2, r3, #32
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e008      	b.n	80062d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d0:	d0e9      	beq.n	80062a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000000 	.word	0x20000000
 80062e4:	14f8b589 	.word	0x14f8b589

080062e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062f4:	e042      	b.n	800637c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b10      	cmp	r3, #16
 8006302:	d119      	bne.n	8006338 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0210 	mvn.w	r2, #16
 800630c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e029      	b.n	800638c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006338:	f7fc f97e 	bl	8002638 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d116      	bne.n	800637c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e007      	b.n	800638c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d1b5      	bne.n	80062f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063aa:	d11b      	bne.n	80063e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	f043 0204 	orr.w	r2, r3, #4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006402:	d103      	bne.n	800640c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800640a:	e007      	b.n	800641c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006414:	d102      	bne.n	800641c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2208      	movs	r2, #8
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006440:	6413      	str	r3, [r2, #64]	; 0x40
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <HAL_PWREx_EnableOverDrive+0x94>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006454:	f7fc f8f0 	bl	8002638 <HAL_GetTick>
 8006458:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800645a:	e009      	b.n	8006470 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800645c:	f7fc f8ec 	bl	8002638 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646a:	d901      	bls.n	8006470 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e01f      	b.n	80064b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006470:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d1ee      	bne.n	800645c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006484:	f7fc f8d8 	bl	8002638 <HAL_GetTick>
 8006488:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800648a:	e009      	b.n	80064a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800648c:	f7fc f8d4 	bl	8002638 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800649a:	d901      	bls.n	80064a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e007      	b.n	80064b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ac:	d1ee      	bne.n	800648c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40023800 	.word	0x40023800
 80064bc:	420e0040 	.word	0x420e0040
 80064c0:	40007000 	.word	0x40007000
 80064c4:	420e0044 	.word	0x420e0044

080064c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0cc      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b68      	ldr	r3, [pc, #416]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90c      	bls.n	8006504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b65      	ldr	r3, [pc, #404]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f2:	4b63      	ldr	r3, [pc, #396]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d001      	beq.n	8006504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0b8      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800651c:	4b59      	ldr	r3, [pc, #356]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a58      	ldr	r2, [pc, #352]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006534:	4b53      	ldr	r3, [pc, #332]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a52      	ldr	r2, [pc, #328]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800653e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006540:	4b50      	ldr	r3, [pc, #320]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	494d      	ldr	r1, [pc, #308]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d044      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d107      	bne.n	8006576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006566:	4b47      	ldr	r3, [pc, #284]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d119      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e07f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d003      	beq.n	8006586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006582:	2b03      	cmp	r3, #3
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006586:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e06f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	4b3b      	ldr	r3, [pc, #236]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e067      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 0203 	bic.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4934      	ldr	r1, [pc, #208]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b8:	f7fc f83e 	bl	8002638 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c0:	f7fc f83a 	bl	8002638 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e04f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 020c 	and.w	r2, r3, #12
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1eb      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065e8:	4b25      	ldr	r3, [pc, #148]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d20c      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b20      	ldr	r3, [pc, #128]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e032      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4916      	ldr	r1, [pc, #88]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	4313      	orrs	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	490e      	ldr	r1, [pc, #56]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800664e:	f000 f8bd 	bl	80067cc <HAL_RCC_GetSysClockFreq>
 8006652:	4602      	mov	r2, r0
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	490a      	ldr	r1, [pc, #40]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 8006660:	5ccb      	ldrb	r3, [r1, r3]
 8006662:	fa22 f303 	lsr.w	r3, r2, r3
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <HAL_RCC_ClockConfig+0x1c8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f7fb ff9e 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40023c00 	.word	0x40023c00
 8006684:	40023800 	.word	0x40023800
 8006688:	0800aef0 	.word	0x0800aef0
 800668c:	20000000 	.word	0x20000000
 8006690:	2000009c 	.word	0x2000009c

08006694 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d129      	bne.n	80066fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	4a2a      	ldr	r2, [pc, #168]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	6313      	str	r3, [r2, #48]	; 0x30
 80066b6:	4b28      	ldr	r3, [pc, #160]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80066c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c8:	2302      	movs	r3, #2
 80066ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066cc:	2303      	movs	r3, #3
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80066d8:	f107 031c 	add.w	r3, r7, #28
 80066dc:	4619      	mov	r1, r3
 80066de:	481f      	ldr	r0, [pc, #124]	; (800675c <HAL_RCC_MCOConfig+0xc8>)
 80066e0:	f7fd f970 	bl	80039c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	4919      	ldr	r1, [pc, #100]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80066f8:	e029      	b.n	800674e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	4b16      	ldr	r3, [pc, #88]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 8006704:	f043 0304 	orr.w	r3, r3, #4
 8006708:	6313      	str	r3, [r2, #48]	; 0x30
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006720:	2303      	movs	r3, #3
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	480b      	ldr	r0, [pc, #44]	; (8006760 <HAL_RCC_MCOConfig+0xcc>)
 8006734:	f7fd f946 	bl	80039c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	00d9      	lsls	r1, r3, #3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	430b      	orrs	r3, r1
 8006748:	4903      	ldr	r1, [pc, #12]	; (8006758 <HAL_RCC_MCOConfig+0xc4>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
}
 800674e:	bf00      	nop
 8006750:	3730      	adds	r7, #48	; 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800
 800675c:	40020000 	.word	0x40020000
 8006760:	40020800 	.word	0x40020800

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <HAL_RCC_GetHCLKFreq+0x14>)
 800676a:	681b      	ldr	r3, [r3, #0]
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20000000 	.word	0x20000000

0800677c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006780:	f7ff fff0 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	0a9b      	lsrs	r3, r3, #10
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	4903      	ldr	r1, [pc, #12]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006798:	4618      	mov	r0, r3
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40023800 	.word	0x40023800
 80067a0:	0800af00 	.word	0x0800af00

080067a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067a8:	f7ff ffdc 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0b5b      	lsrs	r3, r3, #13
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	4903      	ldr	r1, [pc, #12]	; (80067c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800
 80067c8:	0800af00 	.word	0x0800af00

080067cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d0:	b0ae      	sub	sp, #184	; 0xb8
 80067d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f2:	4bcb      	ldr	r3, [pc, #812]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	f200 8204 	bhi.w	8006c08 <HAL_RCC_GetSysClockFreq+0x43c>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800683d 	.word	0x0800683d
 800680c:	08006c09 	.word	0x08006c09
 8006810:	08006c09 	.word	0x08006c09
 8006814:	08006c09 	.word	0x08006c09
 8006818:	08006845 	.word	0x08006845
 800681c:	08006c09 	.word	0x08006c09
 8006820:	08006c09 	.word	0x08006c09
 8006824:	08006c09 	.word	0x08006c09
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006c09 	.word	0x08006c09
 8006830:	08006c09 	.word	0x08006c09
 8006834:	08006c09 	.word	0x08006c09
 8006838:	08006a3d 	.word	0x08006a3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800683c:	4bb9      	ldr	r3, [pc, #740]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x358>)
 800683e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006842:	e1e5      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006844:	4bb7      	ldr	r3, [pc, #732]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x358>)
 8006846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800684a:	e1e1      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800684c:	4bb4      	ldr	r3, [pc, #720]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006858:	4bb1      	ldr	r3, [pc, #708]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d071      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006864:	4bae      	ldr	r3, [pc, #696]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006870:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	f04f 0000 	mov.w	r0, #0
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	0159      	lsls	r1, r3, #5
 8006898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800689c:	0150      	lsls	r0, r2, #5
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4621      	mov	r1, r4
 80068a4:	1a51      	subs	r1, r2, r1
 80068a6:	6439      	str	r1, [r7, #64]	; 0x40
 80068a8:	4629      	mov	r1, r5
 80068aa:	eb63 0301 	sbc.w	r3, r3, r1
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80068bc:	4649      	mov	r1, r9
 80068be:	018b      	lsls	r3, r1, #6
 80068c0:	4641      	mov	r1, r8
 80068c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068c6:	4641      	mov	r1, r8
 80068c8:	018a      	lsls	r2, r1, #6
 80068ca:	4641      	mov	r1, r8
 80068cc:	1a51      	subs	r1, r2, r1
 80068ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80068d0:	4649      	mov	r1, r9
 80068d2:	eb63 0301 	sbc.w	r3, r3, r1
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80068e4:	4649      	mov	r1, r9
 80068e6:	00cb      	lsls	r3, r1, #3
 80068e8:	4641      	mov	r1, r8
 80068ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ee:	4641      	mov	r1, r8
 80068f0:	00ca      	lsls	r2, r1, #3
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	4622      	mov	r2, r4
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
 80068fe:	462b      	mov	r3, r5
 8006900:	460a      	mov	r2, r1
 8006902:	eb42 0303 	adc.w	r3, r2, r3
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006914:	4629      	mov	r1, r5
 8006916:	028b      	lsls	r3, r1, #10
 8006918:	4621      	mov	r1, r4
 800691a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800691e:	4621      	mov	r1, r4
 8006920:	028a      	lsls	r2, r1, #10
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006934:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006938:	f7fa f976 	bl	8000c28 <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4613      	mov	r3, r2
 8006942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006946:	e067      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006948:	4b75      	ldr	r3, [pc, #468]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	099b      	lsrs	r3, r3, #6
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006954:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800695c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006960:	67bb      	str	r3, [r7, #120]	; 0x78
 8006962:	2300      	movs	r3, #0
 8006964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006966:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	f04f 0000 	mov.w	r0, #0
 8006972:	f04f 0100 	mov.w	r1, #0
 8006976:	0159      	lsls	r1, r3, #5
 8006978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800697c:	0150      	lsls	r0, r2, #5
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4621      	mov	r1, r4
 8006984:	1a51      	subs	r1, r2, r1
 8006986:	62b9      	str	r1, [r7, #40]	; 0x28
 8006988:	4629      	mov	r1, r5
 800698a:	eb63 0301 	sbc.w	r3, r3, r1
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800699c:	4649      	mov	r1, r9
 800699e:	018b      	lsls	r3, r1, #6
 80069a0:	4641      	mov	r1, r8
 80069a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069a6:	4641      	mov	r1, r8
 80069a8:	018a      	lsls	r2, r1, #6
 80069aa:	4641      	mov	r1, r8
 80069ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80069b0:	4649      	mov	r1, r9
 80069b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ca:	4692      	mov	sl, r2
 80069cc:	469b      	mov	fp, r3
 80069ce:	4623      	mov	r3, r4
 80069d0:	eb1a 0303 	adds.w	r3, sl, r3
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	462b      	mov	r3, r5
 80069d8:	eb4b 0303 	adc.w	r3, fp, r3
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80069ea:	4629      	mov	r1, r5
 80069ec:	028b      	lsls	r3, r1, #10
 80069ee:	4621      	mov	r1, r4
 80069f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069f4:	4621      	mov	r1, r4
 80069f6:	028a      	lsls	r2, r1, #10
 80069f8:	4610      	mov	r0, r2
 80069fa:	4619      	mov	r1, r3
 80069fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a00:	2200      	movs	r2, #0
 8006a02:	673b      	str	r3, [r7, #112]	; 0x70
 8006a04:	677a      	str	r2, [r7, #116]	; 0x74
 8006a06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006a0a:	f7fa f90d 	bl	8000c28 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4613      	mov	r3, r2
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a18:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	3301      	adds	r3, #1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006a3a:	e0e9      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a3c:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d069      	beq.n	8006b28 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a54:	4b32      	ldr	r3, [pc, #200]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	099b      	lsrs	r3, r3, #6
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
 8006a68:	2300      	movs	r3, #0
 8006a6a:	667b      	str	r3, [r7, #100]	; 0x64
 8006a6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006a70:	4622      	mov	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	0159      	lsls	r1, r3, #5
 8006a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a82:	0150      	lsls	r0, r2, #5
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4621      	mov	r1, r4
 8006a8a:	1a51      	subs	r1, r2, r1
 8006a8c:	61b9      	str	r1, [r7, #24]
 8006a8e:	4629      	mov	r1, r5
 8006a90:	eb63 0301 	sbc.w	r3, r3, r1
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	018b      	lsls	r3, r1, #6
 8006aa6:	4651      	mov	r1, sl
 8006aa8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aac:	4651      	mov	r1, sl
 8006aae:	018a      	lsls	r2, r1, #6
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	ebb2 0801 	subs.w	r8, r2, r1
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	eb63 0901 	sbc.w	r9, r3, r1
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ac8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006acc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	eb18 0303 	adds.w	r3, r8, r3
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	462b      	mov	r3, r5
 8006ade:	eb49 0303 	adc.w	r3, r9, r3
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006af0:	4629      	mov	r1, r5
 8006af2:	028b      	lsls	r3, r1, #10
 8006af4:	4621      	mov	r1, r4
 8006af6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006afa:	4621      	mov	r1, r4
 8006afc:	028a      	lsls	r2, r1, #10
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b06:	2200      	movs	r2, #0
 8006b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006b0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b10:	f7fa f88a 	bl	8000c28 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4613      	mov	r3, r2
 8006b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b1e:	e063      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x41c>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b28:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x454>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	099b      	lsrs	r3, r3, #6
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	4611      	mov	r1, r2
 8006b34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b38:	653b      	str	r3, [r7, #80]	; 0x50
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006b42:	4642      	mov	r2, r8
 8006b44:	464b      	mov	r3, r9
 8006b46:	f04f 0000 	mov.w	r0, #0
 8006b4a:	f04f 0100 	mov.w	r1, #0
 8006b4e:	0159      	lsls	r1, r3, #5
 8006b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b54:	0150      	lsls	r0, r2, #5
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	1a51      	subs	r1, r2, r1
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	4649      	mov	r1, r9
 8006b62:	eb63 0301 	sbc.w	r3, r3, r1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006b74:	4659      	mov	r1, fp
 8006b76:	018b      	lsls	r3, r1, #6
 8006b78:	4651      	mov	r1, sl
 8006b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b7e:	4651      	mov	r1, sl
 8006b80:	018a      	lsls	r2, r1, #6
 8006b82:	4651      	mov	r1, sl
 8006b84:	1a54      	subs	r4, r2, r1
 8006b86:	4659      	mov	r1, fp
 8006b88:	eb63 0501 	sbc.w	r5, r3, r1
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	00eb      	lsls	r3, r5, #3
 8006b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9a:	00e2      	lsls	r2, r4, #3
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	4643      	mov	r3, r8
 8006ba2:	18e3      	adds	r3, r4, r3
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	eb45 0303 	adc.w	r3, r5, r3
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bba:	4629      	mov	r1, r5
 8006bbc:	028b      	lsls	r3, r1, #10
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	028a      	lsls	r2, r1, #10
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006bd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bda:	f7fa f825 	bl	8000c28 <__aeabi_uldivmod>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4613      	mov	r3, r2
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x454>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	0f1b      	lsrs	r3, r3, #28
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c06:	e003      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	37b8      	adds	r7, #184	; 0xb8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800
 8006c24:	00f42400 	.word	0x00f42400

08006c28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e28d      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8083 	beq.w	8006d4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c48:	4b94      	ldr	r3, [pc, #592]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 030c 	and.w	r3, r3, #12
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d019      	beq.n	8006c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c54:	4b91      	ldr	r3, [pc, #580]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c60:	4b8e      	ldr	r3, [pc, #568]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6c:	d00c      	beq.n	8006c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6e:	4b8b      	ldr	r3, [pc, #556]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c76:	2b0c      	cmp	r3, #12
 8006c78:	d112      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c7a:	4b88      	ldr	r3, [pc, #544]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c86:	d10b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	4b84      	ldr	r3, [pc, #528]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d05b      	beq.n	8006d4c <HAL_RCC_OscConfig+0x124>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d157      	bne.n	8006d4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e25a      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x90>
 8006caa:	4b7c      	ldr	r3, [pc, #496]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7b      	ldr	r2, [pc, #492]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e01d      	b.n	8006cf4 <HAL_RCC_OscConfig+0xcc>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0xb4>
 8006cc2:	4b76      	ldr	r3, [pc, #472]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a75      	ldr	r2, [pc, #468]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b73      	ldr	r3, [pc, #460]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a72      	ldr	r2, [pc, #456]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCC_OscConfig+0xcc>
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6e      	ldr	r2, [pc, #440]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b6c      	ldr	r3, [pc, #432]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6b      	ldr	r2, [pc, #428]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fb fc9c 	bl	8002638 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fb fc98 	bl	8002638 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2bc8      	cmp	r3, #200	; 0xc8
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e21f      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d16:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0xdc>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fb fc88 	bl	8002638 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fb fc84 	bl	8002638 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2bc8      	cmp	r3, #200	; 0xc8
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e20b      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d3e:	4b57      	ldr	r3, [pc, #348]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x104>
 8006d4a:	e000      	b.n	8006d4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06f      	beq.n	8006e3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d5a:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d66:	4b4d      	ldr	r3, [pc, #308]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d105      	bne.n	8006d7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d72:	4b4a      	ldr	r3, [pc, #296]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d7e:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d11c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d8a:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d116      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	4b41      	ldr	r3, [pc, #260]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_RCC_OscConfig+0x186>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e1d3      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dae:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4937      	ldr	r1, [pc, #220]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dc2:	e03a      	b.n	8006e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dcc:	4b34      	ldr	r3, [pc, #208]	; (8006ea0 <HAL_RCC_OscConfig+0x278>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fb fc31 	bl	8002638 <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dda:	f7fb fc2d 	bl	8002638 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e1b4      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0f0      	beq.n	8006dda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df8:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4925      	ldr	r1, [pc, #148]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]
 8006e0c:	e015      	b.n	8006e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e0e:	4b24      	ldr	r3, [pc, #144]	; (8006ea0 <HAL_RCC_OscConfig+0x278>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fb fc10 	bl	8002638 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e1c:	f7fb fc0c 	bl	8002638 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e193      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2e:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d036      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <HAL_RCC_OscConfig+0x27c>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e54:	f7fb fbf0 	bl	8002638 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5c:	f7fb fbec 	bl	8002638 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e173      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_RCC_OscConfig+0x274>)
 8006e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x234>
 8006e7a:	e01b      	b.n	8006eb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCC_OscConfig+0x27c>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e82:	f7fb fbd9 	bl	8002638 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e88:	e00e      	b.n	8006ea8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e8a:	f7fb fbd5 	bl	8002638 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d907      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e15c      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	42470000 	.word	0x42470000
 8006ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	4b8a      	ldr	r3, [pc, #552]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ea      	bne.n	8006e8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8097 	beq.w	8006ff0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec6:	4b83      	ldr	r3, [pc, #524]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10f      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	4b7f      	ldr	r3, [pc, #508]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	4a7e      	ldr	r2, [pc, #504]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ee2:	4b7c      	ldr	r3, [pc, #496]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef2:	4b79      	ldr	r3, [pc, #484]	; (80070d8 <HAL_RCC_OscConfig+0x4b0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d118      	bne.n	8006f30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006efe:	4b76      	ldr	r3, [pc, #472]	; (80070d8 <HAL_RCC_OscConfig+0x4b0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a75      	ldr	r2, [pc, #468]	; (80070d8 <HAL_RCC_OscConfig+0x4b0>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f0a:	f7fb fb95 	bl	8002638 <HAL_GetTick>
 8006f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f12:	f7fb fb91 	bl	8002638 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e118      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f24:	4b6c      	ldr	r3, [pc, #432]	; (80070d8 <HAL_RCC_OscConfig+0x4b0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d106      	bne.n	8006f46 <HAL_RCC_OscConfig+0x31e>
 8006f38:	4b66      	ldr	r3, [pc, #408]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	4a65      	ldr	r2, [pc, #404]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	6713      	str	r3, [r2, #112]	; 0x70
 8006f44:	e01c      	b.n	8006f80 <HAL_RCC_OscConfig+0x358>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x340>
 8006f4e:	4b61      	ldr	r3, [pc, #388]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	4a60      	ldr	r2, [pc, #384]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f54:	f043 0304 	orr.w	r3, r3, #4
 8006f58:	6713      	str	r3, [r2, #112]	; 0x70
 8006f5a:	4b5e      	ldr	r3, [pc, #376]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5e:	4a5d      	ldr	r2, [pc, #372]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6713      	str	r3, [r2, #112]	; 0x70
 8006f66:	e00b      	b.n	8006f80 <HAL_RCC_OscConfig+0x358>
 8006f68:	4b5a      	ldr	r3, [pc, #360]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6c:	4a59      	ldr	r2, [pc, #356]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6713      	str	r3, [r2, #112]	; 0x70
 8006f74:	4b57      	ldr	r3, [pc, #348]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a56      	ldr	r2, [pc, #344]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006f7a:	f023 0304 	bic.w	r3, r3, #4
 8006f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d015      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f88:	f7fb fb56 	bl	8002638 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7fb fb52 	bl	8002638 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e0d7      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa6:	4b4b      	ldr	r3, [pc, #300]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0ee      	beq.n	8006f90 <HAL_RCC_OscConfig+0x368>
 8006fb2:	e014      	b.n	8006fde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb4:	f7fb fb40 	bl	8002638 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fba:	e00a      	b.n	8006fd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fbc:	f7fb fb3c 	bl	8002638 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0c1      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fd2:	4b40      	ldr	r3, [pc, #256]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1ee      	bne.n	8006fbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d105      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe4:	4b3b      	ldr	r3, [pc, #236]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	4a3a      	ldr	r2, [pc, #232]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80ad 	beq.w	8007154 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ffa:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b08      	cmp	r3, #8
 8007004:	d060      	beq.n	80070c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d145      	bne.n	800709a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700e:	4b33      	ldr	r3, [pc, #204]	; (80070dc <HAL_RCC_OscConfig+0x4b4>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007014:	f7fb fb10 	bl	8002638 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800701c:	f7fb fb0c 	bl	8002638 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e093      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800702e:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f0      	bne.n	800701c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	3b01      	subs	r3, #1
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	071b      	lsls	r3, r3, #28
 8007066:	491b      	ldr	r1, [pc, #108]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 8007068:	4313      	orrs	r3, r2
 800706a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x4b4>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007072:	f7fb fae1 	bl	8002638 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707a:	f7fb fadd 	bl	8002638 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e064      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <HAL_RCC_OscConfig+0x452>
 8007098:	e05c      	b.n	8007154 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800709a:	4b10      	ldr	r3, [pc, #64]	; (80070dc <HAL_RCC_OscConfig+0x4b4>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fb faca 	bl	8002638 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fb fac6 	bl	8002638 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e04d      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_RCC_OscConfig+0x4ac>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x480>
 80070c6:	e045      	b.n	8007154 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e040      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40007000 	.word	0x40007000
 80070dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070e0:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_RCC_OscConfig+0x538>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d030      	beq.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d129      	bne.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	429a      	cmp	r2, r3
 8007108:	d122      	bne.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007118:	4293      	cmp	r3, r2
 800711a:	d119      	bne.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	3b01      	subs	r3, #1
 800712a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d10f      	bne.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d107      	bne.n	8007150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e000      	b.n	8007156 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40023800 	.word	0x40023800

08007164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e07b      	b.n	800726e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d108      	bne.n	8007190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007186:	d009      	beq.n	800719c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	61da      	str	r2, [r3, #28]
 800718e:	e005      	b.n	800719c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fa fbc8 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007220:	ea42 0103 	orr.w	r1, r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	f003 0104 	and.w	r1, r3, #4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	f003 0210 	and.w	r2, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e041      	b.n	800730c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fa fb9d 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f000 fa9f 	bl	80077f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	d001      	beq.n	800732c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e04e      	b.n	80073ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a23      	ldr	r2, [pc, #140]	; (80073d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d022      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d01d      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <HAL_TIM_Base_Start_IT+0xc8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d013      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1b      	ldr	r2, [pc, #108]	; (80073e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <HAL_TIM_Base_Start_IT+0xd8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x80>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d111      	bne.n	80073b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d010      	beq.n	80073c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e007      	b.n	80073c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40010400 	.word	0x40010400
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40001800 	.word	0x40001800

080073f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d122      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d11b      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0202 	mvn.w	r2, #2
 8007420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9bf 	bl	80077ba <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9b1 	bl	80077a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f9c2 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d122      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d11b      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0204 	mvn.w	r2, #4
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f995 	bl	80077ba <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f987 	bl	80077a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f998 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d122      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d11b      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0208 	mvn.w	r2, #8
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f96b 	bl	80077ba <HAL_TIM_IC_CaptureCallback>
 80074e4:	e005      	b.n	80074f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f95d 	bl	80077a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f96e 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d122      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b10      	cmp	r3, #16
 8007512:	d11b      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0210 	mvn.w	r2, #16
 800751c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2208      	movs	r2, #8
 8007522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f941 	bl	80077ba <HAL_TIM_IC_CaptureCallback>
 8007538:	e005      	b.n	8007546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f933 	bl	80077a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f944 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10e      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0201 	mvn.w	r2, #1
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f90d 	bl	8007792 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b80      	cmp	r3, #128	; 0x80
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 faea 	bl	8007b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f909 	bl	80077e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0220 	mvn.w	r2, #32
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fab4 	bl	8007b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIM_ConfigClockSource+0x1c>
 800761c:	2302      	movs	r3, #2
 800761e:	e0b4      	b.n	800778a <HAL_TIM_ConfigClockSource+0x186>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800763e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007658:	d03e      	beq.n	80076d8 <HAL_TIM_ConfigClockSource+0xd4>
 800765a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765e:	f200 8087 	bhi.w	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007666:	f000 8086 	beq.w	8007776 <HAL_TIM_ConfigClockSource+0x172>
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d87f      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b70      	cmp	r3, #112	; 0x70
 8007672:	d01a      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0xa6>
 8007674:	2b70      	cmp	r3, #112	; 0x70
 8007676:	d87b      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b60      	cmp	r3, #96	; 0x60
 800767a:	d050      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x11a>
 800767c:	2b60      	cmp	r3, #96	; 0x60
 800767e:	d877      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b50      	cmp	r3, #80	; 0x50
 8007682:	d03c      	beq.n	80076fe <HAL_TIM_ConfigClockSource+0xfa>
 8007684:	2b50      	cmp	r3, #80	; 0x50
 8007686:	d873      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d058      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x13a>
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d86f      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b30      	cmp	r3, #48	; 0x30
 8007692:	d064      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x15a>
 8007694:	2b30      	cmp	r3, #48	; 0x30
 8007696:	d86b      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b20      	cmp	r3, #32
 800769a:	d060      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x15a>
 800769c:	2b20      	cmp	r3, #32
 800769e:	d867      	bhi.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05c      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x15a>
 80076a4:	2b10      	cmp	r3, #16
 80076a6:	d05a      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x15a>
 80076a8:	e062      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6899      	ldr	r1, [r3, #8]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f000 f9b7 	bl	8007a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	609a      	str	r2, [r3, #8]
      break;
 80076d6:	e04f      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	6899      	ldr	r1, [r3, #8]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f000 f9a0 	bl	8007a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fa:	609a      	str	r2, [r3, #8]
      break;
 80076fc:	e03c      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6859      	ldr	r1, [r3, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	461a      	mov	r2, r3
 800770c:	f000 f914 	bl	8007938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2150      	movs	r1, #80	; 0x50
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f96d 	bl	80079f6 <TIM_ITRx_SetConfig>
      break;
 800771c:	e02c      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	461a      	mov	r2, r3
 800772c:	f000 f933 	bl	8007996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2160      	movs	r1, #96	; 0x60
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f95d 	bl	80079f6 <TIM_ITRx_SetConfig>
      break;
 800773c:	e01c      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6859      	ldr	r1, [r3, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	461a      	mov	r2, r3
 800774c:	f000 f8f4 	bl	8007938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2140      	movs	r1, #64	; 0x40
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f94d 	bl	80079f6 <TIM_ITRx_SetConfig>
      break;
 800775c:	e00c      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f000 f944 	bl	80079f6 <TIM_ITRx_SetConfig>
      break;
 800776e:	e003      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
      break;
 8007774:	e000      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
	...

080077f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a40      	ldr	r2, [pc, #256]	; (800790c <TIM_Base_SetConfig+0x114>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <TIM_Base_SetConfig+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007816:	d00f      	beq.n	8007838 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3d      	ldr	r2, [pc, #244]	; (8007910 <TIM_Base_SetConfig+0x118>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a3c      	ldr	r2, [pc, #240]	; (8007914 <TIM_Base_SetConfig+0x11c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3b      	ldr	r2, [pc, #236]	; (8007918 <TIM_Base_SetConfig+0x120>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3a      	ldr	r2, [pc, #232]	; (800791c <TIM_Base_SetConfig+0x124>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d108      	bne.n	800784a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2f      	ldr	r2, [pc, #188]	; (800790c <TIM_Base_SetConfig+0x114>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02b      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007858:	d027      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2c      	ldr	r2, [pc, #176]	; (8007910 <TIM_Base_SetConfig+0x118>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d023      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2b      	ldr	r2, [pc, #172]	; (8007914 <TIM_Base_SetConfig+0x11c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01f      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <TIM_Base_SetConfig+0x120>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01b      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a29      	ldr	r2, [pc, #164]	; (800791c <TIM_Base_SetConfig+0x124>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d017      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a28      	ldr	r2, [pc, #160]	; (8007920 <TIM_Base_SetConfig+0x128>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a27      	ldr	r2, [pc, #156]	; (8007924 <TIM_Base_SetConfig+0x12c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a26      	ldr	r2, [pc, #152]	; (8007928 <TIM_Base_SetConfig+0x130>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a25      	ldr	r2, [pc, #148]	; (800792c <TIM_Base_SetConfig+0x134>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a24      	ldr	r2, [pc, #144]	; (8007930 <TIM_Base_SetConfig+0x138>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a23      	ldr	r2, [pc, #140]	; (8007934 <TIM_Base_SetConfig+0x13c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d108      	bne.n	80078bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <TIM_Base_SetConfig+0x114>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_Base_SetConfig+0xf8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a0c      	ldr	r2, [pc, #48]	; (800791c <TIM_Base_SetConfig+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d103      	bne.n	80078f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	615a      	str	r2, [r3, #20]
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40010000 	.word	0x40010000
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	40010400 	.word	0x40010400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800
 800792c:	40001800 	.word	0x40001800
 8007930:	40001c00 	.word	0x40001c00
 8007934:	40002000 	.word	0x40002000

08007938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0201 	bic.w	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f023 030a 	bic.w	r3, r3, #10
 8007974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007996:	b480      	push	{r7}
 8007998:	b087      	sub	sp, #28
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f023 0210 	bic.w	r2, r3, #16
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	031b      	lsls	r3, r3, #12
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b085      	sub	sp, #20
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f043 0307 	orr.w	r3, r3, #7
 8007a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	609a      	str	r2, [r3, #8]
}
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	021a      	lsls	r2, r3, #8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	609a      	str	r2, [r3, #8]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e05a      	b.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a21      	ldr	r2, [pc, #132]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	d01d      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d018      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d10c      	bne.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40000c00 	.word	0x40000c00
 8007b58:	40010400 	.word	0x40010400
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	40001800 	.word	0x40001800

08007b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e03f      	b.n	8007c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7f9 ff3a 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2224      	movs	r2, #36	; 0x24
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f829 	bl	8007c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b0c0      	sub	sp, #256	; 0x100
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	68d9      	ldr	r1, [r3, #12]
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	ea40 0301 	orr.w	r3, r0, r1
 8007c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c80:	f021 010c 	bic.w	r1, r1, #12
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca2:	6999      	ldr	r1, [r3, #24]
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	ea40 0301 	orr.w	r3, r0, r1
 8007cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b8f      	ldr	r3, [pc, #572]	; (8007ef4 <UART_SetConfig+0x2cc>)
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d005      	beq.n	8007cc8 <UART_SetConfig+0xa0>
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b8d      	ldr	r3, [pc, #564]	; (8007ef8 <UART_SetConfig+0x2d0>)
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d104      	bne.n	8007cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cc8:	f7fe fd6c 	bl	80067a4 <HAL_RCC_GetPCLK2Freq>
 8007ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cd0:	e003      	b.n	8007cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd2:	f7fe fd53 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8007cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce4:	f040 810c 	bne.w	8007f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	1891      	adds	r1, r2, r2
 8007d00:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d02:	415b      	adcs	r3, r3
 8007d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	eb12 0801 	adds.w	r8, r2, r1
 8007d10:	4629      	mov	r1, r5
 8007d12:	eb43 0901 	adc.w	r9, r3, r1
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d2a:	4690      	mov	r8, r2
 8007d2c:	4699      	mov	r9, r3
 8007d2e:	4623      	mov	r3, r4
 8007d30:	eb18 0303 	adds.w	r3, r8, r3
 8007d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d38:	462b      	mov	r3, r5
 8007d3a:	eb49 0303 	adc.w	r3, r9, r3
 8007d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d56:	460b      	mov	r3, r1
 8007d58:	18db      	adds	r3, r3, r3
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	eb42 0303 	adc.w	r3, r2, r3
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
 8007d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d6c:	f7f8 ff5c 	bl	8000c28 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b61      	ldr	r3, [pc, #388]	; (8007efc <UART_SetConfig+0x2d4>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	011c      	lsls	r4, r3, #4
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007da0:	4641      	mov	r1, r8
 8007da2:	eb12 0a01 	adds.w	sl, r2, r1
 8007da6:	4649      	mov	r1, r9
 8007da8:	eb43 0b01 	adc.w	fp, r3, r1
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc0:	4692      	mov	sl, r2
 8007dc2:	469b      	mov	fp, r3
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8007dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8007dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dec:	460b      	mov	r3, r1
 8007dee:	18db      	adds	r3, r3, r3
 8007df0:	643b      	str	r3, [r7, #64]	; 0x40
 8007df2:	4613      	mov	r3, r2
 8007df4:	eb42 0303 	adc.w	r3, r2, r3
 8007df8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e02:	f7f8 ff11 	bl	8000c28 <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <UART_SetConfig+0x2d4>)
 8007e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	2264      	movs	r2, #100	; 0x64
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	1acb      	subs	r3, r1, r3
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <UART_SetConfig+0x2d4>)
 8007e24:	fba3 2302 	umull	r2, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e30:	441c      	add	r4, r3
 8007e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	1891      	adds	r1, r2, r2
 8007e4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e4c:	415b      	adcs	r3, r3
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e54:	4641      	mov	r1, r8
 8007e56:	1851      	adds	r1, r2, r1
 8007e58:	6339      	str	r1, [r7, #48]	; 0x30
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	414b      	adcs	r3, r1
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	f04f 0300 	mov.w	r3, #0
 8007e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	00cb      	lsls	r3, r1, #3
 8007e70:	4651      	mov	r1, sl
 8007e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e76:	4651      	mov	r1, sl
 8007e78:	00ca      	lsls	r2, r1, #3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4642      	mov	r2, r8
 8007e82:	189b      	adds	r3, r3, r2
 8007e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e88:	464b      	mov	r3, r9
 8007e8a:	460a      	mov	r2, r1
 8007e8c:	eb42 0303 	adc.w	r3, r2, r3
 8007e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	18db      	adds	r3, r3, r3
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eae:	4613      	mov	r3, r2
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ebe:	f7f8 feb3 	bl	8000c28 <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <UART_SetConfig+0x2d4>)
 8007ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	2164      	movs	r1, #100	; 0x64
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	3332      	adds	r3, #50	; 0x32
 8007eda:	4a08      	ldr	r2, [pc, #32]	; (8007efc <UART_SetConfig+0x2d4>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	f003 0207 	and.w	r2, r3, #7
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4422      	add	r2, r4
 8007eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ef0:	e105      	b.n	80080fe <UART_SetConfig+0x4d6>
 8007ef2:	bf00      	nop
 8007ef4:	40011000 	.word	0x40011000
 8007ef8:	40011400 	.word	0x40011400
 8007efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	1891      	adds	r1, r2, r2
 8007f18:	6239      	str	r1, [r7, #32]
 8007f1a:	415b      	adcs	r3, r3
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f22:	4641      	mov	r1, r8
 8007f24:	1854      	adds	r4, r2, r1
 8007f26:	4649      	mov	r1, r9
 8007f28:	eb43 0501 	adc.w	r5, r3, r1
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	00eb      	lsls	r3, r5, #3
 8007f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f3a:	00e2      	lsls	r2, r4, #3
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	461d      	mov	r5, r3
 8007f40:	4643      	mov	r3, r8
 8007f42:	18e3      	adds	r3, r4, r3
 8007f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f48:	464b      	mov	r3, r9
 8007f4a:	eb45 0303 	adc.w	r3, r5, r3
 8007f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f6e:	4629      	mov	r1, r5
 8007f70:	008b      	lsls	r3, r1, #2
 8007f72:	4621      	mov	r1, r4
 8007f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f78:	4621      	mov	r1, r4
 8007f7a:	008a      	lsls	r2, r1, #2
 8007f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f80:	f7f8 fe52 	bl	8000c28 <__aeabi_uldivmod>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4b60      	ldr	r3, [pc, #384]	; (800810c <UART_SetConfig+0x4e4>)
 8007f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f8e:	095b      	lsrs	r3, r3, #5
 8007f90:	011c      	lsls	r4, r3, #4
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	1891      	adds	r1, r2, r2
 8007faa:	61b9      	str	r1, [r7, #24]
 8007fac:	415b      	adcs	r3, r3
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	1851      	adds	r1, r2, r1
 8007fb8:	6139      	str	r1, [r7, #16]
 8007fba:	4649      	mov	r1, r9
 8007fbc:	414b      	adcs	r3, r1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fcc:	4659      	mov	r1, fp
 8007fce:	00cb      	lsls	r3, r1, #3
 8007fd0:	4651      	mov	r1, sl
 8007fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd6:	4651      	mov	r1, sl
 8007fd8:	00ca      	lsls	r2, r1, #3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe8:	464b      	mov	r3, r9
 8007fea:	460a      	mov	r2, r1
 8007fec:	eb42 0303 	adc.w	r3, r2, r3
 8007ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ffe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800800c:	4649      	mov	r1, r9
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008016:	4641      	mov	r1, r8
 8008018:	008a      	lsls	r2, r1, #2
 800801a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800801e:	f7f8 fe03 	bl	8000c28 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4b39      	ldr	r3, [pc, #228]	; (800810c <UART_SetConfig+0x4e4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	; 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	; 0x32
 800803a:	4a34      	ldr	r2, [pc, #208]	; (800810c <UART_SetConfig+0x4e4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008046:	441c      	add	r4, r3
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	673b      	str	r3, [r7, #112]	; 0x70
 8008050:	677a      	str	r2, [r7, #116]	; 0x74
 8008052:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	1891      	adds	r1, r2, r2
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	415b      	adcs	r3, r3
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008066:	4641      	mov	r1, r8
 8008068:	1851      	adds	r1, r2, r1
 800806a:	6039      	str	r1, [r7, #0]
 800806c:	4649      	mov	r1, r9
 800806e:	414b      	adcs	r3, r1
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800807e:	4659      	mov	r1, fp
 8008080:	00cb      	lsls	r3, r1, #3
 8008082:	4651      	mov	r1, sl
 8008084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008088:	4651      	mov	r1, sl
 800808a:	00ca      	lsls	r2, r1, #3
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	4603      	mov	r3, r0
 8008092:	4642      	mov	r2, r8
 8008094:	189b      	adds	r3, r3, r2
 8008096:	66bb      	str	r3, [r7, #104]	; 0x68
 8008098:	464b      	mov	r3, r9
 800809a:	460a      	mov	r2, r1
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	663b      	str	r3, [r7, #96]	; 0x60
 80080ac:	667a      	str	r2, [r7, #100]	; 0x64
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080ba:	4649      	mov	r1, r9
 80080bc:	008b      	lsls	r3, r1, #2
 80080be:	4641      	mov	r1, r8
 80080c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c4:	4641      	mov	r1, r8
 80080c6:	008a      	lsls	r2, r1, #2
 80080c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080cc:	f7f8 fdac 	bl	8000c28 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <UART_SetConfig+0x4e4>)
 80080d6:	fba3 1302 	umull	r1, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	2164      	movs	r1, #100	; 0x64
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	3332      	adds	r3, #50	; 0x32
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <UART_SetConfig+0x4e4>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4422      	add	r2, r4
 80080fc:	609a      	str	r2, [r3, #8]
}
 80080fe:	bf00      	nop
 8008100:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810a:	bf00      	nop
 800810c:	51eb851f 	.word	0x51eb851f

08008110 <audio_inport_init>:
#include "clipping.h"
#include "demiurge.h"


void audio_inport_init(audio_inport_t *handle, int position)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
    configASSERT(position > 0 && position <= DEMIURGE_NUM_AUDIOINPUTS)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd02      	ble.n	8008126 <audio_inport_init+0x16>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b04      	cmp	r3, #4
 8008124:	dd05      	ble.n	8008132 <audio_inport_init+0x22>
 8008126:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <audio_inport_init+0x40>)
 8008128:	2219      	movs	r2, #25
 800812a:	490a      	ldr	r1, [pc, #40]	; (8008154 <audio_inport_init+0x44>)
 800812c:	480a      	ldr	r0, [pc, #40]	; (8008158 <audio_inport_init+0x48>)
 800812e:	f000 fe3f 	bl	8008db0 <iprintf>
    handle->me.read_fn = audio_inport_read;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a09      	ldr	r2, [pc, #36]	; (800815c <audio_inport_init+0x4c>)
 8008136:	60da      	str	r2, [r3, #12]
    handle->me.data = handle;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	609a      	str	r2, [r3, #8]
#ifdef DEMIURGE_POST_FUNCTION
    handle->me.post_fn = clip_audio;
#endif
    handle->position = position - 1 + DEMIURGE_AUDIOINPUT_OFFSET;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	0800af10 	.word	0x0800af10
 8008154:	0800ab78 	.word	0x0800ab78
 8008158:	0800abcc 	.word	0x0800abcc
 800815c:	08008161 	.word	0x08008161

08008160 <audio_inport_read>:

float audio_inport_read(signal_t *handle, uint64_t time)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	e9c7 2300 	strd	r2, r3, [r7]
    audio_inport_t *port = (audio_inport_t *) handle->data;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	617b      	str	r3, [r7, #20]
    if (time > handle->last_calc)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817c:	4290      	cmp	r0, r2
 800817e:	eb71 0303 	sbcs.w	r3, r1, r3
 8008182:	d210      	bcs.n	80081a6 <audio_inport_read+0x46>
    {
        handle->last_calc = time;
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        float result = inputs[port->position];
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <audio_inport_read+0x5c>)
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	613b      	str	r3, [r7, #16]
#ifdef DEMIURGE_POST_FUNCTION
        float result = handle->post_fn(result);
#endif
        handle->cached = result;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	611a      	str	r2, [r3, #16]
        return result;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	e001      	b.n	80081aa <audio_inport_read+0x4a>
    }
    return handle->cached;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691b      	ldr	r3, [r3, #16]
}
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eeb0 0a67 	vmov.f32	s0, s15
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200004d4 	.word	0x200004d4

080081c0 <audio_outport_init>:

#include "clipping.h"
#include "demiurge.h"

void audio_outport_init(audio_outport_t *handle, int position)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
    configASSERT(position > 0 && position <= DEMIURGE_NUM_AUDIOOUTPUTS)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dd02      	ble.n	80081d6 <audio_outport_init+0x16>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	dd05      	ble.n	80081e2 <audio_outport_init+0x22>
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <audio_outport_init+0x48>)
 80081d8:	2218      	movs	r2, #24
 80081da:	490c      	ldr	r1, [pc, #48]	; (800820c <audio_outport_init+0x4c>)
 80081dc:	480c      	ldr	r0, [pc, #48]	; (8008210 <audio_outport_init+0x50>)
 80081de:	f000 fde7 	bl	8008db0 <iprintf>
    handle->me.read_fn = audio_outport_read;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <audio_outport_init+0x54>)
 80081e6:	60da      	str	r2, [r3, #12]
    handle->me.data = handle;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	609a      	str	r2, [r3, #8]
#ifdef DEMIURGE_POST_FUNCTION
    handle->me.post_fn = clip_audio;
#endif
    handle->position = position - 1 + DEMIURGE_AUDIOOUTPUT_OFFSET;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
    handle->registered = false;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	0800af24 	.word	0x0800af24
 800820c:	0800abe8 	.word	0x0800abe8
 8008210:	0800ac3c 	.word	0x0800ac3c
 8008214:	08008255 	.word	0x08008255

08008218 <audio_outport_configure_input>:

void audio_outport_configure_input(audio_outport_t *handle, signal_t *input)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
    if (!handle->registered)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008228:	f083 0301 	eor.w	r3, r3, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <audio_outport_configure_input+0x32>
    {
        handle->input = input;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	621a      	str	r2, [r3, #32]
        demiurge_registerSink(&handle->me);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3308      	adds	r3, #8
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f91f 	bl	8008480 <demiurge_registerSink>
        handle->registered = true;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <audio_outport_read>:

float audio_outport_read(signal_t *handle, uint64_t time)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	e9c7 2300 	strd	r2, r3, [r7]
    if (time > handle->last_calc)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826a:	4290      	cmp	r0, r2
 800826c:	eb71 0303 	sbcs.w	r3, r1, r3
 8008270:	d220      	bcs.n	80082b4 <audio_outport_read+0x60>
    {
        handle->last_calc = time;
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008278:	e9c1 2302 	strd	r2, r3, [r1, #8]
        audio_outport_t *port = (audio_outport_t *) handle->data;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
        signal_t *upstream = port->input;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	623b      	str	r3, [r7, #32]
        signal_fn fn = upstream->read_fn;
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	61fb      	str	r3, [r7, #28]
        float raw = fn(upstream, time);
 800828e:	69f9      	ldr	r1, [r7, #28]
 8008290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008294:	6a38      	ldr	r0, [r7, #32]
 8008296:	4788      	blx	r1
 8008298:	ed87 0a06 	vstr	s0, [r7, #24]
#ifdef DEMIURGE_POST_FUNCTION
        float result = handle->post_fn(raw);
#else
        float result = raw;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	617b      	str	r3, [r7, #20]
#endif
#ifdef DEMIURGE_DEV
        handle->extra1 = raw;
        handle->extra2 = result;
#endif
        outputs[port->position] = result;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <audio_outport_read+0x74>)
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	e001      	b.n	80082b8 <audio_outport_read+0x64>
    }
    return 0.0f;
 80082b4:	f04f 0300 	mov.w	r3, #0
}
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eeb0 0a67 	vmov.f32	s0, s15
 80082c0:	3728      	adds	r7, #40	; 0x28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	2000054c 	.word	0x2000054c

080082cc <button_init>:
#include "clipping.h"
#include "demiurge.h"


void button_init(button_t *handle, int position)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
    configASSERT(position > 0 && position <= DEMIURGE_NUM_BUTTONS)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dd02      	ble.n	80082e2 <button_init+0x16>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b04      	cmp	r3, #4
 80082e0:	dd05      	ble.n	80082ee <button_init+0x22>
 80082e2:	4b10      	ldr	r3, [pc, #64]	; (8008324 <button_init+0x58>)
 80082e4:	2219      	movs	r2, #25
 80082e6:	4910      	ldr	r1, [pc, #64]	; (8008328 <button_init+0x5c>)
 80082e8:	4810      	ldr	r0, [pc, #64]	; (800832c <button_init+0x60>)
 80082ea:	f000 fd61 	bl	8008db0 <iprintf>
    handle->me.read_fn = button_read;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a0f      	ldr	r2, [pc, #60]	; (8008330 <button_init+0x64>)
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c
    handle->me.data = handle;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef DEMIURGE_POST_FUNCTION
    handle->me.post_fn = clip_none;
#endif
    handle->input = &buttons[position - 1];
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	4a0d      	ldr	r2, [pc, #52]	; (8008334 <button_init+0x68>)
 8008300:	441a      	add	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
    handle->mode = BUTTON_MODE_PRESS;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	611a      	str	r2, [r3, #16]
    handle->debounce = 500;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008312:	605a      	str	r2, [r3, #4]
    handle->count = 500;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800831a:	609a      	str	r2, [r3, #8]
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	0800af38 	.word	0x0800af38
 8008328:	0800ac58 	.word	0x0800ac58
 800832c:	0800aca8 	.word	0x0800aca8
 8008330:	0800838f 	.word	0x0800838f
 8008334:	20000548 	.word	0x20000548

08008338 <button_configure_for_toggle>:
    handle->step = 0;
    handle->me.cached = handle->output_levels[0];  // prime the output from the start
}

void button_configure_for_toggle(button_t *handle, float first, float second)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	ed87 0a02 	vstr	s0, [r7, #8]
 8008344:	edc7 0a01 	vstr	s1, [r7, #4]
    handle->mode = BUTTON_MODE_TOGGLE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	611a      	str	r2, [r3, #16]
    handle->output_levels = calloc(2, sizeof(float));
 800834e:	2104      	movs	r1, #4
 8008350:	2002      	movs	r0, #2
 8008352:	f000 fbfd 	bl	8008b50 <calloc>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	615a      	str	r2, [r3, #20]
    handle->output_levels[0] = first;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	601a      	str	r2, [r3, #0]
    handle->output_levels[1] = second;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	3304      	adds	r3, #4
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
    handle->number_of_steps = 2;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2202      	movs	r2, #2
 8008374:	61da      	str	r2, [r3, #28]
    handle->step = 0;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	619a      	str	r2, [r3, #24]
    handle->me.cached = handle->output_levels[0];  // prime the output from the start
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <button_read>:
    handle->step = 0;
    handle->me.cached = handle->output_levels[0];  // prime the output from the start
}

float button_read(signal_t *handle, uint64_t time)
{
 800838e:	b480      	push	{r7}
 8008390:	b089      	sub	sp, #36	; 0x24
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	e9c7 2300 	strd	r2, r3, [r7]
    if (time > handle->last_calc)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80083a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a4:	4290      	cmp	r0, r2
 80083a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80083aa:	d25d      	bcs.n	8008468 <button_read+0xda>
    {
        handle->last_calc = time;
 80083ac:	68f9      	ldr	r1, [r7, #12]
 80083ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        button_t *button = (button_t *) handle->data;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	61bb      	str	r3, [r7, #24]
        bool state = *button->input;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	75fb      	strb	r3, [r7, #23]
        if( state )
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d047      	beq.n	800845a <button_read+0xcc>
        {
            if (state ^ button->last_input)   // changed happened
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	7b1b      	ldrb	r3, [r3, #12]
 80083ce:	7dfa      	ldrb	r2, [r7, #23]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d049      	beq.n	8008468 <button_read+0xda>
            {
                int debounce = button->count - 1;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	3b01      	subs	r3, #1
 80083da:	613b      	str	r3, [r7, #16]
                if (debounce == 0)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d137      	bne.n	8008452 <button_read+0xc4>
                {
                    float new_output = 0;
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]
                    switch (button->mode)
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <button_read+0x6e>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	db27      	blt.n	8008444 <button_read+0xb6>
 80083f4:	3b01      	subs	r3, #1
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d824      	bhi.n	8008444 <button_read+0xb6>
 80083fa:	e00b      	b.n	8008414 <button_read+0x86>
                    {
                        case BUTTON_MODE_PRESS:
                            new_output = state ? button->output_levels[1] : button->output_levels[0];
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <button_read+0x7c>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	e002      	b.n	8008410 <button_read+0x82>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	61fb      	str	r3, [r7, #28]
                            break;
 8008412:	e017      	b.n	8008444 <button_read+0xb6>
                        case BUTTON_MODE_TOGGLE:
                        case BUTTON_MODE_STEPS:
                            if (state)  // increase at press, not at the release.
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d013      	beq.n	8008442 <button_read+0xb4>
                            {
                                button->step = (button->step + 1) % button->number_of_steps;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	3301      	adds	r3, #1
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	69d2      	ldr	r2, [r2, #28]
 8008424:	fb93 f1f2 	sdiv	r1, r3, r2
 8008428:	fb01 f202 	mul.w	r2, r1, r2
 800842c:	1a9a      	subs	r2, r3, r2
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	619a      	str	r2, [r3, #24]
                                new_output = button->output_levels[button->step];
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	61fb      	str	r3, [r7, #28]
                            }
                            break;
 8008442:	bf00      	nop
                    }
                    handle->cached = new_output;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	611a      	str	r2, [r3, #16]
                    button->last_input = state;
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	7dfa      	ldrb	r2, [r7, #23]
 800844e:	731a      	strb	r2, [r3, #12]
 8008450:	e00a      	b.n	8008468 <button_read+0xda>
                } else
                {
                    button->count = debounce;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	609a      	str	r2, [r3, #8]
 8008458:	e006      	b.n	8008468 <button_read+0xda>
                }
            }
        }
        else
        {
            button->count = button->debounce;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	609a      	str	r2, [r3, #8]
            button->last_input = state;
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	7dfa      	ldrb	r2, [r7, #23]
 8008466:	731a      	strb	r2, [r3, #12]
        }
    }
    return handle->cached;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	ee07 3a90 	vmov	s15, r3
}
 8008470:	eeb0 0a67 	vmov.f32	s0, s15
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
	...

08008480 <demiurge_registerSink>:
static demiurge_driver_info_t *driver_info;

static volatile signal_t *sinks[DEMIURGE_MAX_SINKS];

void demiurge_registerSink(signal_t *processor)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
    configASSERT(processor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <demiurge_registerSink+0x1a>
 800848e:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <demiurge_registerSink+0x58>)
 8008490:	2227      	movs	r2, #39	; 0x27
 8008492:	4912      	ldr	r1, [pc, #72]	; (80084dc <demiurge_registerSink+0x5c>)
 8008494:	4812      	ldr	r0, [pc, #72]	; (80084e0 <demiurge_registerSink+0x60>)
 8008496:	f000 fc8b 	bl	8008db0 <iprintf>
    for (uint32_t i = 0; i < DEMIURGE_MAX_SINKS; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e013      	b.n	80084c8 <demiurge_registerSink+0x48>
    {
        if (sinks[i] == NULL)
 80084a0:	4a10      	ldr	r2, [pc, #64]	; (80084e4 <demiurge_registerSink+0x64>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <demiurge_registerSink+0x42>
        {
            sinks[i] = processor;
 80084ac:	490d      	ldr	r1, [pc, #52]	; (80084e4 <demiurge_registerSink+0x64>)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            printf("Registering Sink: %lu, %p\n", i, (void *) processor);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	68f9      	ldr	r1, [r7, #12]
 80084ba:	480b      	ldr	r0, [pc, #44]	; (80084e8 <demiurge_registerSink+0x68>)
 80084bc:	f000 fc78 	bl	8008db0 <iprintf>
            break;
 80084c0:	e006      	b.n	80084d0 <demiurge_registerSink+0x50>
    for (uint32_t i = 0; i < DEMIURGE_MAX_SINKS; i++)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b06      	cmp	r3, #6
 80084cc:	d9e8      	bls.n	80084a0 <demiurge_registerSink+0x20>
        }
    }
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	0800af44 	.word	0x0800af44
 80084dc:	0800acc4 	.word	0x0800acc4
 80084e0:	0800ad14 	.word	0x0800ad14
 80084e4:	200005b8 	.word	0x200005b8
 80084e8:	0800ad30 	.word	0x0800ad30

080084ec <demiurge_init>:
    tick_update++;
#endif
}

void demiurge_init()
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0

    octave_init();
 80084f2:	f000 f985 	bl	8008800 <octave_init>
    micros_per_tick = 1000000 / demiurge_samplerate;
 80084f6:	4b44      	ldr	r3, [pc, #272]	; (8008608 <demiurge_init+0x11c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a44      	ldr	r2, [pc, #272]	; (800860c <demiurge_init+0x120>)
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	4a43      	ldr	r2, [pc, #268]	; (8008610 <demiurge_init+0x124>)
 8008502:	6013      	str	r3, [r2, #0]
    driver_info = demiurge_driver_info();
 8008504:	f7f9 ff98 	bl	8002438 <demiurge_driver_info>
 8008508:	4603      	mov	r3, r0
 800850a:	4a42      	ldr	r2, [pc, #264]	; (8008614 <demiurge_init+0x128>)
 800850c:	6013      	str	r3, [r2, #0]
    printf("Sample rate: %ld microseconds\n", micros_per_tick);
 800850e:	4b40      	ldr	r3, [pc, #256]	; (8008610 <demiurge_init+0x124>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	4840      	ldr	r0, [pc, #256]	; (8008618 <demiurge_init+0x12c>)
 8008516:	f000 fc4b 	bl	8008db0 <iprintf>

    printf("Initializing Demiurge.\n");
 800851a:	4840      	ldr	r0, [pc, #256]	; (800861c <demiurge_init+0x130>)
 800851c:	f000 fcce 	bl	8008ebc <puts>
    printf("Driver\n  Name: %s\n", driver_info->name);
 8008520:	4b3c      	ldr	r3, [pc, #240]	; (8008614 <demiurge_init+0x128>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4619      	mov	r1, r3
 8008528:	483d      	ldr	r0, [pc, #244]	; (8008620 <demiurge_init+0x134>)
 800852a:	f000 fc41 	bl	8008db0 <iprintf>
    printf("  Inputs: %d\n", driver_info->inputs);
 800852e:	4b39      	ldr	r3, [pc, #228]	; (8008614 <demiurge_init+0x128>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	889b      	ldrh	r3, [r3, #4]
 8008534:	4619      	mov	r1, r3
 8008536:	483b      	ldr	r0, [pc, #236]	; (8008624 <demiurge_init+0x138>)
 8008538:	f000 fc3a 	bl	8008db0 <iprintf>
    printf("  Outputs: %d\n", driver_info->outputs);
 800853c:	4b35      	ldr	r3, [pc, #212]	; (8008614 <demiurge_init+0x128>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	4619      	mov	r1, r3
 8008544:	4838      	ldr	r0, [pc, #224]	; (8008628 <demiurge_init+0x13c>)
 8008546:	f000 fc33 	bl	8008db0 <iprintf>
    printf("  LEDs: %d\n", driver_info->leds);
 800854a:	4b32      	ldr	r3, [pc, #200]	; (8008614 <demiurge_init+0x128>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	899b      	ldrh	r3, [r3, #12]
 8008550:	4619      	mov	r1, r3
 8008552:	4836      	ldr	r0, [pc, #216]	; (800862c <demiurge_init+0x140>)
 8008554:	f000 fc2c 	bl	8008db0 <iprintf>
    printf("  Buttons: %d\n", driver_info->buttons);
 8008558:	4b2e      	ldr	r3, [pc, #184]	; (8008614 <demiurge_init+0x128>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	895b      	ldrh	r3, [r3, #10]
 800855e:	4619      	mov	r1, r3
 8008560:	4833      	ldr	r0, [pc, #204]	; (8008630 <demiurge_init+0x144>)
 8008562:	f000 fc25 	bl	8008db0 <iprintf>
    printf("  Potentiometers: %d\n", driver_info->potentionmeters);
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <demiurge_init+0x128>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	89db      	ldrh	r3, [r3, #14]
 800856c:	4619      	mov	r1, r3
 800856e:	4831      	ldr	r0, [pc, #196]	; (8008634 <demiurge_init+0x148>)
 8008570:	f000 fc1e 	bl	8008db0 <iprintf>
    printf("  Display: %s\n", driver_info->display ? "yes" : "no");
 8008574:	4b27      	ldr	r3, [pc, #156]	; (8008614 <demiurge_init+0x128>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	7e1b      	ldrb	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <demiurge_init+0x96>
 800857e:	4b2e      	ldr	r3, [pc, #184]	; (8008638 <demiurge_init+0x14c>)
 8008580:	e000      	b.n	8008584 <demiurge_init+0x98>
 8008582:	4b2e      	ldr	r3, [pc, #184]	; (800863c <demiurge_init+0x150>)
 8008584:	4619      	mov	r1, r3
 8008586:	482e      	ldr	r0, [pc, #184]	; (8008640 <demiurge_init+0x154>)
 8008588:	f000 fc12 	bl	8008db0 <iprintf>
    printf("  Navigation: %s\n", driver_info->button_navigation ? "yes" : "no");
 800858c:	4b21      	ldr	r3, [pc, #132]	; (8008614 <demiurge_init+0x128>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	7e5b      	ldrb	r3, [r3, #25]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <demiurge_init+0xae>
 8008596:	4b28      	ldr	r3, [pc, #160]	; (8008638 <demiurge_init+0x14c>)
 8008598:	e000      	b.n	800859c <demiurge_init+0xb0>
 800859a:	4b28      	ldr	r3, [pc, #160]	; (800863c <demiurge_init+0x150>)
 800859c:	4619      	mov	r1, r3
 800859e:	4829      	ldr	r0, [pc, #164]	; (8008644 <demiurge_init+0x158>)
 80085a0:	f000 fc06 	bl	8008db0 <iprintf>
    printf("  USB: %s\n", driver_info->usb ? "yes" : "no");
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <demiurge_init+0x128>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	7d9b      	ldrb	r3, [r3, #22]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <demiurge_init+0xc6>
 80085ae:	4b22      	ldr	r3, [pc, #136]	; (8008638 <demiurge_init+0x14c>)
 80085b0:	e000      	b.n	80085b4 <demiurge_init+0xc8>
 80085b2:	4b22      	ldr	r3, [pc, #136]	; (800863c <demiurge_init+0x150>)
 80085b4:	4619      	mov	r1, r3
 80085b6:	4824      	ldr	r0, [pc, #144]	; (8008648 <demiurge_init+0x15c>)
 80085b8:	f000 fbfa 	bl	8008db0 <iprintf>
    printf("  SDcard: %s\n", driver_info->sdcard ? "yes" : "no");
 80085bc:	4b15      	ldr	r3, [pc, #84]	; (8008614 <demiurge_init+0x128>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	7ddb      	ldrb	r3, [r3, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <demiurge_init+0xde>
 80085c6:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <demiurge_init+0x14c>)
 80085c8:	e000      	b.n	80085cc <demiurge_init+0xe0>
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <demiurge_init+0x150>)
 80085cc:	4619      	mov	r1, r3
 80085ce:	481f      	ldr	r0, [pc, #124]	; (800864c <demiurge_init+0x160>)
 80085d0:	f000 fbee 	bl	8008db0 <iprintf>
    printf("  Flash: %d MB\n", driver_info->flash);
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <demiurge_init+0x128>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	8a1b      	ldrh	r3, [r3, #16]
 80085da:	4619      	mov	r1, r3
 80085dc:	481c      	ldr	r0, [pc, #112]	; (8008650 <demiurge_init+0x164>)
 80085de:	f000 fbe7 	bl	8008db0 <iprintf>

    for (int i = 0; i < DEMIURGE_MAX_SINKS; i++)
 80085e2:	2300      	movs	r3, #0
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	e007      	b.n	80085f8 <demiurge_init+0x10c>
        sinks[i] = NULL;
 80085e8:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <demiurge_init+0x168>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2100      	movs	r1, #0
 80085ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < DEMIURGE_MAX_SINKS; i++)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3301      	adds	r3, #1
 80085f6:	607b      	str	r3, [r7, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b06      	cmp	r3, #6
 80085fc:	ddf4      	ble.n	80085e8 <demiurge_init+0xfc>

}
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200005ac 	.word	0x200005ac
 800860c:	000f4240 	.word	0x000f4240
 8008610:	200005b0 	.word	0x200005b0
 8008614:	200005b4 	.word	0x200005b4
 8008618:	0800ad68 	.word	0x0800ad68
 800861c:	0800ad88 	.word	0x0800ad88
 8008620:	0800ada0 	.word	0x0800ada0
 8008624:	0800adb4 	.word	0x0800adb4
 8008628:	0800adc4 	.word	0x0800adc4
 800862c:	0800add4 	.word	0x0800add4
 8008630:	0800ade0 	.word	0x0800ade0
 8008634:	0800adf0 	.word	0x0800adf0
 8008638:	0800ae08 	.word	0x0800ae08
 800863c:	0800ae0c 	.word	0x0800ae0c
 8008640:	0800ae10 	.word	0x0800ae10
 8008644:	0800ae20 	.word	0x0800ae20
 8008648:	0800ae34 	.word	0x0800ae34
 800864c:	0800ae40 	.word	0x0800ae40
 8008650:	0800ae50 	.word	0x0800ae50
 8008654:	200005b8 	.word	0x200005b8

08008658 <demiurge_start>:
{
    direction_gate(position, true);
}

void demiurge_start()
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
    demiurge_driver_start();
 800865c:	f7f9 fec6 	bl	80023ec <demiurge_driver_start>
    printf("Demiurge Started.\n");
 8008660:	4802      	ldr	r0, [pc, #8]	; (800866c <demiurge_start+0x14>)
 8008662:	f000 fc2b 	bl	8008ebc <puts>
}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	0800ae60 	.word	0x0800ae60

08008670 <led_init>:
#include "led.h"

#include "demiurge.h"

void led_init(led_t *handle, int position)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
    configASSERT(position > 0 && position <= DEMIURGE_NUM_LEDS)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd02      	ble.n	8008686 <led_init+0x16>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b04      	cmp	r3, #4
 8008684:	dd05      	ble.n	8008692 <led_init+0x22>
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <led_init+0x58>)
 8008688:	2217      	movs	r2, #23
 800868a:	4910      	ldr	r1, [pc, #64]	; (80086cc <led_init+0x5c>)
 800868c:	4810      	ldr	r0, [pc, #64]	; (80086d0 <led_init+0x60>)
 800868e:	f000 fb8f 	bl	8008db0 <iprintf>
    handle->me.read_fn = led_read;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a0f      	ldr	r2, [pc, #60]	; (80086d4 <led_init+0x64>)
 8008696:	60da      	str	r2, [r3, #12]
    handle->me.data = handle;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	609a      	str	r2, [r3, #8]
#ifdef DEMIURGE_POST_FUNCTION
    handle->me.post_fn = clip_none;
#endif
    handle->position = position - 1;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	1e5a      	subs	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
    handle->registered = false;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	711a      	strb	r2, [r3, #4]
    handle->input = NULL;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	621a      	str	r2, [r3, #32]
    handle->k = 5;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <led_init+0x68>)
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
    handle->m = 0;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	0800af5c 	.word	0x0800af5c
 80086cc:	0800ae88 	.word	0x0800ae88
 80086d0:	0800aed4 	.word	0x0800aed4
 80086d4:	08008769 	.word	0x08008769
 80086d8:	40a00000 	.word	0x40a00000

080086dc <led_configure_input>:

void led_configure_input(led_t *handle, signal_t *input)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
    handle->input = input;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	621a      	str	r2, [r3, #32]
    if (!handle->registered)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	791b      	ldrb	r3, [r3, #4]
 80086f0:	f083 0301 	eor.w	r3, r3, #1
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <led_configure_input+0x2e>
    {
        demiurge_registerSink(&handle->me);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3308      	adds	r3, #8
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff febe 	bl	8008480 <demiurge_registerSink>
        handle->registered = true;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	711a      	strb	r2, [r3, #4]
    }
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <led_configure_sensitivity>:

void led_configure_sensitivity(led_t *handle, float k, float m)
{
 8008712:	b480      	push	{r7}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	ed87 0a02 	vstr	s0, [r7, #8]
 800871e:	edc7 0a01 	vstr	s1, [r7, #4]
    handle->k = k;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	625a      	str	r2, [r3, #36]	; 0x24
    handle->m = k;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <led_position_in_rgb>:
        handle->registered = false;
    }
}

uint16_t led_position_in_rgb(int position, RGB rgb )
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
    return (position-1) * 3 + rgb;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	0052      	lsls	r2, r2, #1
 8008750:	4413      	add	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	b29b      	uxth	r3, r3
 8008758:	4413      	add	r3, r2
 800875a:	b29b      	uxth	r3, r3
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <led_read>:

float led_read(signal_t *handle, uint64_t time)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	e9c7 2300 	strd	r2, r3, [r7]
    if (time > handle->last_calc)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800877a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800877e:	4290      	cmp	r0, r2
 8008780:	eb71 0303 	sbcs.w	r3, r1, r3
 8008784:	d231      	bcs.n	80087ea <led_read+0x82>
    {
        handle->last_calc = time;
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        led_t *led = (led_t *) handle->data;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	61fb      	str	r3, [r7, #28]
        signal_t *upstream = led->input;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	61bb      	str	r3, [r7, #24]
        float out = upstream->read_fn(upstream, time);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	6859      	ldr	r1, [r3, #4]
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	69b8      	ldr	r0, [r7, #24]
 80087a6:	4788      	blx	r1
 80087a8:	ed87 0a05 	vstr	s0, [r7, #20]
#ifdef DEMIURGE_POST_FUNCTION
        out = handle->post_fn(out);
#endif
        set_led(led->position, (uint8_t) (out * led->k + led->m));
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80087b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80087bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80087c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ce:	edc7 7a02 	vstr	s15, [r7, #8]
 80087d2:	7a3b      	ldrb	r3, [r7, #8]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7f9 fcf3 	bl	80021c4 <set_led>
        handle->cached = out;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	611a      	str	r2, [r3, #16]
        return 0.0f;
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	e001      	b.n	80087ee <led_read+0x86>
    }
    return 0.0f;
 80087ea:	f04f 0300 	mov.w	r3, #0
}
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eeb0 0a67 	vmov.f32	s0, s15
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	0000      	movs	r0, r0
	...

08008800 <octave_init>:
 *
 * It is up to the rest of the system to keep the input voltage to this
 * function "block" within the reasonable range for the application.
 */
void octave_init()
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
    octave_step = 20.0f / OCTAVE_LOOKUP_SIZE;
 8008806:	4948      	ldr	r1, [pc, #288]	; (8008928 <octave_init+0x128>)
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	4b47      	ldr	r3, [pc, #284]	; (800892c <octave_init+0x12c>)
 800880e:	e9c1 2300 	strd	r2, r3, [r1]
    double base = 440.0f / pow(2.0, 2.75);
 8008812:	a341      	add	r3, pc, #260	; (adr r3, 8008918 <octave_init+0x118>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	e9c7 2300 	strd	r2, r3, [r7]
    double volt = -10.0f;
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	4b43      	ldr	r3, [pc, #268]	; (8008930 <octave_init+0x130>)
 8008822:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < OCTAVE_LOOKUP_SIZE; i++)
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e025      	b.n	8008878 <octave_init+0x78>
    {
        octave_freq[i] = (float) (base * pow(2.0, volt));
 800882c:	ed97 1b06 	vldr	d1, [r7, #24]
 8008830:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8008920 <octave_init+0x120>
 8008834:	f001 f9e0 	bl	8009bf8 <pow>
 8008838:	ec51 0b10 	vmov	r0, r1, d0
 800883c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008840:	f7f7 fef2 	bl	8000628 <__aeabi_dmul>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4610      	mov	r0, r2
 800884a:	4619      	mov	r1, r3
 800884c:	f7f8 f99c 	bl	8000b88 <__aeabi_d2f>
 8008850:	4602      	mov	r2, r0
 8008852:	4938      	ldr	r1, [pc, #224]	; (8008934 <octave_init+0x134>)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	601a      	str	r2, [r3, #0]
        volt = volt + octave_step;
 800885c:	4b32      	ldr	r3, [pc, #200]	; (8008928 <octave_init+0x128>)
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008866:	f7f7 fd29 	bl	80002bc <__adddf3>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < OCTAVE_LOOKUP_SIZE; i++)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	3301      	adds	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887e:	dbd5      	blt.n	800882c <octave_init+0x2c>
    }
    int pos = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	613b      	str	r3, [r7, #16]
    float semitone = semitones[pos++];
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	613a      	str	r2, [r7, #16]
 800888a:	4a2b      	ldr	r2, [pc, #172]	; (8008938 <octave_init+0x138>)
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 3952; i++)
 8008894:	2300      	movs	r3, #0
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	e035      	b.n	8008906 <octave_init+0x106>
    {
        digitized[i] = semitone;
 800889a:	4a28      	ldr	r2, [pc, #160]	; (800893c <octave_init+0x13c>)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]
        if (i > (semitones[pos] - (semitones[pos] - semitones[pos - 1]) / 2))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088b0:	4a21      	ldr	r2, [pc, #132]	; (8008938 <octave_init+0x138>)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	edd3 6a00 	vldr	s13, [r3]
 80088bc:	4a1e      	ldr	r2, [pc, #120]	; (8008938 <octave_init+0x138>)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	ed93 6a00 	vldr	s12, [r3]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <octave_init+0x138>)
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	edd3 7a00 	vldr	s15, [r3]
 80088d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80088da:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80088e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ee:	dd07      	ble.n	8008900 <octave_init+0x100>
            semitone = semitones[pos++];
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	613a      	str	r2, [r7, #16]
 80088f6:	4a10      	ldr	r2, [pc, #64]	; (8008938 <octave_init+0x138>)
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 3952; i++)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	3301      	adds	r3, #1
 8008904:	60bb      	str	r3, [r7, #8]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f5b3 6f77 	cmp.w	r3, #3952	; 0xf70
 800890c:	dbc5      	blt.n	800889a <octave_init+0x9a>
    }
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	50c2b956 	.word	0x50c2b956
 800891c:	40505a02 	.word	0x40505a02
 8008920:	00000000 	.word	0x00000000
 8008924:	40000000 	.word	0x40000000
 8008928:	200045d8 	.word	0x200045d8
 800892c:	3f740000 	.word	0x3f740000
 8008930:	c0240000 	.word	0xc0240000
 8008934:	200005d4 	.word	0x200005d4
 8008938:	200000a4 	.word	0x200000a4
 800893c:	200045e0 	.word	0x200045e0

08008940 <scale_init>:
#include "scale.h"

#include "clipping.h"

void scale_init(scale_t *handle)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
    handle->me.read_fn = scale_read;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a09      	ldr	r2, [pc, #36]	; (8008970 <scale_init+0x30>)
 800894c:	60da      	str	r2, [r3, #12]
    handle->me.data = handle;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]
#ifdef DEMIURGE_POST_FUNCTION
    handle->me.post_fn = clip_none;
#endif
    handle->scale = 1.0f;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800895a:	601a      	str	r2, [r3, #0]
    handle->scale_control = NULL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	08008999 	.word	0x08008999

08008974 <scale_configure>:

void scale_configure(scale_t *handle, signal_t *input, signal_t *control)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
    handle->input = input;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	621a      	str	r2, [r3, #32]
    handle->scale_control = control;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <scale_read>:
{
    handle->scale_control = control;
}

float scale_read(signal_t *handle, uint64_t time)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	e9c7 2300 	strd	r2, r3, [r7]
    if (time > handle->last_calc)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80089aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ae:	4290      	cmp	r0, r2
 80089b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80089b4:	d23c      	bcs.n	8008a30 <scale_read+0x98>
    {
        handle->last_calc = time;
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        scale_t *scale = (scale_t *) handle->data;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	623b      	str	r3, [r7, #32]
        float input = scale->input->read_fn(scale->input, time);
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	6859      	ldr	r1, [r3, #4]
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	6a18      	ldr	r0, [r3, #32]
 80089d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d4:	4788      	blx	r1
 80089d6:	ed87 0a07 	vstr	s0, [r7, #28]
        float new_output;

        if (scale->scale_control != NULL)
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d018      	beq.n	8008a14 <scale_read+0x7c>
        {
            signal_t *ctrl = scale->scale_control;
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	61bb      	str	r3, [r7, #24]
            float external_scale = ctrl->read_fn(ctrl, time);
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	6859      	ldr	r1, [r3, #4]
 80089ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f0:	69b8      	ldr	r0, [r7, #24]
 80089f2:	4788      	blx	r1
 80089f4:	ed87 0a05 	vstr	s0, [r7, #20]
            new_output = input * external_scale * scale->scale;
 80089f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80089fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	edd3 7a00 	vldr	s15, [r3]
 8008a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8008a12:	e008      	b.n	8008a26 <scale_read+0x8e>
        } else
        {
            new_output = input * scale->scale;
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	edd3 7a00 	vldr	s15, [r3]
 8008a1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        }
#ifdef DEMIURGE_POST_FUNCTION
        new_output = handle->post_fn(new_output);
#endif
        handle->cached = new_output;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	611a      	str	r2, [r3, #16]
        return new_output;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	e001      	b.n	8008a34 <scale_read+0x9c>
    }
    return handle->cached;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	691b      	ldr	r3, [r3, #16]
}
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eeb0 0a67 	vmov.f32	s0, s15
 8008a3c:	3728      	adds	r7, #40	; 0x28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <MX_User_Init>:
#include "demiurge.h"
#include "AwesomeAudioApparatus.Demiurge_conf.h"

void MX_User_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
    demiurge_samplerate = SAMPLERATE;
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <MX_User_Init+0x50>)
 8008a4a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008a4e:	601a      	str	r2, [r3, #0]
    demiurge_input_mode(1, TYPE_INPUT1);
 8008a50:	2100      	movs	r1, #0
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7f9 fcfa 	bl	800244c <demiurge_input_mode>
    demiurge_input_mode(2, TYPE_INPUT2);
 8008a58:	2100      	movs	r1, #0
 8008a5a:	2002      	movs	r0, #2
 8008a5c:	f7f9 fcf6 	bl	800244c <demiurge_input_mode>
    demiurge_input_mode(3, TYPE_INPUT3);
 8008a60:	2100      	movs	r1, #0
 8008a62:	2003      	movs	r0, #3
 8008a64:	f7f9 fcf2 	bl	800244c <demiurge_input_mode>
    demiurge_input_mode(4, TYPE_INPUT4);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2004      	movs	r0, #4
 8008a6c:	f7f9 fcee 	bl	800244c <demiurge_input_mode>

    demiurge_output_mode(1, TYPE_OUTPUT1);
 8008a70:	2100      	movs	r1, #0
 8008a72:	2001      	movs	r0, #1
 8008a74:	f7f9 fd38 	bl	80024e8 <demiurge_output_mode>
    demiurge_output_mode(2, TYPE_OUTPUT2);
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2002      	movs	r0, #2
 8008a7c:	f7f9 fd34 	bl	80024e8 <demiurge_output_mode>

    demiurge_driver_init();         // Initialize the hardware driver
 8008a80:	f7f9 fc8e 	bl	80023a0 <demiurge_driver_init>
    demiurge_init();                // Initialize the Demiurge platform
 8008a84:	f7ff fd32 	bl	80084ec <demiurge_init>
    setup();                        // Set up the application
 8008a88:	f000 f80c 	bl	8008aa4 <setup>
    demiurge_start();               // Start the audio processing
 8008a8c:	f7ff fde4 	bl	8008658 <demiurge_start>
}
 8008a90:	bf00      	nop
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	200005ac 	.word	0x200005ac

08008a98 <MX_User_Process>:

void MX_User_Process(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
    loop();                         // Loop application slow code.
 8008a9c:	f000 f850 	bl	8008b40 <loop>
}
 8008aa0:	bf00      	nop
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <setup>:
/* USER CODE BEGIN Functions */

/* USER CODE END Functions */

void setup()
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN setup */
	audio_inport_init(&input, 1);                   // Initialize the input port 1 as audio.
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	481a      	ldr	r0, [pc, #104]	; (8008b14 <setup+0x70>)
 8008aac:	f7ff fb30 	bl	8008110 <audio_inport_init>
    button_init(&mute, 2);                          // Initialize the second button.
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	4819      	ldr	r0, [pc, #100]	; (8008b18 <setup+0x74>)
 8008ab4:	f7ff fc0a 	bl	80082cc <button_init>
    led_init(&muted, led_position_in_rgb(2, Red )); // Initialize RED in the second led.
 8008ab8:	2100      	movs	r1, #0
 8008aba:	2002      	movs	r0, #2
 8008abc:	f7ff fe3d 	bl	800873a <led_position_in_rgb>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4815      	ldr	r0, [pc, #84]	; (8008b1c <setup+0x78>)
 8008ac6:	f7ff fdd3 	bl	8008670 <led_init>
    audio_outport_init(&out, 1);                    // Initialize the first output as audio.
 8008aca:	2101      	movs	r1, #1
 8008acc:	4814      	ldr	r0, [pc, #80]	; (8008b20 <setup+0x7c>)
 8008ace:	f7ff fb77 	bl	80081c0 <audio_outport_init>


    // To do a mute, we multiply the incoming signal with either 1.0 (not muted) or by 0.0 (muted).
    // For this we need a "scale" block.
    scale_init(&scaler);
 8008ad2:	4814      	ldr	r0, [pc, #80]	; (8008b24 <setup+0x80>)
 8008ad4:	f7ff ff34 	bl	8008940 <scale_init>

    // We want the "mute" block to be an on/off and set up the button for a toggle function. And we simply set 1.0 as
    // the initial toggle value, and 0.0 as the other value it will toggle between.
    button_configure_for_toggle(&mute, 0, 1);
 8008ad8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008adc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8008b28 <setup+0x84>
 8008ae0:	480d      	ldr	r0, [pc, #52]	; (8008b18 <setup+0x74>)
 8008ae2:	f7ff fc29 	bl	8008338 <button_configure_for_toggle>

    // Then we configure the "scaler" block to take input from the the "input" block, and is controlled
    // by the "mute" (i.e. the button) block.
    scale_configure(&scaler, &input.me, &mute.me);
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <setup+0x88>)
 8008ae8:	4911      	ldr	r1, [pc, #68]	; (8008b30 <setup+0x8c>)
 8008aea:	480e      	ldr	r0, [pc, #56]	; (8008b24 <setup+0x80>)
 8008aec:	f7ff ff42 	bl	8008974 <scale_configure>

    // Then we connect the Output port to the "scaler" block.
    audio_outport_configure_input(&out, &scaler.me);
 8008af0:	4910      	ldr	r1, [pc, #64]	; (8008b34 <setup+0x90>)
 8008af2:	480b      	ldr	r0, [pc, #44]	; (8008b20 <setup+0x7c>)
 8008af4:	f7ff fb90 	bl	8008218 <audio_outport_configure_input>

    // And we want an indication on the LED whether the mute is on or off. Lit=muted.
    led_configure_input(&muted, &mute.me);
 8008af8:	490c      	ldr	r1, [pc, #48]	; (8008b2c <setup+0x88>)
 8008afa:	4808      	ldr	r0, [pc, #32]	; (8008b1c <setup+0x78>)
 8008afc:	f7ff fdee 	bl	80086dc <led_configure_input>
    led_configure_sensitivity(&muted, -64, 64);      // 25% brightness on LED, and we need to invert it.
 8008b00:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8008b38 <setup+0x94>
 8008b04:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008b3c <setup+0x98>
 8008b08:	4804      	ldr	r0, [pc, #16]	; (8008b1c <setup+0x78>)
 8008b0a:	f7ff fe02 	bl	8008712 <led_configure_sensitivity>

/* USER CODE END setup */
}
 8008b0e:	bf00      	nop
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	200083a0 	.word	0x200083a0
 8008b18:	200083c0 	.word	0x200083c0
 8008b1c:	20008400 	.word	0x20008400
 8008b20:	20008430 	.word	0x20008430
 8008b24:	20008458 	.word	0x20008458
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	200083e8 	.word	0x200083e8
 8008b30:	200083a8 	.word	0x200083a8
 8008b34:	20008460 	.word	0x20008460
 8008b38:	42800000 	.word	0x42800000
 8008b3c:	c2800000 	.word	0xc2800000

08008b40 <loop>:

void loop()
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
/* USER CODE BEGIN loop */

/* USER CODE END loop */
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
	...

08008b50 <calloc>:
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <calloc+0xc>)
 8008b52:	460a      	mov	r2, r1
 8008b54:	4601      	mov	r1, r0
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	f000 b834 	b.w	8008bc4 <_calloc_r>
 8008b5c:	200001f8 	.word	0x200001f8

08008b60 <__errno>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	; (8008b68 <__errno+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	200001f8 	.word	0x200001f8

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1b64      	subs	r4, r4, r5
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2600      	movs	r6, #0
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4d0b      	ldr	r5, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f001 ff54 	bl	800aa2c <_init>
 8008b84:	1b64      	subs	r4, r4, r5
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2600      	movs	r6, #0
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	0800b038 	.word	0x0800b038
 8008ba8:	0800b038 	.word	0x0800b038
 8008bac:	0800b038 	.word	0x0800b038
 8008bb0:	0800b03c 	.word	0x0800b03c

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <_calloc_r>:
 8008bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bc6:	fba1 2402 	umull	r2, r4, r1, r2
 8008bca:	b94c      	cbnz	r4, 8008be0 <_calloc_r+0x1c>
 8008bcc:	4611      	mov	r1, r2
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	f000 f87a 	bl	8008cc8 <_malloc_r>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	b930      	cbnz	r0, 8008be8 <_calloc_r+0x24>
 8008bda:	4628      	mov	r0, r5
 8008bdc:	b003      	add	sp, #12
 8008bde:	bd30      	pop	{r4, r5, pc}
 8008be0:	220c      	movs	r2, #12
 8008be2:	6002      	str	r2, [r0, #0]
 8008be4:	2500      	movs	r5, #0
 8008be6:	e7f8      	b.n	8008bda <_calloc_r+0x16>
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7ff ffe3 	bl	8008bb4 <memset>
 8008bee:	e7f4      	b.n	8008bda <_calloc_r+0x16>

08008bf0 <_free_r>:
 8008bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	d044      	beq.n	8008c80 <_free_r+0x90>
 8008bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfa:	9001      	str	r0, [sp, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008c02:	bfb8      	it	lt
 8008c04:	18e4      	addlt	r4, r4, r3
 8008c06:	f000 fc51 	bl	80094ac <__malloc_lock>
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <_free_r+0x94>)
 8008c0c:	9801      	ldr	r0, [sp, #4]
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	b933      	cbnz	r3, 8008c20 <_free_r+0x30>
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	6014      	str	r4, [r2, #0]
 8008c16:	b003      	add	sp, #12
 8008c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c1c:	f000 bc4c 	b.w	80094b8 <__malloc_unlock>
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	d908      	bls.n	8008c36 <_free_r+0x46>
 8008c24:	6825      	ldr	r5, [r4, #0]
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf01      	itttt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	1949      	addeq	r1, r1, r5
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	e7ed      	b.n	8008c12 <_free_r+0x22>
 8008c36:	461a      	mov	r2, r3
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b10b      	cbz	r3, 8008c40 <_free_r+0x50>
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d9fa      	bls.n	8008c36 <_free_r+0x46>
 8008c40:	6811      	ldr	r1, [r2, #0]
 8008c42:	1855      	adds	r5, r2, r1
 8008c44:	42a5      	cmp	r5, r4
 8008c46:	d10b      	bne.n	8008c60 <_free_r+0x70>
 8008c48:	6824      	ldr	r4, [r4, #0]
 8008c4a:	4421      	add	r1, r4
 8008c4c:	1854      	adds	r4, r2, r1
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	d1e0      	bne.n	8008c16 <_free_r+0x26>
 8008c54:	681c      	ldr	r4, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	6053      	str	r3, [r2, #4]
 8008c5a:	4421      	add	r1, r4
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	e7da      	b.n	8008c16 <_free_r+0x26>
 8008c60:	d902      	bls.n	8008c68 <_free_r+0x78>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	e7d6      	b.n	8008c16 <_free_r+0x26>
 8008c68:	6825      	ldr	r5, [r4, #0]
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf04      	itt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	bf04      	itt	eq
 8008c78:	1949      	addeq	r1, r1, r5
 8008c7a:	6021      	streq	r1, [r4, #0]
 8008c7c:	6054      	str	r4, [r2, #4]
 8008c7e:	e7ca      	b.n	8008c16 <_free_r+0x26>
 8008c80:	b003      	add	sp, #12
 8008c82:	bd30      	pop	{r4, r5, pc}
 8008c84:	20008480 	.word	0x20008480

08008c88 <sbrk_aligned>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0e      	ldr	r6, [pc, #56]	; (8008cc4 <sbrk_aligned+0x3c>)
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	6831      	ldr	r1, [r6, #0]
 8008c90:	4605      	mov	r5, r0
 8008c92:	b911      	cbnz	r1, 8008c9a <sbrk_aligned+0x12>
 8008c94:	f000 f91a 	bl	8008ecc <_sbrk_r>
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f915 	bl	8008ecc <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d00a      	beq.n	8008cbc <sbrk_aligned+0x34>
 8008ca6:	1cc4      	adds	r4, r0, #3
 8008ca8:	f024 0403 	bic.w	r4, r4, #3
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d007      	beq.n	8008cc0 <sbrk_aligned+0x38>
 8008cb0:	1a21      	subs	r1, r4, r0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f90a 	bl	8008ecc <_sbrk_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d101      	bne.n	8008cc0 <sbrk_aligned+0x38>
 8008cbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	20008484 	.word	0x20008484

08008cc8 <_malloc_r>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	1ccd      	adds	r5, r1, #3
 8008cce:	f025 0503 	bic.w	r5, r5, #3
 8008cd2:	3508      	adds	r5, #8
 8008cd4:	2d0c      	cmp	r5, #12
 8008cd6:	bf38      	it	cc
 8008cd8:	250c      	movcc	r5, #12
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	4607      	mov	r7, r0
 8008cde:	db01      	blt.n	8008ce4 <_malloc_r+0x1c>
 8008ce0:	42a9      	cmp	r1, r5
 8008ce2:	d905      	bls.n	8008cf0 <_malloc_r+0x28>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	2600      	movs	r6, #0
 8008cea:	4630      	mov	r0, r6
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	4e2e      	ldr	r6, [pc, #184]	; (8008dac <_malloc_r+0xe4>)
 8008cf2:	f000 fbdb 	bl	80094ac <__malloc_lock>
 8008cf6:	6833      	ldr	r3, [r6, #0]
 8008cf8:	461c      	mov	r4, r3
 8008cfa:	bb34      	cbnz	r4, 8008d4a <_malloc_r+0x82>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ffc2 	bl	8008c88 <sbrk_aligned>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	4604      	mov	r4, r0
 8008d08:	d14d      	bne.n	8008da6 <_malloc_r+0xde>
 8008d0a:	6834      	ldr	r4, [r6, #0]
 8008d0c:	4626      	mov	r6, r4
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d140      	bne.n	8008d94 <_malloc_r+0xcc>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	4631      	mov	r1, r6
 8008d16:	4638      	mov	r0, r7
 8008d18:	eb04 0803 	add.w	r8, r4, r3
 8008d1c:	f000 f8d6 	bl	8008ecc <_sbrk_r>
 8008d20:	4580      	cmp	r8, r0
 8008d22:	d13a      	bne.n	8008d9a <_malloc_r+0xd2>
 8008d24:	6821      	ldr	r1, [r4, #0]
 8008d26:	3503      	adds	r5, #3
 8008d28:	1a6d      	subs	r5, r5, r1
 8008d2a:	f025 0503 	bic.w	r5, r5, #3
 8008d2e:	3508      	adds	r5, #8
 8008d30:	2d0c      	cmp	r5, #12
 8008d32:	bf38      	it	cc
 8008d34:	250c      	movcc	r5, #12
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ffa5 	bl	8008c88 <sbrk_aligned>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d02b      	beq.n	8008d9a <_malloc_r+0xd2>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	442b      	add	r3, r5
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	e00e      	b.n	8008d68 <_malloc_r+0xa0>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	1b52      	subs	r2, r2, r5
 8008d4e:	d41e      	bmi.n	8008d8e <_malloc_r+0xc6>
 8008d50:	2a0b      	cmp	r2, #11
 8008d52:	d916      	bls.n	8008d82 <_malloc_r+0xba>
 8008d54:	1961      	adds	r1, r4, r5
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	6025      	str	r5, [r4, #0]
 8008d5a:	bf18      	it	ne
 8008d5c:	6059      	strne	r1, [r3, #4]
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	bf08      	it	eq
 8008d62:	6031      	streq	r1, [r6, #0]
 8008d64:	5162      	str	r2, [r4, r5]
 8008d66:	604b      	str	r3, [r1, #4]
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f104 060b 	add.w	r6, r4, #11
 8008d6e:	f000 fba3 	bl	80094b8 <__malloc_unlock>
 8008d72:	f026 0607 	bic.w	r6, r6, #7
 8008d76:	1d23      	adds	r3, r4, #4
 8008d78:	1af2      	subs	r2, r6, r3
 8008d7a:	d0b6      	beq.n	8008cea <_malloc_r+0x22>
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	50a3      	str	r3, [r4, r2]
 8008d80:	e7b3      	b.n	8008cea <_malloc_r+0x22>
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	bf0c      	ite	eq
 8008d88:	6032      	streq	r2, [r6, #0]
 8008d8a:	605a      	strne	r2, [r3, #4]
 8008d8c:	e7ec      	b.n	8008d68 <_malloc_r+0xa0>
 8008d8e:	4623      	mov	r3, r4
 8008d90:	6864      	ldr	r4, [r4, #4]
 8008d92:	e7b2      	b.n	8008cfa <_malloc_r+0x32>
 8008d94:	4634      	mov	r4, r6
 8008d96:	6876      	ldr	r6, [r6, #4]
 8008d98:	e7b9      	b.n	8008d0e <_malloc_r+0x46>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	603b      	str	r3, [r7, #0]
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f000 fb8a 	bl	80094b8 <__malloc_unlock>
 8008da4:	e7a1      	b.n	8008cea <_malloc_r+0x22>
 8008da6:	6025      	str	r5, [r4, #0]
 8008da8:	e7de      	b.n	8008d68 <_malloc_r+0xa0>
 8008daa:	bf00      	nop
 8008dac:	20008480 	.word	0x20008480

08008db0 <iprintf>:
 8008db0:	b40f      	push	{r0, r1, r2, r3}
 8008db2:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <iprintf+0x2c>)
 8008db4:	b513      	push	{r0, r1, r4, lr}
 8008db6:	681c      	ldr	r4, [r3, #0]
 8008db8:	b124      	cbz	r4, 8008dc4 <iprintf+0x14>
 8008dba:	69a3      	ldr	r3, [r4, #24]
 8008dbc:	b913      	cbnz	r3, 8008dc4 <iprintf+0x14>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 fa6e 	bl	80092a0 <__sinit>
 8008dc4:	ab05      	add	r3, sp, #20
 8008dc6:	9a04      	ldr	r2, [sp, #16]
 8008dc8:	68a1      	ldr	r1, [r4, #8]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fba3 	bl	8009518 <_vfiprintf_r>
 8008dd2:	b002      	add	sp, #8
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	b004      	add	sp, #16
 8008dda:	4770      	bx	lr
 8008ddc:	200001f8 	.word	0x200001f8

08008de0 <_puts_r>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	460e      	mov	r6, r1
 8008de4:	4605      	mov	r5, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_puts_r+0x10>
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b90b      	cbnz	r3, 8008df0 <_puts_r+0x10>
 8008dec:	f000 fa58 	bl	80092a0 <__sinit>
 8008df0:	69ab      	ldr	r3, [r5, #24]
 8008df2:	68ac      	ldr	r4, [r5, #8]
 8008df4:	b913      	cbnz	r3, 8008dfc <_puts_r+0x1c>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 fa52 	bl	80092a0 <__sinit>
 8008dfc:	4b2c      	ldr	r3, [pc, #176]	; (8008eb0 <_puts_r+0xd0>)
 8008dfe:	429c      	cmp	r4, r3
 8008e00:	d120      	bne.n	8008e44 <_puts_r+0x64>
 8008e02:	686c      	ldr	r4, [r5, #4]
 8008e04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d405      	bmi.n	8008e16 <_puts_r+0x36>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	0598      	lsls	r0, r3, #22
 8008e0e:	d402      	bmi.n	8008e16 <_puts_r+0x36>
 8008e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e12:	f000 fae3 	bl	80093dc <__retarget_lock_acquire_recursive>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	0719      	lsls	r1, r3, #28
 8008e1a:	d51d      	bpl.n	8008e58 <_puts_r+0x78>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	b1db      	cbz	r3, 8008e58 <_puts_r+0x78>
 8008e20:	3e01      	subs	r6, #1
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	60a3      	str	r3, [r4, #8]
 8008e2c:	bb39      	cbnz	r1, 8008e7e <_puts_r+0x9e>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da38      	bge.n	8008ea4 <_puts_r+0xc4>
 8008e32:	4622      	mov	r2, r4
 8008e34:	210a      	movs	r1, #10
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f858 	bl	8008eec <__swbuf_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d011      	beq.n	8008e64 <_puts_r+0x84>
 8008e40:	250a      	movs	r5, #10
 8008e42:	e011      	b.n	8008e68 <_puts_r+0x88>
 8008e44:	4b1b      	ldr	r3, [pc, #108]	; (8008eb4 <_puts_r+0xd4>)
 8008e46:	429c      	cmp	r4, r3
 8008e48:	d101      	bne.n	8008e4e <_puts_r+0x6e>
 8008e4a:	68ac      	ldr	r4, [r5, #8]
 8008e4c:	e7da      	b.n	8008e04 <_puts_r+0x24>
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <_puts_r+0xd8>)
 8008e50:	429c      	cmp	r4, r3
 8008e52:	bf08      	it	eq
 8008e54:	68ec      	ldreq	r4, [r5, #12]
 8008e56:	e7d5      	b.n	8008e04 <_puts_r+0x24>
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f898 	bl	8008f90 <__swsetup_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d0dd      	beq.n	8008e20 <_puts_r+0x40>
 8008e64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e6a:	07da      	lsls	r2, r3, #31
 8008e6c:	d405      	bmi.n	8008e7a <_puts_r+0x9a>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	059b      	lsls	r3, r3, #22
 8008e72:	d402      	bmi.n	8008e7a <_puts_r+0x9a>
 8008e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e76:	f000 fab2 	bl	80093de <__retarget_lock_release_recursive>
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da04      	bge.n	8008e8c <_puts_r+0xac>
 8008e82:	69a2      	ldr	r2, [r4, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dc06      	bgt.n	8008e96 <_puts_r+0xb6>
 8008e88:	290a      	cmp	r1, #10
 8008e8a:	d004      	beq.n	8008e96 <_puts_r+0xb6>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	6022      	str	r2, [r4, #0]
 8008e92:	7019      	strb	r1, [r3, #0]
 8008e94:	e7c5      	b.n	8008e22 <_puts_r+0x42>
 8008e96:	4622      	mov	r2, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f827 	bl	8008eec <__swbuf_r>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d1bf      	bne.n	8008e22 <_puts_r+0x42>
 8008ea2:	e7df      	b.n	8008e64 <_puts_r+0x84>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	250a      	movs	r5, #10
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	701d      	strb	r5, [r3, #0]
 8008eae:	e7db      	b.n	8008e68 <_puts_r+0x88>
 8008eb0:	0800af8c 	.word	0x0800af8c
 8008eb4:	0800afac 	.word	0x0800afac
 8008eb8:	0800af6c 	.word	0x0800af6c

08008ebc <puts>:
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <puts+0xc>)
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f7ff bf8d 	b.w	8008de0 <_puts_r>
 8008ec6:	bf00      	nop
 8008ec8:	200001f8 	.word	0x200001f8

08008ecc <_sbrk_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d06      	ldr	r5, [pc, #24]	; (8008ee8 <_sbrk_r+0x1c>)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f7f8 fea6 	bl	8001c28 <_sbrk>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_sbrk_r+0x1a>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_sbrk_r+0x1a>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	2000848c 	.word	0x2000848c

08008eec <__swbuf_r>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	460e      	mov	r6, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	b118      	cbz	r0, 8008efe <__swbuf_r+0x12>
 8008ef6:	6983      	ldr	r3, [r0, #24]
 8008ef8:	b90b      	cbnz	r3, 8008efe <__swbuf_r+0x12>
 8008efa:	f000 f9d1 	bl	80092a0 <__sinit>
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <__swbuf_r+0x98>)
 8008f00:	429c      	cmp	r4, r3
 8008f02:	d12b      	bne.n	8008f5c <__swbuf_r+0x70>
 8008f04:	686c      	ldr	r4, [r5, #4]
 8008f06:	69a3      	ldr	r3, [r4, #24]
 8008f08:	60a3      	str	r3, [r4, #8]
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	071a      	lsls	r2, r3, #28
 8008f0e:	d52f      	bpl.n	8008f70 <__swbuf_r+0x84>
 8008f10:	6923      	ldr	r3, [r4, #16]
 8008f12:	b36b      	cbz	r3, 8008f70 <__swbuf_r+0x84>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	1ac0      	subs	r0, r0, r3
 8008f1a:	6963      	ldr	r3, [r4, #20]
 8008f1c:	b2f6      	uxtb	r6, r6
 8008f1e:	4283      	cmp	r3, r0
 8008f20:	4637      	mov	r7, r6
 8008f22:	dc04      	bgt.n	8008f2e <__swbuf_r+0x42>
 8008f24:	4621      	mov	r1, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f926 	bl	8009178 <_fflush_r>
 8008f2c:	bb30      	cbnz	r0, 8008f7c <__swbuf_r+0x90>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	60a3      	str	r3, [r4, #8]
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	701e      	strb	r6, [r3, #0]
 8008f3c:	6963      	ldr	r3, [r4, #20]
 8008f3e:	3001      	adds	r0, #1
 8008f40:	4283      	cmp	r3, r0
 8008f42:	d004      	beq.n	8008f4e <__swbuf_r+0x62>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	07db      	lsls	r3, r3, #31
 8008f48:	d506      	bpl.n	8008f58 <__swbuf_r+0x6c>
 8008f4a:	2e0a      	cmp	r6, #10
 8008f4c:	d104      	bne.n	8008f58 <__swbuf_r+0x6c>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 f911 	bl	8009178 <_fflush_r>
 8008f56:	b988      	cbnz	r0, 8008f7c <__swbuf_r+0x90>
 8008f58:	4638      	mov	r0, r7
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <__swbuf_r+0x9c>)
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	d101      	bne.n	8008f66 <__swbuf_r+0x7a>
 8008f62:	68ac      	ldr	r4, [r5, #8]
 8008f64:	e7cf      	b.n	8008f06 <__swbuf_r+0x1a>
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <__swbuf_r+0xa0>)
 8008f68:	429c      	cmp	r4, r3
 8008f6a:	bf08      	it	eq
 8008f6c:	68ec      	ldreq	r4, [r5, #12]
 8008f6e:	e7ca      	b.n	8008f06 <__swbuf_r+0x1a>
 8008f70:	4621      	mov	r1, r4
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f80c 	bl	8008f90 <__swsetup_r>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d0cb      	beq.n	8008f14 <__swbuf_r+0x28>
 8008f7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008f80:	e7ea      	b.n	8008f58 <__swbuf_r+0x6c>
 8008f82:	bf00      	nop
 8008f84:	0800af8c 	.word	0x0800af8c
 8008f88:	0800afac 	.word	0x0800afac
 8008f8c:	0800af6c 	.word	0x0800af6c

08008f90 <__swsetup_r>:
 8008f90:	4b32      	ldr	r3, [pc, #200]	; (800905c <__swsetup_r+0xcc>)
 8008f92:	b570      	push	{r4, r5, r6, lr}
 8008f94:	681d      	ldr	r5, [r3, #0]
 8008f96:	4606      	mov	r6, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	b125      	cbz	r5, 8008fa6 <__swsetup_r+0x16>
 8008f9c:	69ab      	ldr	r3, [r5, #24]
 8008f9e:	b913      	cbnz	r3, 8008fa6 <__swsetup_r+0x16>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 f97d 	bl	80092a0 <__sinit>
 8008fa6:	4b2e      	ldr	r3, [pc, #184]	; (8009060 <__swsetup_r+0xd0>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	d10f      	bne.n	8008fcc <__swsetup_r+0x3c>
 8008fac:	686c      	ldr	r4, [r5, #4]
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fb4:	0719      	lsls	r1, r3, #28
 8008fb6:	d42c      	bmi.n	8009012 <__swsetup_r+0x82>
 8008fb8:	06dd      	lsls	r5, r3, #27
 8008fba:	d411      	bmi.n	8008fe0 <__swsetup_r+0x50>
 8008fbc:	2309      	movs	r3, #9
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fca:	e03e      	b.n	800904a <__swsetup_r+0xba>
 8008fcc:	4b25      	ldr	r3, [pc, #148]	; (8009064 <__swsetup_r+0xd4>)
 8008fce:	429c      	cmp	r4, r3
 8008fd0:	d101      	bne.n	8008fd6 <__swsetup_r+0x46>
 8008fd2:	68ac      	ldr	r4, [r5, #8]
 8008fd4:	e7eb      	b.n	8008fae <__swsetup_r+0x1e>
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <__swsetup_r+0xd8>)
 8008fd8:	429c      	cmp	r4, r3
 8008fda:	bf08      	it	eq
 8008fdc:	68ec      	ldreq	r4, [r5, #12]
 8008fde:	e7e6      	b.n	8008fae <__swsetup_r+0x1e>
 8008fe0:	0758      	lsls	r0, r3, #29
 8008fe2:	d512      	bpl.n	800900a <__swsetup_r+0x7a>
 8008fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe6:	b141      	cbz	r1, 8008ffa <__swsetup_r+0x6a>
 8008fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d002      	beq.n	8008ff6 <__swsetup_r+0x66>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff fdfd 	bl	8008bf0 <_free_r>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	2300      	movs	r3, #0
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0308 	orr.w	r3, r3, #8
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	b94b      	cbnz	r3, 800902a <__swsetup_r+0x9a>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800901c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009020:	d003      	beq.n	800902a <__swsetup_r+0x9a>
 8009022:	4621      	mov	r1, r4
 8009024:	4630      	mov	r0, r6
 8009026:	f000 fa01 	bl	800942c <__smakebuf_r>
 800902a:	89a0      	ldrh	r0, [r4, #12]
 800902c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009030:	f010 0301 	ands.w	r3, r0, #1
 8009034:	d00a      	beq.n	800904c <__swsetup_r+0xbc>
 8009036:	2300      	movs	r3, #0
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	6963      	ldr	r3, [r4, #20]
 800903c:	425b      	negs	r3, r3
 800903e:	61a3      	str	r3, [r4, #24]
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	b943      	cbnz	r3, 8009056 <__swsetup_r+0xc6>
 8009044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009048:	d1ba      	bne.n	8008fc0 <__swsetup_r+0x30>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	0781      	lsls	r1, r0, #30
 800904e:	bf58      	it	pl
 8009050:	6963      	ldrpl	r3, [r4, #20]
 8009052:	60a3      	str	r3, [r4, #8]
 8009054:	e7f4      	b.n	8009040 <__swsetup_r+0xb0>
 8009056:	2000      	movs	r0, #0
 8009058:	e7f7      	b.n	800904a <__swsetup_r+0xba>
 800905a:	bf00      	nop
 800905c:	200001f8 	.word	0x200001f8
 8009060:	0800af8c 	.word	0x0800af8c
 8009064:	0800afac 	.word	0x0800afac
 8009068:	0800af6c 	.word	0x0800af6c

0800906c <__sflush_r>:
 800906c:	898a      	ldrh	r2, [r1, #12]
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	4605      	mov	r5, r0
 8009074:	0710      	lsls	r0, r2, #28
 8009076:	460c      	mov	r4, r1
 8009078:	d458      	bmi.n	800912c <__sflush_r+0xc0>
 800907a:	684b      	ldr	r3, [r1, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	dc05      	bgt.n	800908c <__sflush_r+0x20>
 8009080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	dc02      	bgt.n	800908c <__sflush_r+0x20>
 8009086:	2000      	movs	r0, #0
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800908e:	2e00      	cmp	r6, #0
 8009090:	d0f9      	beq.n	8009086 <__sflush_r+0x1a>
 8009092:	2300      	movs	r3, #0
 8009094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009098:	682f      	ldr	r7, [r5, #0]
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	d032      	beq.n	8009104 <__sflush_r+0x98>
 800909e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	075a      	lsls	r2, r3, #29
 80090a4:	d505      	bpl.n	80090b2 <__sflush_r+0x46>
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	1ac0      	subs	r0, r0, r3
 80090aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090ac:	b10b      	cbz	r3, 80090b2 <__sflush_r+0x46>
 80090ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090b0:	1ac0      	subs	r0, r0, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	4602      	mov	r2, r0
 80090b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090b8:	6a21      	ldr	r1, [r4, #32]
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b0      	blx	r6
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	d106      	bne.n	80090d2 <__sflush_r+0x66>
 80090c4:	6829      	ldr	r1, [r5, #0]
 80090c6:	291d      	cmp	r1, #29
 80090c8:	d82c      	bhi.n	8009124 <__sflush_r+0xb8>
 80090ca:	4a2a      	ldr	r2, [pc, #168]	; (8009174 <__sflush_r+0x108>)
 80090cc:	40ca      	lsrs	r2, r1
 80090ce:	07d6      	lsls	r6, r2, #31
 80090d0:	d528      	bpl.n	8009124 <__sflush_r+0xb8>
 80090d2:	2200      	movs	r2, #0
 80090d4:	6062      	str	r2, [r4, #4]
 80090d6:	04d9      	lsls	r1, r3, #19
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	6022      	str	r2, [r4, #0]
 80090dc:	d504      	bpl.n	80090e8 <__sflush_r+0x7c>
 80090de:	1c42      	adds	r2, r0, #1
 80090e0:	d101      	bne.n	80090e6 <__sflush_r+0x7a>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	b903      	cbnz	r3, 80090e8 <__sflush_r+0x7c>
 80090e6:	6560      	str	r0, [r4, #84]	; 0x54
 80090e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ea:	602f      	str	r7, [r5, #0]
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d0ca      	beq.n	8009086 <__sflush_r+0x1a>
 80090f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f4:	4299      	cmp	r1, r3
 80090f6:	d002      	beq.n	80090fe <__sflush_r+0x92>
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff fd79 	bl	8008bf0 <_free_r>
 80090fe:	2000      	movs	r0, #0
 8009100:	6360      	str	r0, [r4, #52]	; 0x34
 8009102:	e7c1      	b.n	8009088 <__sflush_r+0x1c>
 8009104:	6a21      	ldr	r1, [r4, #32]
 8009106:	2301      	movs	r3, #1
 8009108:	4628      	mov	r0, r5
 800910a:	47b0      	blx	r6
 800910c:	1c41      	adds	r1, r0, #1
 800910e:	d1c7      	bne.n	80090a0 <__sflush_r+0x34>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0c4      	beq.n	80090a0 <__sflush_r+0x34>
 8009116:	2b1d      	cmp	r3, #29
 8009118:	d001      	beq.n	800911e <__sflush_r+0xb2>
 800911a:	2b16      	cmp	r3, #22
 800911c:	d101      	bne.n	8009122 <__sflush_r+0xb6>
 800911e:	602f      	str	r7, [r5, #0]
 8009120:	e7b1      	b.n	8009086 <__sflush_r+0x1a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	e7ad      	b.n	8009088 <__sflush_r+0x1c>
 800912c:	690f      	ldr	r7, [r1, #16]
 800912e:	2f00      	cmp	r7, #0
 8009130:	d0a9      	beq.n	8009086 <__sflush_r+0x1a>
 8009132:	0793      	lsls	r3, r2, #30
 8009134:	680e      	ldr	r6, [r1, #0]
 8009136:	bf08      	it	eq
 8009138:	694b      	ldreq	r3, [r1, #20]
 800913a:	600f      	str	r7, [r1, #0]
 800913c:	bf18      	it	ne
 800913e:	2300      	movne	r3, #0
 8009140:	eba6 0807 	sub.w	r8, r6, r7
 8009144:	608b      	str	r3, [r1, #8]
 8009146:	f1b8 0f00 	cmp.w	r8, #0
 800914a:	dd9c      	ble.n	8009086 <__sflush_r+0x1a>
 800914c:	6a21      	ldr	r1, [r4, #32]
 800914e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009150:	4643      	mov	r3, r8
 8009152:	463a      	mov	r2, r7
 8009154:	4628      	mov	r0, r5
 8009156:	47b0      	blx	r6
 8009158:	2800      	cmp	r0, #0
 800915a:	dc06      	bgt.n	800916a <__sflush_r+0xfe>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009168:	e78e      	b.n	8009088 <__sflush_r+0x1c>
 800916a:	4407      	add	r7, r0
 800916c:	eba8 0800 	sub.w	r8, r8, r0
 8009170:	e7e9      	b.n	8009146 <__sflush_r+0xda>
 8009172:	bf00      	nop
 8009174:	20400001 	.word	0x20400001

08009178 <_fflush_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	690b      	ldr	r3, [r1, #16]
 800917c:	4605      	mov	r5, r0
 800917e:	460c      	mov	r4, r1
 8009180:	b913      	cbnz	r3, 8009188 <_fflush_r+0x10>
 8009182:	2500      	movs	r5, #0
 8009184:	4628      	mov	r0, r5
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	b118      	cbz	r0, 8009192 <_fflush_r+0x1a>
 800918a:	6983      	ldr	r3, [r0, #24]
 800918c:	b90b      	cbnz	r3, 8009192 <_fflush_r+0x1a>
 800918e:	f000 f887 	bl	80092a0 <__sinit>
 8009192:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <_fflush_r+0x6c>)
 8009194:	429c      	cmp	r4, r3
 8009196:	d11b      	bne.n	80091d0 <_fflush_r+0x58>
 8009198:	686c      	ldr	r4, [r5, #4]
 800919a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0ef      	beq.n	8009182 <_fflush_r+0xa>
 80091a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091a4:	07d0      	lsls	r0, r2, #31
 80091a6:	d404      	bmi.n	80091b2 <_fflush_r+0x3a>
 80091a8:	0599      	lsls	r1, r3, #22
 80091aa:	d402      	bmi.n	80091b2 <_fflush_r+0x3a>
 80091ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ae:	f000 f915 	bl	80093dc <__retarget_lock_acquire_recursive>
 80091b2:	4628      	mov	r0, r5
 80091b4:	4621      	mov	r1, r4
 80091b6:	f7ff ff59 	bl	800906c <__sflush_r>
 80091ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091bc:	07da      	lsls	r2, r3, #31
 80091be:	4605      	mov	r5, r0
 80091c0:	d4e0      	bmi.n	8009184 <_fflush_r+0xc>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	059b      	lsls	r3, r3, #22
 80091c6:	d4dd      	bmi.n	8009184 <_fflush_r+0xc>
 80091c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ca:	f000 f908 	bl	80093de <__retarget_lock_release_recursive>
 80091ce:	e7d9      	b.n	8009184 <_fflush_r+0xc>
 80091d0:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <_fflush_r+0x70>)
 80091d2:	429c      	cmp	r4, r3
 80091d4:	d101      	bne.n	80091da <_fflush_r+0x62>
 80091d6:	68ac      	ldr	r4, [r5, #8]
 80091d8:	e7df      	b.n	800919a <_fflush_r+0x22>
 80091da:	4b04      	ldr	r3, [pc, #16]	; (80091ec <_fflush_r+0x74>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	bf08      	it	eq
 80091e0:	68ec      	ldreq	r4, [r5, #12]
 80091e2:	e7da      	b.n	800919a <_fflush_r+0x22>
 80091e4:	0800af8c 	.word	0x0800af8c
 80091e8:	0800afac 	.word	0x0800afac
 80091ec:	0800af6c 	.word	0x0800af6c

080091f0 <std>:
 80091f0:	2300      	movs	r3, #0
 80091f2:	b510      	push	{r4, lr}
 80091f4:	4604      	mov	r4, r0
 80091f6:	e9c0 3300 	strd	r3, r3, [r0]
 80091fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091fe:	6083      	str	r3, [r0, #8]
 8009200:	8181      	strh	r1, [r0, #12]
 8009202:	6643      	str	r3, [r0, #100]	; 0x64
 8009204:	81c2      	strh	r2, [r0, #14]
 8009206:	6183      	str	r3, [r0, #24]
 8009208:	4619      	mov	r1, r3
 800920a:	2208      	movs	r2, #8
 800920c:	305c      	adds	r0, #92	; 0x5c
 800920e:	f7ff fcd1 	bl	8008bb4 <memset>
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <std+0x38>)
 8009214:	6263      	str	r3, [r4, #36]	; 0x24
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <std+0x3c>)
 8009218:	62a3      	str	r3, [r4, #40]	; 0x28
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <std+0x40>)
 800921c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <std+0x44>)
 8009220:	6224      	str	r4, [r4, #32]
 8009222:	6323      	str	r3, [r4, #48]	; 0x30
 8009224:	bd10      	pop	{r4, pc}
 8009226:	bf00      	nop
 8009228:	08009aa1 	.word	0x08009aa1
 800922c:	08009ac3 	.word	0x08009ac3
 8009230:	08009afb 	.word	0x08009afb
 8009234:	08009b1f 	.word	0x08009b1f

08009238 <_cleanup_r>:
 8009238:	4901      	ldr	r1, [pc, #4]	; (8009240 <_cleanup_r+0x8>)
 800923a:	f000 b8af 	b.w	800939c <_fwalk_reent>
 800923e:	bf00      	nop
 8009240:	08009179 	.word	0x08009179

08009244 <__sfmoreglue>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	2268      	movs	r2, #104	; 0x68
 8009248:	1e4d      	subs	r5, r1, #1
 800924a:	4355      	muls	r5, r2
 800924c:	460e      	mov	r6, r1
 800924e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009252:	f7ff fd39 	bl	8008cc8 <_malloc_r>
 8009256:	4604      	mov	r4, r0
 8009258:	b140      	cbz	r0, 800926c <__sfmoreglue+0x28>
 800925a:	2100      	movs	r1, #0
 800925c:	e9c0 1600 	strd	r1, r6, [r0]
 8009260:	300c      	adds	r0, #12
 8009262:	60a0      	str	r0, [r4, #8]
 8009264:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009268:	f7ff fca4 	bl	8008bb4 <memset>
 800926c:	4620      	mov	r0, r4
 800926e:	bd70      	pop	{r4, r5, r6, pc}

08009270 <__sfp_lock_acquire>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__sfp_lock_acquire+0x8>)
 8009272:	f000 b8b3 	b.w	80093dc <__retarget_lock_acquire_recursive>
 8009276:	bf00      	nop
 8009278:	20008489 	.word	0x20008489

0800927c <__sfp_lock_release>:
 800927c:	4801      	ldr	r0, [pc, #4]	; (8009284 <__sfp_lock_release+0x8>)
 800927e:	f000 b8ae 	b.w	80093de <__retarget_lock_release_recursive>
 8009282:	bf00      	nop
 8009284:	20008489 	.word	0x20008489

08009288 <__sinit_lock_acquire>:
 8009288:	4801      	ldr	r0, [pc, #4]	; (8009290 <__sinit_lock_acquire+0x8>)
 800928a:	f000 b8a7 	b.w	80093dc <__retarget_lock_acquire_recursive>
 800928e:	bf00      	nop
 8009290:	2000848a 	.word	0x2000848a

08009294 <__sinit_lock_release>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__sinit_lock_release+0x8>)
 8009296:	f000 b8a2 	b.w	80093de <__retarget_lock_release_recursive>
 800929a:	bf00      	nop
 800929c:	2000848a 	.word	0x2000848a

080092a0 <__sinit>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4604      	mov	r4, r0
 80092a4:	f7ff fff0 	bl	8009288 <__sinit_lock_acquire>
 80092a8:	69a3      	ldr	r3, [r4, #24]
 80092aa:	b11b      	cbz	r3, 80092b4 <__sinit+0x14>
 80092ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b0:	f7ff bff0 	b.w	8009294 <__sinit_lock_release>
 80092b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092b8:	6523      	str	r3, [r4, #80]	; 0x50
 80092ba:	4b13      	ldr	r3, [pc, #76]	; (8009308 <__sinit+0x68>)
 80092bc:	4a13      	ldr	r2, [pc, #76]	; (800930c <__sinit+0x6c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	bf04      	itt	eq
 80092c6:	2301      	moveq	r3, #1
 80092c8:	61a3      	streq	r3, [r4, #24]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f820 	bl	8009310 <__sfp>
 80092d0:	6060      	str	r0, [r4, #4]
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f81c 	bl	8009310 <__sfp>
 80092d8:	60a0      	str	r0, [r4, #8]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f818 	bl	8009310 <__sfp>
 80092e0:	2200      	movs	r2, #0
 80092e2:	60e0      	str	r0, [r4, #12]
 80092e4:	2104      	movs	r1, #4
 80092e6:	6860      	ldr	r0, [r4, #4]
 80092e8:	f7ff ff82 	bl	80091f0 <std>
 80092ec:	68a0      	ldr	r0, [r4, #8]
 80092ee:	2201      	movs	r2, #1
 80092f0:	2109      	movs	r1, #9
 80092f2:	f7ff ff7d 	bl	80091f0 <std>
 80092f6:	68e0      	ldr	r0, [r4, #12]
 80092f8:	2202      	movs	r2, #2
 80092fa:	2112      	movs	r1, #18
 80092fc:	f7ff ff78 	bl	80091f0 <std>
 8009300:	2301      	movs	r3, #1
 8009302:	61a3      	str	r3, [r4, #24]
 8009304:	e7d2      	b.n	80092ac <__sinit+0xc>
 8009306:	bf00      	nop
 8009308:	0800af68 	.word	0x0800af68
 800930c:	08009239 	.word	0x08009239

08009310 <__sfp>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	4607      	mov	r7, r0
 8009314:	f7ff ffac 	bl	8009270 <__sfp_lock_acquire>
 8009318:	4b1e      	ldr	r3, [pc, #120]	; (8009394 <__sfp+0x84>)
 800931a:	681e      	ldr	r6, [r3, #0]
 800931c:	69b3      	ldr	r3, [r6, #24]
 800931e:	b913      	cbnz	r3, 8009326 <__sfp+0x16>
 8009320:	4630      	mov	r0, r6
 8009322:	f7ff ffbd 	bl	80092a0 <__sinit>
 8009326:	3648      	adds	r6, #72	; 0x48
 8009328:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800932c:	3b01      	subs	r3, #1
 800932e:	d503      	bpl.n	8009338 <__sfp+0x28>
 8009330:	6833      	ldr	r3, [r6, #0]
 8009332:	b30b      	cbz	r3, 8009378 <__sfp+0x68>
 8009334:	6836      	ldr	r6, [r6, #0]
 8009336:	e7f7      	b.n	8009328 <__sfp+0x18>
 8009338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800933c:	b9d5      	cbnz	r5, 8009374 <__sfp+0x64>
 800933e:	4b16      	ldr	r3, [pc, #88]	; (8009398 <__sfp+0x88>)
 8009340:	60e3      	str	r3, [r4, #12]
 8009342:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009346:	6665      	str	r5, [r4, #100]	; 0x64
 8009348:	f000 f847 	bl	80093da <__retarget_lock_init_recursive>
 800934c:	f7ff ff96 	bl	800927c <__sfp_lock_release>
 8009350:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009354:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009358:	6025      	str	r5, [r4, #0]
 800935a:	61a5      	str	r5, [r4, #24]
 800935c:	2208      	movs	r2, #8
 800935e:	4629      	mov	r1, r5
 8009360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009364:	f7ff fc26 	bl	8008bb4 <memset>
 8009368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800936c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009370:	4620      	mov	r0, r4
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009374:	3468      	adds	r4, #104	; 0x68
 8009376:	e7d9      	b.n	800932c <__sfp+0x1c>
 8009378:	2104      	movs	r1, #4
 800937a:	4638      	mov	r0, r7
 800937c:	f7ff ff62 	bl	8009244 <__sfmoreglue>
 8009380:	4604      	mov	r4, r0
 8009382:	6030      	str	r0, [r6, #0]
 8009384:	2800      	cmp	r0, #0
 8009386:	d1d5      	bne.n	8009334 <__sfp+0x24>
 8009388:	f7ff ff78 	bl	800927c <__sfp_lock_release>
 800938c:	230c      	movs	r3, #12
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	e7ee      	b.n	8009370 <__sfp+0x60>
 8009392:	bf00      	nop
 8009394:	0800af68 	.word	0x0800af68
 8009398:	ffff0001 	.word	0xffff0001

0800939c <_fwalk_reent>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	4606      	mov	r6, r0
 80093a2:	4688      	mov	r8, r1
 80093a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093a8:	2700      	movs	r7, #0
 80093aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093ae:	f1b9 0901 	subs.w	r9, r9, #1
 80093b2:	d505      	bpl.n	80093c0 <_fwalk_reent+0x24>
 80093b4:	6824      	ldr	r4, [r4, #0]
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	d1f7      	bne.n	80093aa <_fwalk_reent+0xe>
 80093ba:	4638      	mov	r0, r7
 80093bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c0:	89ab      	ldrh	r3, [r5, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d907      	bls.n	80093d6 <_fwalk_reent+0x3a>
 80093c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ca:	3301      	adds	r3, #1
 80093cc:	d003      	beq.n	80093d6 <_fwalk_reent+0x3a>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4630      	mov	r0, r6
 80093d2:	47c0      	blx	r8
 80093d4:	4307      	orrs	r7, r0
 80093d6:	3568      	adds	r5, #104	; 0x68
 80093d8:	e7e9      	b.n	80093ae <_fwalk_reent+0x12>

080093da <__retarget_lock_init_recursive>:
 80093da:	4770      	bx	lr

080093dc <__retarget_lock_acquire_recursive>:
 80093dc:	4770      	bx	lr

080093de <__retarget_lock_release_recursive>:
 80093de:	4770      	bx	lr

080093e0 <__swhatbuf_r>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	460e      	mov	r6, r1
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	2900      	cmp	r1, #0
 80093ea:	b096      	sub	sp, #88	; 0x58
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	da08      	bge.n	8009404 <__swhatbuf_r+0x24>
 80093f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	602a      	str	r2, [r5, #0]
 80093fa:	061a      	lsls	r2, r3, #24
 80093fc:	d410      	bmi.n	8009420 <__swhatbuf_r+0x40>
 80093fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009402:	e00e      	b.n	8009422 <__swhatbuf_r+0x42>
 8009404:	466a      	mov	r2, sp
 8009406:	f000 fbb1 	bl	8009b6c <_fstat_r>
 800940a:	2800      	cmp	r0, #0
 800940c:	dbf1      	blt.n	80093f2 <__swhatbuf_r+0x12>
 800940e:	9a01      	ldr	r2, [sp, #4]
 8009410:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009414:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009418:	425a      	negs	r2, r3
 800941a:	415a      	adcs	r2, r3
 800941c:	602a      	str	r2, [r5, #0]
 800941e:	e7ee      	b.n	80093fe <__swhatbuf_r+0x1e>
 8009420:	2340      	movs	r3, #64	; 0x40
 8009422:	2000      	movs	r0, #0
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	b016      	add	sp, #88	; 0x58
 8009428:	bd70      	pop	{r4, r5, r6, pc}
	...

0800942c <__smakebuf_r>:
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009430:	079d      	lsls	r5, r3, #30
 8009432:	4606      	mov	r6, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d507      	bpl.n	8009448 <__smakebuf_r+0x1c>
 8009438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2301      	movs	r3, #1
 8009442:	6163      	str	r3, [r4, #20]
 8009444:	b002      	add	sp, #8
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	ab01      	add	r3, sp, #4
 800944a:	466a      	mov	r2, sp
 800944c:	f7ff ffc8 	bl	80093e0 <__swhatbuf_r>
 8009450:	9900      	ldr	r1, [sp, #0]
 8009452:	4605      	mov	r5, r0
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff fc37 	bl	8008cc8 <_malloc_r>
 800945a:	b948      	cbnz	r0, 8009470 <__smakebuf_r+0x44>
 800945c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009460:	059a      	lsls	r2, r3, #22
 8009462:	d4ef      	bmi.n	8009444 <__smakebuf_r+0x18>
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	f043 0302 	orr.w	r3, r3, #2
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	e7e3      	b.n	8009438 <__smakebuf_r+0xc>
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <__smakebuf_r+0x7c>)
 8009472:	62b3      	str	r3, [r6, #40]	; 0x28
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	6020      	str	r0, [r4, #0]
 8009478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	9b00      	ldr	r3, [sp, #0]
 8009480:	6163      	str	r3, [r4, #20]
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	6120      	str	r0, [r4, #16]
 8009486:	b15b      	cbz	r3, 80094a0 <__smakebuf_r+0x74>
 8009488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948c:	4630      	mov	r0, r6
 800948e:	f000 fb7f 	bl	8009b90 <_isatty_r>
 8009492:	b128      	cbz	r0, 80094a0 <__smakebuf_r+0x74>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	89a0      	ldrh	r0, [r4, #12]
 80094a2:	4305      	orrs	r5, r0
 80094a4:	81a5      	strh	r5, [r4, #12]
 80094a6:	e7cd      	b.n	8009444 <__smakebuf_r+0x18>
 80094a8:	08009239 	.word	0x08009239

080094ac <__malloc_lock>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__malloc_lock+0x8>)
 80094ae:	f7ff bf95 	b.w	80093dc <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	20008488 	.word	0x20008488

080094b8 <__malloc_unlock>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__malloc_unlock+0x8>)
 80094ba:	f7ff bf90 	b.w	80093de <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	20008488 	.word	0x20008488

080094c4 <__sfputc_r>:
 80094c4:	6893      	ldr	r3, [r2, #8]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	b410      	push	{r4}
 80094cc:	6093      	str	r3, [r2, #8]
 80094ce:	da08      	bge.n	80094e2 <__sfputc_r+0x1e>
 80094d0:	6994      	ldr	r4, [r2, #24]
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	db01      	blt.n	80094da <__sfputc_r+0x16>
 80094d6:	290a      	cmp	r1, #10
 80094d8:	d103      	bne.n	80094e2 <__sfputc_r+0x1e>
 80094da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094de:	f7ff bd05 	b.w	8008eec <__swbuf_r>
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	1c58      	adds	r0, r3, #1
 80094e6:	6010      	str	r0, [r2, #0]
 80094e8:	7019      	strb	r1, [r3, #0]
 80094ea:	4608      	mov	r0, r1
 80094ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <__sfputs_r>:
 80094f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f4:	4606      	mov	r6, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	4614      	mov	r4, r2
 80094fa:	18d5      	adds	r5, r2, r3
 80094fc:	42ac      	cmp	r4, r5
 80094fe:	d101      	bne.n	8009504 <__sfputs_r+0x12>
 8009500:	2000      	movs	r0, #0
 8009502:	e007      	b.n	8009514 <__sfputs_r+0x22>
 8009504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009508:	463a      	mov	r2, r7
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ffda 	bl	80094c4 <__sfputc_r>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d1f3      	bne.n	80094fc <__sfputs_r+0xa>
 8009514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009518 <_vfiprintf_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	460d      	mov	r5, r1
 800951e:	b09d      	sub	sp, #116	; 0x74
 8009520:	4614      	mov	r4, r2
 8009522:	4698      	mov	r8, r3
 8009524:	4606      	mov	r6, r0
 8009526:	b118      	cbz	r0, 8009530 <_vfiprintf_r+0x18>
 8009528:	6983      	ldr	r3, [r0, #24]
 800952a:	b90b      	cbnz	r3, 8009530 <_vfiprintf_r+0x18>
 800952c:	f7ff feb8 	bl	80092a0 <__sinit>
 8009530:	4b89      	ldr	r3, [pc, #548]	; (8009758 <_vfiprintf_r+0x240>)
 8009532:	429d      	cmp	r5, r3
 8009534:	d11b      	bne.n	800956e <_vfiprintf_r+0x56>
 8009536:	6875      	ldr	r5, [r6, #4]
 8009538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800953a:	07d9      	lsls	r1, r3, #31
 800953c:	d405      	bmi.n	800954a <_vfiprintf_r+0x32>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	059a      	lsls	r2, r3, #22
 8009542:	d402      	bmi.n	800954a <_vfiprintf_r+0x32>
 8009544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009546:	f7ff ff49 	bl	80093dc <__retarget_lock_acquire_recursive>
 800954a:	89ab      	ldrh	r3, [r5, #12]
 800954c:	071b      	lsls	r3, r3, #28
 800954e:	d501      	bpl.n	8009554 <_vfiprintf_r+0x3c>
 8009550:	692b      	ldr	r3, [r5, #16]
 8009552:	b9eb      	cbnz	r3, 8009590 <_vfiprintf_r+0x78>
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff fd1a 	bl	8008f90 <__swsetup_r>
 800955c:	b1c0      	cbz	r0, 8009590 <_vfiprintf_r+0x78>
 800955e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009560:	07dc      	lsls	r4, r3, #31
 8009562:	d50e      	bpl.n	8009582 <_vfiprintf_r+0x6a>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009568:	b01d      	add	sp, #116	; 0x74
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	4b7b      	ldr	r3, [pc, #492]	; (800975c <_vfiprintf_r+0x244>)
 8009570:	429d      	cmp	r5, r3
 8009572:	d101      	bne.n	8009578 <_vfiprintf_r+0x60>
 8009574:	68b5      	ldr	r5, [r6, #8]
 8009576:	e7df      	b.n	8009538 <_vfiprintf_r+0x20>
 8009578:	4b79      	ldr	r3, [pc, #484]	; (8009760 <_vfiprintf_r+0x248>)
 800957a:	429d      	cmp	r5, r3
 800957c:	bf08      	it	eq
 800957e:	68f5      	ldreq	r5, [r6, #12]
 8009580:	e7da      	b.n	8009538 <_vfiprintf_r+0x20>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	0598      	lsls	r0, r3, #22
 8009586:	d4ed      	bmi.n	8009564 <_vfiprintf_r+0x4c>
 8009588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958a:	f7ff ff28 	bl	80093de <__retarget_lock_release_recursive>
 800958e:	e7e9      	b.n	8009564 <_vfiprintf_r+0x4c>
 8009590:	2300      	movs	r3, #0
 8009592:	9309      	str	r3, [sp, #36]	; 0x24
 8009594:	2320      	movs	r3, #32
 8009596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959a:	f8cd 800c 	str.w	r8, [sp, #12]
 800959e:	2330      	movs	r3, #48	; 0x30
 80095a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009764 <_vfiprintf_r+0x24c>
 80095a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a8:	f04f 0901 	mov.w	r9, #1
 80095ac:	4623      	mov	r3, r4
 80095ae:	469a      	mov	sl, r3
 80095b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b4:	b10a      	cbz	r2, 80095ba <_vfiprintf_r+0xa2>
 80095b6:	2a25      	cmp	r2, #37	; 0x25
 80095b8:	d1f9      	bne.n	80095ae <_vfiprintf_r+0x96>
 80095ba:	ebba 0b04 	subs.w	fp, sl, r4
 80095be:	d00b      	beq.n	80095d8 <_vfiprintf_r+0xc0>
 80095c0:	465b      	mov	r3, fp
 80095c2:	4622      	mov	r2, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7ff ff93 	bl	80094f2 <__sfputs_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	f000 80aa 	beq.w	8009726 <_vfiprintf_r+0x20e>
 80095d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d4:	445a      	add	r2, fp
 80095d6:	9209      	str	r2, [sp, #36]	; 0x24
 80095d8:	f89a 3000 	ldrb.w	r3, [sl]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80a2 	beq.w	8009726 <_vfiprintf_r+0x20e>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ec:	f10a 0a01 	add.w	sl, sl, #1
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	9307      	str	r3, [sp, #28]
 80095f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f8:	931a      	str	r3, [sp, #104]	; 0x68
 80095fa:	4654      	mov	r4, sl
 80095fc:	2205      	movs	r2, #5
 80095fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009602:	4858      	ldr	r0, [pc, #352]	; (8009764 <_vfiprintf_r+0x24c>)
 8009604:	f7f6 fe04 	bl	8000210 <memchr>
 8009608:	9a04      	ldr	r2, [sp, #16]
 800960a:	b9d8      	cbnz	r0, 8009644 <_vfiprintf_r+0x12c>
 800960c:	06d1      	lsls	r1, r2, #27
 800960e:	bf44      	itt	mi
 8009610:	2320      	movmi	r3, #32
 8009612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009616:	0713      	lsls	r3, r2, #28
 8009618:	bf44      	itt	mi
 800961a:	232b      	movmi	r3, #43	; 0x2b
 800961c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009620:	f89a 3000 	ldrb.w	r3, [sl]
 8009624:	2b2a      	cmp	r3, #42	; 0x2a
 8009626:	d015      	beq.n	8009654 <_vfiprintf_r+0x13c>
 8009628:	9a07      	ldr	r2, [sp, #28]
 800962a:	4654      	mov	r4, sl
 800962c:	2000      	movs	r0, #0
 800962e:	f04f 0c0a 	mov.w	ip, #10
 8009632:	4621      	mov	r1, r4
 8009634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009638:	3b30      	subs	r3, #48	; 0x30
 800963a:	2b09      	cmp	r3, #9
 800963c:	d94e      	bls.n	80096dc <_vfiprintf_r+0x1c4>
 800963e:	b1b0      	cbz	r0, 800966e <_vfiprintf_r+0x156>
 8009640:	9207      	str	r2, [sp, #28]
 8009642:	e014      	b.n	800966e <_vfiprintf_r+0x156>
 8009644:	eba0 0308 	sub.w	r3, r0, r8
 8009648:	fa09 f303 	lsl.w	r3, r9, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	46a2      	mov	sl, r4
 8009652:	e7d2      	b.n	80095fa <_vfiprintf_r+0xe2>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1d19      	adds	r1, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	9103      	str	r1, [sp, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	bfbb      	ittet	lt
 8009660:	425b      	neglt	r3, r3
 8009662:	f042 0202 	orrlt.w	r2, r2, #2
 8009666:	9307      	strge	r3, [sp, #28]
 8009668:	9307      	strlt	r3, [sp, #28]
 800966a:	bfb8      	it	lt
 800966c:	9204      	strlt	r2, [sp, #16]
 800966e:	7823      	ldrb	r3, [r4, #0]
 8009670:	2b2e      	cmp	r3, #46	; 0x2e
 8009672:	d10c      	bne.n	800968e <_vfiprintf_r+0x176>
 8009674:	7863      	ldrb	r3, [r4, #1]
 8009676:	2b2a      	cmp	r3, #42	; 0x2a
 8009678:	d135      	bne.n	80096e6 <_vfiprintf_r+0x1ce>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9203      	str	r2, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfb8      	it	lt
 8009686:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800968a:	3402      	adds	r4, #2
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009774 <_vfiprintf_r+0x25c>
 8009692:	7821      	ldrb	r1, [r4, #0]
 8009694:	2203      	movs	r2, #3
 8009696:	4650      	mov	r0, sl
 8009698:	f7f6 fdba 	bl	8000210 <memchr>
 800969c:	b140      	cbz	r0, 80096b0 <_vfiprintf_r+0x198>
 800969e:	2340      	movs	r3, #64	; 0x40
 80096a0:	eba0 000a 	sub.w	r0, r0, sl
 80096a4:	fa03 f000 	lsl.w	r0, r3, r0
 80096a8:	9b04      	ldr	r3, [sp, #16]
 80096aa:	4303      	orrs	r3, r0
 80096ac:	3401      	adds	r4, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	482c      	ldr	r0, [pc, #176]	; (8009768 <_vfiprintf_r+0x250>)
 80096b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ba:	2206      	movs	r2, #6
 80096bc:	f7f6 fda8 	bl	8000210 <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d03f      	beq.n	8009744 <_vfiprintf_r+0x22c>
 80096c4:	4b29      	ldr	r3, [pc, #164]	; (800976c <_vfiprintf_r+0x254>)
 80096c6:	bb1b      	cbnz	r3, 8009710 <_vfiprintf_r+0x1f8>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	3307      	adds	r3, #7
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d6:	443b      	add	r3, r7
 80096d8:	9309      	str	r3, [sp, #36]	; 0x24
 80096da:	e767      	b.n	80095ac <_vfiprintf_r+0x94>
 80096dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e0:	460c      	mov	r4, r1
 80096e2:	2001      	movs	r0, #1
 80096e4:	e7a5      	b.n	8009632 <_vfiprintf_r+0x11a>
 80096e6:	2300      	movs	r3, #0
 80096e8:	3401      	adds	r4, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	4619      	mov	r1, r3
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	; 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_vfiprintf_r+0x1ee>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c5      	beq.n	800968e <_vfiprintf_r+0x176>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c3      	b.n	800968e <_vfiprintf_r+0x176>
 8009706:	fb0c 2101 	mla	r1, ip, r1, r2
 800970a:	4604      	mov	r4, r0
 800970c:	2301      	movs	r3, #1
 800970e:	e7f0      	b.n	80096f2 <_vfiprintf_r+0x1da>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	462a      	mov	r2, r5
 8009716:	4b16      	ldr	r3, [pc, #88]	; (8009770 <_vfiprintf_r+0x258>)
 8009718:	a904      	add	r1, sp, #16
 800971a:	4630      	mov	r0, r6
 800971c:	f3af 8000 	nop.w
 8009720:	4607      	mov	r7, r0
 8009722:	1c78      	adds	r0, r7, #1
 8009724:	d1d6      	bne.n	80096d4 <_vfiprintf_r+0x1bc>
 8009726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009728:	07d9      	lsls	r1, r3, #31
 800972a:	d405      	bmi.n	8009738 <_vfiprintf_r+0x220>
 800972c:	89ab      	ldrh	r3, [r5, #12]
 800972e:	059a      	lsls	r2, r3, #22
 8009730:	d402      	bmi.n	8009738 <_vfiprintf_r+0x220>
 8009732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009734:	f7ff fe53 	bl	80093de <__retarget_lock_release_recursive>
 8009738:	89ab      	ldrh	r3, [r5, #12]
 800973a:	065b      	lsls	r3, r3, #25
 800973c:	f53f af12 	bmi.w	8009564 <_vfiprintf_r+0x4c>
 8009740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009742:	e711      	b.n	8009568 <_vfiprintf_r+0x50>
 8009744:	ab03      	add	r3, sp, #12
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	462a      	mov	r2, r5
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <_vfiprintf_r+0x258>)
 800974c:	a904      	add	r1, sp, #16
 800974e:	4630      	mov	r0, r6
 8009750:	f000 f880 	bl	8009854 <_printf_i>
 8009754:	e7e4      	b.n	8009720 <_vfiprintf_r+0x208>
 8009756:	bf00      	nop
 8009758:	0800af8c 	.word	0x0800af8c
 800975c:	0800afac 	.word	0x0800afac
 8009760:	0800af6c 	.word	0x0800af6c
 8009764:	0800afcc 	.word	0x0800afcc
 8009768:	0800afd6 	.word	0x0800afd6
 800976c:	00000000 	.word	0x00000000
 8009770:	080094f3 	.word	0x080094f3
 8009774:	0800afd2 	.word	0x0800afd2

08009778 <_printf_common>:
 8009778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800977c:	4616      	mov	r6, r2
 800977e:	4699      	mov	r9, r3
 8009780:	688a      	ldr	r2, [r1, #8]
 8009782:	690b      	ldr	r3, [r1, #16]
 8009784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009788:	4293      	cmp	r3, r2
 800978a:	bfb8      	it	lt
 800978c:	4613      	movlt	r3, r2
 800978e:	6033      	str	r3, [r6, #0]
 8009790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009794:	4607      	mov	r7, r0
 8009796:	460c      	mov	r4, r1
 8009798:	b10a      	cbz	r2, 800979e <_printf_common+0x26>
 800979a:	3301      	adds	r3, #1
 800979c:	6033      	str	r3, [r6, #0]
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	0699      	lsls	r1, r3, #26
 80097a2:	bf42      	ittt	mi
 80097a4:	6833      	ldrmi	r3, [r6, #0]
 80097a6:	3302      	addmi	r3, #2
 80097a8:	6033      	strmi	r3, [r6, #0]
 80097aa:	6825      	ldr	r5, [r4, #0]
 80097ac:	f015 0506 	ands.w	r5, r5, #6
 80097b0:	d106      	bne.n	80097c0 <_printf_common+0x48>
 80097b2:	f104 0a19 	add.w	sl, r4, #25
 80097b6:	68e3      	ldr	r3, [r4, #12]
 80097b8:	6832      	ldr	r2, [r6, #0]
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	42ab      	cmp	r3, r5
 80097be:	dc26      	bgt.n	800980e <_printf_common+0x96>
 80097c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097c4:	1e13      	subs	r3, r2, #0
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	bf18      	it	ne
 80097ca:	2301      	movne	r3, #1
 80097cc:	0692      	lsls	r2, r2, #26
 80097ce:	d42b      	bmi.n	8009828 <_printf_common+0xb0>
 80097d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097d4:	4649      	mov	r1, r9
 80097d6:	4638      	mov	r0, r7
 80097d8:	47c0      	blx	r8
 80097da:	3001      	adds	r0, #1
 80097dc:	d01e      	beq.n	800981c <_printf_common+0xa4>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	68e5      	ldr	r5, [r4, #12]
 80097e2:	6832      	ldr	r2, [r6, #0]
 80097e4:	f003 0306 	and.w	r3, r3, #6
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	bf08      	it	eq
 80097ec:	1aad      	subeq	r5, r5, r2
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	bf0c      	ite	eq
 80097f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097f8:	2500      	movne	r5, #0
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bfc4      	itt	gt
 80097fe:	1a9b      	subgt	r3, r3, r2
 8009800:	18ed      	addgt	r5, r5, r3
 8009802:	2600      	movs	r6, #0
 8009804:	341a      	adds	r4, #26
 8009806:	42b5      	cmp	r5, r6
 8009808:	d11a      	bne.n	8009840 <_printf_common+0xc8>
 800980a:	2000      	movs	r0, #0
 800980c:	e008      	b.n	8009820 <_printf_common+0xa8>
 800980e:	2301      	movs	r3, #1
 8009810:	4652      	mov	r2, sl
 8009812:	4649      	mov	r1, r9
 8009814:	4638      	mov	r0, r7
 8009816:	47c0      	blx	r8
 8009818:	3001      	adds	r0, #1
 800981a:	d103      	bne.n	8009824 <_printf_common+0xac>
 800981c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009824:	3501      	adds	r5, #1
 8009826:	e7c6      	b.n	80097b6 <_printf_common+0x3e>
 8009828:	18e1      	adds	r1, r4, r3
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	2030      	movs	r0, #48	; 0x30
 800982e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009832:	4422      	add	r2, r4
 8009834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800983c:	3302      	adds	r3, #2
 800983e:	e7c7      	b.n	80097d0 <_printf_common+0x58>
 8009840:	2301      	movs	r3, #1
 8009842:	4622      	mov	r2, r4
 8009844:	4649      	mov	r1, r9
 8009846:	4638      	mov	r0, r7
 8009848:	47c0      	blx	r8
 800984a:	3001      	adds	r0, #1
 800984c:	d0e6      	beq.n	800981c <_printf_common+0xa4>
 800984e:	3601      	adds	r6, #1
 8009850:	e7d9      	b.n	8009806 <_printf_common+0x8e>
	...

08009854 <_printf_i>:
 8009854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	7e0f      	ldrb	r7, [r1, #24]
 800985a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800985c:	2f78      	cmp	r7, #120	; 0x78
 800985e:	4691      	mov	r9, r2
 8009860:	4680      	mov	r8, r0
 8009862:	460c      	mov	r4, r1
 8009864:	469a      	mov	sl, r3
 8009866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800986a:	d807      	bhi.n	800987c <_printf_i+0x28>
 800986c:	2f62      	cmp	r7, #98	; 0x62
 800986e:	d80a      	bhi.n	8009886 <_printf_i+0x32>
 8009870:	2f00      	cmp	r7, #0
 8009872:	f000 80d8 	beq.w	8009a26 <_printf_i+0x1d2>
 8009876:	2f58      	cmp	r7, #88	; 0x58
 8009878:	f000 80a3 	beq.w	80099c2 <_printf_i+0x16e>
 800987c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009884:	e03a      	b.n	80098fc <_printf_i+0xa8>
 8009886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800988a:	2b15      	cmp	r3, #21
 800988c:	d8f6      	bhi.n	800987c <_printf_i+0x28>
 800988e:	a101      	add	r1, pc, #4	; (adr r1, 8009894 <_printf_i+0x40>)
 8009890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009894:	080098ed 	.word	0x080098ed
 8009898:	08009901 	.word	0x08009901
 800989c:	0800987d 	.word	0x0800987d
 80098a0:	0800987d 	.word	0x0800987d
 80098a4:	0800987d 	.word	0x0800987d
 80098a8:	0800987d 	.word	0x0800987d
 80098ac:	08009901 	.word	0x08009901
 80098b0:	0800987d 	.word	0x0800987d
 80098b4:	0800987d 	.word	0x0800987d
 80098b8:	0800987d 	.word	0x0800987d
 80098bc:	0800987d 	.word	0x0800987d
 80098c0:	08009a0d 	.word	0x08009a0d
 80098c4:	08009931 	.word	0x08009931
 80098c8:	080099ef 	.word	0x080099ef
 80098cc:	0800987d 	.word	0x0800987d
 80098d0:	0800987d 	.word	0x0800987d
 80098d4:	08009a2f 	.word	0x08009a2f
 80098d8:	0800987d 	.word	0x0800987d
 80098dc:	08009931 	.word	0x08009931
 80098e0:	0800987d 	.word	0x0800987d
 80098e4:	0800987d 	.word	0x0800987d
 80098e8:	080099f7 	.word	0x080099f7
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	602a      	str	r2, [r5, #0]
 80098f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098fc:	2301      	movs	r3, #1
 80098fe:	e0a3      	b.n	8009a48 <_printf_i+0x1f4>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	6829      	ldr	r1, [r5, #0]
 8009904:	0606      	lsls	r6, r0, #24
 8009906:	f101 0304 	add.w	r3, r1, #4
 800990a:	d50a      	bpl.n	8009922 <_printf_i+0xce>
 800990c:	680e      	ldr	r6, [r1, #0]
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	2e00      	cmp	r6, #0
 8009912:	da03      	bge.n	800991c <_printf_i+0xc8>
 8009914:	232d      	movs	r3, #45	; 0x2d
 8009916:	4276      	negs	r6, r6
 8009918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991c:	485e      	ldr	r0, [pc, #376]	; (8009a98 <_printf_i+0x244>)
 800991e:	230a      	movs	r3, #10
 8009920:	e019      	b.n	8009956 <_printf_i+0x102>
 8009922:	680e      	ldr	r6, [r1, #0]
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800992a:	bf18      	it	ne
 800992c:	b236      	sxthne	r6, r6
 800992e:	e7ef      	b.n	8009910 <_printf_i+0xbc>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	6820      	ldr	r0, [r4, #0]
 8009934:	1d19      	adds	r1, r3, #4
 8009936:	6029      	str	r1, [r5, #0]
 8009938:	0601      	lsls	r1, r0, #24
 800993a:	d501      	bpl.n	8009940 <_printf_i+0xec>
 800993c:	681e      	ldr	r6, [r3, #0]
 800993e:	e002      	b.n	8009946 <_printf_i+0xf2>
 8009940:	0646      	lsls	r6, r0, #25
 8009942:	d5fb      	bpl.n	800993c <_printf_i+0xe8>
 8009944:	881e      	ldrh	r6, [r3, #0]
 8009946:	4854      	ldr	r0, [pc, #336]	; (8009a98 <_printf_i+0x244>)
 8009948:	2f6f      	cmp	r7, #111	; 0x6f
 800994a:	bf0c      	ite	eq
 800994c:	2308      	moveq	r3, #8
 800994e:	230a      	movne	r3, #10
 8009950:	2100      	movs	r1, #0
 8009952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009956:	6865      	ldr	r5, [r4, #4]
 8009958:	60a5      	str	r5, [r4, #8]
 800995a:	2d00      	cmp	r5, #0
 800995c:	bfa2      	ittt	ge
 800995e:	6821      	ldrge	r1, [r4, #0]
 8009960:	f021 0104 	bicge.w	r1, r1, #4
 8009964:	6021      	strge	r1, [r4, #0]
 8009966:	b90e      	cbnz	r6, 800996c <_printf_i+0x118>
 8009968:	2d00      	cmp	r5, #0
 800996a:	d04d      	beq.n	8009a08 <_printf_i+0x1b4>
 800996c:	4615      	mov	r5, r2
 800996e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009972:	fb03 6711 	mls	r7, r3, r1, r6
 8009976:	5dc7      	ldrb	r7, [r0, r7]
 8009978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800997c:	4637      	mov	r7, r6
 800997e:	42bb      	cmp	r3, r7
 8009980:	460e      	mov	r6, r1
 8009982:	d9f4      	bls.n	800996e <_printf_i+0x11a>
 8009984:	2b08      	cmp	r3, #8
 8009986:	d10b      	bne.n	80099a0 <_printf_i+0x14c>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	07de      	lsls	r6, r3, #31
 800998c:	d508      	bpl.n	80099a0 <_printf_i+0x14c>
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	6861      	ldr	r1, [r4, #4]
 8009992:	4299      	cmp	r1, r3
 8009994:	bfde      	ittt	le
 8009996:	2330      	movle	r3, #48	; 0x30
 8009998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800999c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099a0:	1b52      	subs	r2, r2, r5
 80099a2:	6122      	str	r2, [r4, #16]
 80099a4:	f8cd a000 	str.w	sl, [sp]
 80099a8:	464b      	mov	r3, r9
 80099aa:	aa03      	add	r2, sp, #12
 80099ac:	4621      	mov	r1, r4
 80099ae:	4640      	mov	r0, r8
 80099b0:	f7ff fee2 	bl	8009778 <_printf_common>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d14c      	bne.n	8009a52 <_printf_i+0x1fe>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099bc:	b004      	add	sp, #16
 80099be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c2:	4835      	ldr	r0, [pc, #212]	; (8009a98 <_printf_i+0x244>)
 80099c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099c8:	6829      	ldr	r1, [r5, #0]
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80099d0:	6029      	str	r1, [r5, #0]
 80099d2:	061d      	lsls	r5, r3, #24
 80099d4:	d514      	bpl.n	8009a00 <_printf_i+0x1ac>
 80099d6:	07df      	lsls	r7, r3, #31
 80099d8:	bf44      	itt	mi
 80099da:	f043 0320 	orrmi.w	r3, r3, #32
 80099de:	6023      	strmi	r3, [r4, #0]
 80099e0:	b91e      	cbnz	r6, 80099ea <_printf_i+0x196>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f023 0320 	bic.w	r3, r3, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	2310      	movs	r3, #16
 80099ec:	e7b0      	b.n	8009950 <_printf_i+0xfc>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	f043 0320 	orr.w	r3, r3, #32
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	2378      	movs	r3, #120	; 0x78
 80099f8:	4828      	ldr	r0, [pc, #160]	; (8009a9c <_printf_i+0x248>)
 80099fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099fe:	e7e3      	b.n	80099c8 <_printf_i+0x174>
 8009a00:	0659      	lsls	r1, r3, #25
 8009a02:	bf48      	it	mi
 8009a04:	b2b6      	uxthmi	r6, r6
 8009a06:	e7e6      	b.n	80099d6 <_printf_i+0x182>
 8009a08:	4615      	mov	r5, r2
 8009a0a:	e7bb      	b.n	8009984 <_printf_i+0x130>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	6826      	ldr	r6, [r4, #0]
 8009a10:	6961      	ldr	r1, [r4, #20]
 8009a12:	1d18      	adds	r0, r3, #4
 8009a14:	6028      	str	r0, [r5, #0]
 8009a16:	0635      	lsls	r5, r6, #24
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	d501      	bpl.n	8009a20 <_printf_i+0x1cc>
 8009a1c:	6019      	str	r1, [r3, #0]
 8009a1e:	e002      	b.n	8009a26 <_printf_i+0x1d2>
 8009a20:	0670      	lsls	r0, r6, #25
 8009a22:	d5fb      	bpl.n	8009a1c <_printf_i+0x1c8>
 8009a24:	8019      	strh	r1, [r3, #0]
 8009a26:	2300      	movs	r3, #0
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	4615      	mov	r5, r2
 8009a2c:	e7ba      	b.n	80099a4 <_printf_i+0x150>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	1d1a      	adds	r2, r3, #4
 8009a32:	602a      	str	r2, [r5, #0]
 8009a34:	681d      	ldr	r5, [r3, #0]
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7f6 fbe8 	bl	8000210 <memchr>
 8009a40:	b108      	cbz	r0, 8009a46 <_printf_i+0x1f2>
 8009a42:	1b40      	subs	r0, r0, r5
 8009a44:	6060      	str	r0, [r4, #4]
 8009a46:	6863      	ldr	r3, [r4, #4]
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a50:	e7a8      	b.n	80099a4 <_printf_i+0x150>
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	462a      	mov	r2, r5
 8009a56:	4649      	mov	r1, r9
 8009a58:	4640      	mov	r0, r8
 8009a5a:	47d0      	blx	sl
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d0ab      	beq.n	80099b8 <_printf_i+0x164>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	079b      	lsls	r3, r3, #30
 8009a64:	d413      	bmi.n	8009a8e <_printf_i+0x23a>
 8009a66:	68e0      	ldr	r0, [r4, #12]
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	4298      	cmp	r0, r3
 8009a6c:	bfb8      	it	lt
 8009a6e:	4618      	movlt	r0, r3
 8009a70:	e7a4      	b.n	80099bc <_printf_i+0x168>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4632      	mov	r2, r6
 8009a76:	4649      	mov	r1, r9
 8009a78:	4640      	mov	r0, r8
 8009a7a:	47d0      	blx	sl
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d09b      	beq.n	80099b8 <_printf_i+0x164>
 8009a80:	3501      	adds	r5, #1
 8009a82:	68e3      	ldr	r3, [r4, #12]
 8009a84:	9903      	ldr	r1, [sp, #12]
 8009a86:	1a5b      	subs	r3, r3, r1
 8009a88:	42ab      	cmp	r3, r5
 8009a8a:	dcf2      	bgt.n	8009a72 <_printf_i+0x21e>
 8009a8c:	e7eb      	b.n	8009a66 <_printf_i+0x212>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	f104 0619 	add.w	r6, r4, #25
 8009a94:	e7f5      	b.n	8009a82 <_printf_i+0x22e>
 8009a96:	bf00      	nop
 8009a98:	0800afdd 	.word	0x0800afdd
 8009a9c:	0800afee 	.word	0x0800afee

08009aa0 <__sread>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	f000 f894 	bl	8009bd4 <_read_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	bfab      	itete	ge
 8009ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ab4:	181b      	addge	r3, r3, r0
 8009ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aba:	bfac      	ite	ge
 8009abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009abe:	81a3      	strhlt	r3, [r4, #12]
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <__swrite>:
 8009ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	898b      	ldrh	r3, [r1, #12]
 8009aca:	05db      	lsls	r3, r3, #23
 8009acc:	4605      	mov	r5, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	d505      	bpl.n	8009ae0 <__swrite+0x1e>
 8009ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad8:	2302      	movs	r3, #2
 8009ada:	2200      	movs	r2, #0
 8009adc:	f000 f868 	bl	8009bb0 <_lseek_r>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	4628      	mov	r0, r5
 8009af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af6:	f000 b817 	b.w	8009b28 <_write_r>

08009afa <__sseek>:
 8009afa:	b510      	push	{r4, lr}
 8009afc:	460c      	mov	r4, r1
 8009afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b02:	f000 f855 	bl	8009bb0 <_lseek_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	bf15      	itete	ne
 8009b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b16:	81a3      	strheq	r3, [r4, #12]
 8009b18:	bf18      	it	ne
 8009b1a:	81a3      	strhne	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__sclose>:
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 b813 	b.w	8009b4c <_close_r>
	...

08009b28 <_write_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d07      	ldr	r5, [pc, #28]	; (8009b48 <_write_r+0x20>)
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	4608      	mov	r0, r1
 8009b30:	4611      	mov	r1, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	602a      	str	r2, [r5, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f7f8 f825 	bl	8001b86 <_write>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_write_r+0x1e>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_write_r+0x1e>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	2000848c 	.word	0x2000848c

08009b4c <_close_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d06      	ldr	r5, [pc, #24]	; (8009b68 <_close_r+0x1c>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	f7f8 f831 	bl	8001bbe <_close>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_close_r+0x1a>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_close_r+0x1a>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	2000848c 	.word	0x2000848c

08009b6c <_fstat_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	; (8009b8c <_fstat_r+0x20>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f7f8 f82c 	bl	8001bd6 <_fstat>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d102      	bne.n	8009b88 <_fstat_r+0x1c>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b103      	cbz	r3, 8009b88 <_fstat_r+0x1c>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000848c 	.word	0x2000848c

08009b90 <_isatty_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d06      	ldr	r5, [pc, #24]	; (8009bac <_isatty_r+0x1c>)
 8009b94:	2300      	movs	r3, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	f7f8 f82b 	bl	8001bf6 <_isatty>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_isatty_r+0x1a>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_isatty_r+0x1a>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	2000848c 	.word	0x2000848c

08009bb0 <_lseek_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d07      	ldr	r5, [pc, #28]	; (8009bd0 <_lseek_r+0x20>)
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	4611      	mov	r1, r2
 8009bba:	2200      	movs	r2, #0
 8009bbc:	602a      	str	r2, [r5, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f7f8 f824 	bl	8001c0c <_lseek>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_lseek_r+0x1e>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_lseek_r+0x1e>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	2000848c 	.word	0x2000848c

08009bd4 <_read_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d07      	ldr	r5, [pc, #28]	; (8009bf4 <_read_r+0x20>)
 8009bd8:	4604      	mov	r4, r0
 8009bda:	4608      	mov	r0, r1
 8009bdc:	4611      	mov	r1, r2
 8009bde:	2200      	movs	r2, #0
 8009be0:	602a      	str	r2, [r5, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	f7f7 ffb2 	bl	8001b4c <_read>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_read_r+0x1e>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_read_r+0x1e>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	2000848c 	.word	0x2000848c

08009bf8 <pow>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	ed2d 8b02 	vpush	{d8}
 8009bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8009c02:	eef0 8a60 	vmov.f32	s17, s1
 8009c06:	ec55 4b11 	vmov	r4, r5, d1
 8009c0a:	f000 f865 	bl	8009cd8 <__ieee754_pow>
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	ec57 6b10 	vmov	r6, r7, d0
 8009c1a:	f7f6 ff9f 	bl	8000b5c <__aeabi_dcmpun>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d13b      	bne.n	8009c9a <pow+0xa2>
 8009c22:	ec51 0b18 	vmov	r0, r1, d8
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f7f6 ff65 	bl	8000af8 <__aeabi_dcmpeq>
 8009c2e:	b1b8      	cbz	r0, 8009c60 <pow+0x68>
 8009c30:	2200      	movs	r2, #0
 8009c32:	2300      	movs	r3, #0
 8009c34:	4620      	mov	r0, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 ff5e 	bl	8000af8 <__aeabi_dcmpeq>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d146      	bne.n	8009cce <pow+0xd6>
 8009c40:	ec45 4b10 	vmov	d0, r4, r5
 8009c44:	f000 fe61 	bl	800a90a <finite>
 8009c48:	b338      	cbz	r0, 8009c9a <pow+0xa2>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8009c56:	b300      	cbz	r0, 8009c9a <pow+0xa2>
 8009c58:	f7fe ff82 	bl	8008b60 <__errno>
 8009c5c:	2322      	movs	r3, #34	; 0x22
 8009c5e:	e01b      	b.n	8009c98 <pow+0xa0>
 8009c60:	ec47 6b10 	vmov	d0, r6, r7
 8009c64:	f000 fe51 	bl	800a90a <finite>
 8009c68:	b9e0      	cbnz	r0, 8009ca4 <pow+0xac>
 8009c6a:	eeb0 0a48 	vmov.f32	s0, s16
 8009c6e:	eef0 0a68 	vmov.f32	s1, s17
 8009c72:	f000 fe4a 	bl	800a90a <finite>
 8009c76:	b1a8      	cbz	r0, 8009ca4 <pow+0xac>
 8009c78:	ec45 4b10 	vmov	d0, r4, r5
 8009c7c:	f000 fe45 	bl	800a90a <finite>
 8009c80:	b180      	cbz	r0, 8009ca4 <pow+0xac>
 8009c82:	4632      	mov	r2, r6
 8009c84:	463b      	mov	r3, r7
 8009c86:	4630      	mov	r0, r6
 8009c88:	4639      	mov	r1, r7
 8009c8a:	f7f6 ff67 	bl	8000b5c <__aeabi_dcmpun>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d0e2      	beq.n	8009c58 <pow+0x60>
 8009c92:	f7fe ff65 	bl	8008b60 <__errno>
 8009c96:	2321      	movs	r3, #33	; 0x21
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	ecbd 8b02 	vpop	{d8}
 8009c9e:	ec47 6b10 	vmov	d0, r6, r7
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d0f2      	beq.n	8009c9a <pow+0xa2>
 8009cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb8:	eef0 0a68 	vmov.f32	s1, s17
 8009cbc:	f000 fe25 	bl	800a90a <finite>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d0ea      	beq.n	8009c9a <pow+0xa2>
 8009cc4:	ec45 4b10 	vmov	d0, r4, r5
 8009cc8:	f000 fe1f 	bl	800a90a <finite>
 8009ccc:	e7c3      	b.n	8009c56 <pow+0x5e>
 8009cce:	4f01      	ldr	r7, [pc, #4]	; (8009cd4 <pow+0xdc>)
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	e7e2      	b.n	8009c9a <pow+0xa2>
 8009cd4:	3ff00000 	.word	0x3ff00000

08009cd8 <__ieee754_pow>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ed2d 8b06 	vpush	{d8-d10}
 8009ce0:	b089      	sub	sp, #36	; 0x24
 8009ce2:	ed8d 1b00 	vstr	d1, [sp]
 8009ce6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009cea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009cee:	ea58 0102 	orrs.w	r1, r8, r2
 8009cf2:	ec57 6b10 	vmov	r6, r7, d0
 8009cf6:	d115      	bne.n	8009d24 <__ieee754_pow+0x4c>
 8009cf8:	19b3      	adds	r3, r6, r6
 8009cfa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009cfe:	4152      	adcs	r2, r2
 8009d00:	4299      	cmp	r1, r3
 8009d02:	4b89      	ldr	r3, [pc, #548]	; (8009f28 <__ieee754_pow+0x250>)
 8009d04:	4193      	sbcs	r3, r2
 8009d06:	f080 84d2 	bcs.w	800a6ae <__ieee754_pow+0x9d6>
 8009d0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fad3 	bl	80002bc <__adddf3>
 8009d16:	ec41 0b10 	vmov	d0, r0, r1
 8009d1a:	b009      	add	sp, #36	; 0x24
 8009d1c:	ecbd 8b06 	vpop	{d8-d10}
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	4b81      	ldr	r3, [pc, #516]	; (8009f2c <__ieee754_pow+0x254>)
 8009d26:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	ee10 aa10 	vmov	sl, s0
 8009d30:	463d      	mov	r5, r7
 8009d32:	dc06      	bgt.n	8009d42 <__ieee754_pow+0x6a>
 8009d34:	d101      	bne.n	8009d3a <__ieee754_pow+0x62>
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d1e7      	bne.n	8009d0a <__ieee754_pow+0x32>
 8009d3a:	4598      	cmp	r8, r3
 8009d3c:	dc01      	bgt.n	8009d42 <__ieee754_pow+0x6a>
 8009d3e:	d10f      	bne.n	8009d60 <__ieee754_pow+0x88>
 8009d40:	b172      	cbz	r2, 8009d60 <__ieee754_pow+0x88>
 8009d42:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009d46:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009d4a:	ea55 050a 	orrs.w	r5, r5, sl
 8009d4e:	d1dc      	bne.n	8009d0a <__ieee754_pow+0x32>
 8009d50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d54:	18db      	adds	r3, r3, r3
 8009d56:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009d5a:	4152      	adcs	r2, r2
 8009d5c:	429d      	cmp	r5, r3
 8009d5e:	e7d0      	b.n	8009d02 <__ieee754_pow+0x2a>
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	da3b      	bge.n	8009ddc <__ieee754_pow+0x104>
 8009d64:	4b72      	ldr	r3, [pc, #456]	; (8009f30 <__ieee754_pow+0x258>)
 8009d66:	4598      	cmp	r8, r3
 8009d68:	dc51      	bgt.n	8009e0e <__ieee754_pow+0x136>
 8009d6a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009d6e:	4598      	cmp	r8, r3
 8009d70:	f340 84ac 	ble.w	800a6cc <__ieee754_pow+0x9f4>
 8009d74:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009d78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d7c:	2b14      	cmp	r3, #20
 8009d7e:	dd0f      	ble.n	8009da0 <__ieee754_pow+0xc8>
 8009d80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009d84:	fa22 f103 	lsr.w	r1, r2, r3
 8009d88:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	f040 849d 	bne.w	800a6cc <__ieee754_pow+0x9f4>
 8009d92:	f001 0101 	and.w	r1, r1, #1
 8009d96:	f1c1 0302 	rsb	r3, r1, #2
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	b182      	cbz	r2, 8009dc0 <__ieee754_pow+0xe8>
 8009d9e:	e05f      	b.n	8009e60 <__ieee754_pow+0x188>
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	d15b      	bne.n	8009e5c <__ieee754_pow+0x184>
 8009da4:	f1c3 0314 	rsb	r3, r3, #20
 8009da8:	fa48 f103 	asr.w	r1, r8, r3
 8009dac:	fa01 f303 	lsl.w	r3, r1, r3
 8009db0:	4543      	cmp	r3, r8
 8009db2:	f040 8488 	bne.w	800a6c6 <__ieee754_pow+0x9ee>
 8009db6:	f001 0101 	and.w	r1, r1, #1
 8009dba:	f1c1 0302 	rsb	r3, r1, #2
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	4b5c      	ldr	r3, [pc, #368]	; (8009f34 <__ieee754_pow+0x25c>)
 8009dc2:	4598      	cmp	r8, r3
 8009dc4:	d132      	bne.n	8009e2c <__ieee754_pow+0x154>
 8009dc6:	f1b9 0f00 	cmp.w	r9, #0
 8009dca:	f280 8478 	bge.w	800a6be <__ieee754_pow+0x9e6>
 8009dce:	4959      	ldr	r1, [pc, #356]	; (8009f34 <__ieee754_pow+0x25c>)
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	f7f6 fd51 	bl	800087c <__aeabi_ddiv>
 8009dda:	e79c      	b.n	8009d16 <__ieee754_pow+0x3e>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d13d      	bne.n	8009e60 <__ieee754_pow+0x188>
 8009de4:	4b51      	ldr	r3, [pc, #324]	; (8009f2c <__ieee754_pow+0x254>)
 8009de6:	4598      	cmp	r8, r3
 8009de8:	d1ea      	bne.n	8009dc0 <__ieee754_pow+0xe8>
 8009dea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009dee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009df2:	ea53 030a 	orrs.w	r3, r3, sl
 8009df6:	f000 845a 	beq.w	800a6ae <__ieee754_pow+0x9d6>
 8009dfa:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <__ieee754_pow+0x260>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	dd08      	ble.n	8009e12 <__ieee754_pow+0x13a>
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	f2c0 8457 	blt.w	800a6b6 <__ieee754_pow+0x9de>
 8009e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e0c:	e783      	b.n	8009d16 <__ieee754_pow+0x3e>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e7e5      	b.n	8009dde <__ieee754_pow+0x106>
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	f04f 0000 	mov.w	r0, #0
 8009e1a:	f04f 0100 	mov.w	r1, #0
 8009e1e:	f6bf af7a 	bge.w	8009d16 <__ieee754_pow+0x3e>
 8009e22:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009e26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e2a:	e774      	b.n	8009d16 <__ieee754_pow+0x3e>
 8009e2c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009e30:	d106      	bne.n	8009e40 <__ieee754_pow+0x168>
 8009e32:	4632      	mov	r2, r6
 8009e34:	463b      	mov	r3, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 fbf5 	bl	8000628 <__aeabi_dmul>
 8009e3e:	e76a      	b.n	8009d16 <__ieee754_pow+0x3e>
 8009e40:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <__ieee754_pow+0x264>)
 8009e42:	4599      	cmp	r9, r3
 8009e44:	d10c      	bne.n	8009e60 <__ieee754_pow+0x188>
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	db0a      	blt.n	8009e60 <__ieee754_pow+0x188>
 8009e4a:	ec47 6b10 	vmov	d0, r6, r7
 8009e4e:	b009      	add	sp, #36	; 0x24
 8009e50:	ecbd 8b06 	vpop	{d8-d10}
 8009e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	f000 bc6c 	b.w	800a734 <__ieee754_sqrt>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	ec47 6b10 	vmov	d0, r6, r7
 8009e64:	f000 fd48 	bl	800a8f8 <fabs>
 8009e68:	ec51 0b10 	vmov	r0, r1, d0
 8009e6c:	f1ba 0f00 	cmp.w	sl, #0
 8009e70:	d129      	bne.n	8009ec6 <__ieee754_pow+0x1ee>
 8009e72:	b124      	cbz	r4, 8009e7e <__ieee754_pow+0x1a6>
 8009e74:	4b2f      	ldr	r3, [pc, #188]	; (8009f34 <__ieee754_pow+0x25c>)
 8009e76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d123      	bne.n	8009ec6 <__ieee754_pow+0x1ee>
 8009e7e:	f1b9 0f00 	cmp.w	r9, #0
 8009e82:	da05      	bge.n	8009e90 <__ieee754_pow+0x1b8>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	2000      	movs	r0, #0
 8009e8a:	492a      	ldr	r1, [pc, #168]	; (8009f34 <__ieee754_pow+0x25c>)
 8009e8c:	f7f6 fcf6 	bl	800087c <__aeabi_ddiv>
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	f6bf af40 	bge.w	8009d16 <__ieee754_pow+0x3e>
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ea0:	4323      	orrs	r3, r4
 8009ea2:	d108      	bne.n	8009eb6 <__ieee754_pow+0x1de>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	f7f6 fa04 	bl	80002b8 <__aeabi_dsub>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	e78f      	b.n	8009dd6 <__ieee754_pow+0xfe>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	f47f af2c 	bne.w	8009d16 <__ieee754_pow+0x3e>
 8009ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	e727      	b.n	8009d16 <__ieee754_pow+0x3e>
 8009ec6:	0feb      	lsrs	r3, r5, #31
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	9306      	str	r3, [sp, #24]
 8009ecc:	9a06      	ldr	r2, [sp, #24]
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d102      	bne.n	8009eda <__ieee754_pow+0x202>
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	e7e6      	b.n	8009ea8 <__ieee754_pow+0x1d0>
 8009eda:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <__ieee754_pow+0x268>)
 8009edc:	4598      	cmp	r8, r3
 8009ede:	f340 80fb 	ble.w	800a0d8 <__ieee754_pow+0x400>
 8009ee2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009ee6:	4598      	cmp	r8, r3
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <__ieee754_pow+0x260>)
 8009eea:	dd0c      	ble.n	8009f06 <__ieee754_pow+0x22e>
 8009eec:	429c      	cmp	r4, r3
 8009eee:	dc0f      	bgt.n	8009f10 <__ieee754_pow+0x238>
 8009ef0:	f1b9 0f00 	cmp.w	r9, #0
 8009ef4:	da0f      	bge.n	8009f16 <__ieee754_pow+0x23e>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	b009      	add	sp, #36	; 0x24
 8009efa:	ecbd 8b06 	vpop	{d8-d10}
 8009efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f02:	f000 bcf0 	b.w	800a8e6 <__math_oflow>
 8009f06:	429c      	cmp	r4, r3
 8009f08:	dbf2      	blt.n	8009ef0 <__ieee754_pow+0x218>
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <__ieee754_pow+0x25c>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	dd19      	ble.n	8009f44 <__ieee754_pow+0x26c>
 8009f10:	f1b9 0f00 	cmp.w	r9, #0
 8009f14:	dcef      	bgt.n	8009ef6 <__ieee754_pow+0x21e>
 8009f16:	2000      	movs	r0, #0
 8009f18:	b009      	add	sp, #36	; 0x24
 8009f1a:	ecbd 8b06 	vpop	{d8-d10}
 8009f1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f22:	f000 bcd7 	b.w	800a8d4 <__math_uflow>
 8009f26:	bf00      	nop
 8009f28:	fff00000 	.word	0xfff00000
 8009f2c:	7ff00000 	.word	0x7ff00000
 8009f30:	433fffff 	.word	0x433fffff
 8009f34:	3ff00000 	.word	0x3ff00000
 8009f38:	3fefffff 	.word	0x3fefffff
 8009f3c:	3fe00000 	.word	0x3fe00000
 8009f40:	41e00000 	.word	0x41e00000
 8009f44:	4b60      	ldr	r3, [pc, #384]	; (800a0c8 <__ieee754_pow+0x3f0>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	f7f6 f9b6 	bl	80002b8 <__aeabi_dsub>
 8009f4c:	a354      	add	r3, pc, #336	; (adr r3, 800a0a0 <__ieee754_pow+0x3c8>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	f7f6 fb67 	bl	8000628 <__aeabi_dmul>
 8009f5a:	a353      	add	r3, pc, #332	; (adr r3, 800a0a8 <__ieee754_pow+0x3d0>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	4606      	mov	r6, r0
 8009f62:	460f      	mov	r7, r1
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 fb5e 	bl	8000628 <__aeabi_dmul>
 8009f6c:	4b57      	ldr	r3, [pc, #348]	; (800a0cc <__ieee754_pow+0x3f4>)
 8009f6e:	4682      	mov	sl, r0
 8009f70:	468b      	mov	fp, r1
 8009f72:	2200      	movs	r2, #0
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fb56 	bl	8000628 <__aeabi_dmul>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	a14b      	add	r1, pc, #300	; (adr r1, 800a0b0 <__ieee754_pow+0x3d8>)
 8009f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f86:	f7f6 f997 	bl	80002b8 <__aeabi_dsub>
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	f7f6 fb4b 	bl	8000628 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	2000      	movs	r0, #0
 8009f98:	494d      	ldr	r1, [pc, #308]	; (800a0d0 <__ieee754_pow+0x3f8>)
 8009f9a:	f7f6 f98d 	bl	80002b8 <__aeabi_dsub>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	4689      	mov	r9, r1
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 fb3d 	bl	8000628 <__aeabi_dmul>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	f7f6 fb37 	bl	8000628 <__aeabi_dmul>
 8009fba:	a33f      	add	r3, pc, #252	; (adr r3, 800a0b8 <__ieee754_pow+0x3e0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 fb32 	bl	8000628 <__aeabi_dmul>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4650      	mov	r0, sl
 8009fca:	4659      	mov	r1, fp
 8009fcc:	f7f6 f974 	bl	80002b8 <__aeabi_dsub>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	4689      	mov	r9, r1
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 f96e 	bl	80002bc <__adddf3>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	4632      	mov	r2, r6
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	f7f6 f965 	bl	80002b8 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	f7f6 f95f 	bl	80002b8 <__aeabi_dsub>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	9a06      	ldr	r2, [sp, #24]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	4313      	orrs	r3, r2
 800a002:	4682      	mov	sl, r0
 800a004:	468b      	mov	fp, r1
 800a006:	f040 81e7 	bne.w	800a3d8 <__ieee754_pow+0x700>
 800a00a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a0c0 <__ieee754_pow+0x3e8>
 800a00e:	eeb0 8a47 	vmov.f32	s16, s14
 800a012:	eef0 8a67 	vmov.f32	s17, s15
 800a016:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a01a:	2600      	movs	r6, #0
 800a01c:	4632      	mov	r2, r6
 800a01e:	463b      	mov	r3, r7
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 f948 	bl	80002b8 <__aeabi_dsub>
 800a028:	4622      	mov	r2, r4
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 fafc 	bl	8000628 <__aeabi_dmul>
 800a030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	4650      	mov	r0, sl
 800a03a:	4659      	mov	r1, fp
 800a03c:	f7f6 faf4 	bl	8000628 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 f938 	bl	80002bc <__adddf3>
 800a04c:	4632      	mov	r2, r6
 800a04e:	463b      	mov	r3, r7
 800a050:	4680      	mov	r8, r0
 800a052:	4689      	mov	r9, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fae6 	bl	8000628 <__aeabi_dmul>
 800a05c:	460b      	mov	r3, r1
 800a05e:	4604      	mov	r4, r0
 800a060:	460d      	mov	r5, r1
 800a062:	4602      	mov	r2, r0
 800a064:	4649      	mov	r1, r9
 800a066:	4640      	mov	r0, r8
 800a068:	f7f6 f928 	bl	80002bc <__adddf3>
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <__ieee754_pow+0x3fc>)
 800a06e:	4299      	cmp	r1, r3
 800a070:	ec45 4b19 	vmov	d9, r4, r5
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	468b      	mov	fp, r1
 800a07a:	f340 82f1 	ble.w	800a660 <__ieee754_pow+0x988>
 800a07e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a082:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a086:	4303      	orrs	r3, r0
 800a088:	f000 81e4 	beq.w	800a454 <__ieee754_pow+0x77c>
 800a08c:	ec51 0b18 	vmov	r0, r1, d8
 800a090:	2200      	movs	r2, #0
 800a092:	2300      	movs	r3, #0
 800a094:	f7f6 fd3a 	bl	8000b0c <__aeabi_dcmplt>
 800a098:	3800      	subs	r0, #0
 800a09a:	bf18      	it	ne
 800a09c:	2001      	movne	r0, #1
 800a09e:	e72b      	b.n	8009ef8 <__ieee754_pow+0x220>
 800a0a0:	60000000 	.word	0x60000000
 800a0a4:	3ff71547 	.word	0x3ff71547
 800a0a8:	f85ddf44 	.word	0xf85ddf44
 800a0ac:	3e54ae0b 	.word	0x3e54ae0b
 800a0b0:	55555555 	.word	0x55555555
 800a0b4:	3fd55555 	.word	0x3fd55555
 800a0b8:	652b82fe 	.word	0x652b82fe
 800a0bc:	3ff71547 	.word	0x3ff71547
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	bff00000 	.word	0xbff00000
 800a0c8:	3ff00000 	.word	0x3ff00000
 800a0cc:	3fd00000 	.word	0x3fd00000
 800a0d0:	3fe00000 	.word	0x3fe00000
 800a0d4:	408fffff 	.word	0x408fffff
 800a0d8:	4bd5      	ldr	r3, [pc, #852]	; (800a430 <__ieee754_pow+0x758>)
 800a0da:	402b      	ands	r3, r5
 800a0dc:	2200      	movs	r2, #0
 800a0de:	b92b      	cbnz	r3, 800a0ec <__ieee754_pow+0x414>
 800a0e0:	4bd4      	ldr	r3, [pc, #848]	; (800a434 <__ieee754_pow+0x75c>)
 800a0e2:	f7f6 faa1 	bl	8000628 <__aeabi_dmul>
 800a0e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	1523      	asrs	r3, r4, #20
 800a0ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0f2:	4413      	add	r3, r2
 800a0f4:	9305      	str	r3, [sp, #20]
 800a0f6:	4bd0      	ldr	r3, [pc, #832]	; (800a438 <__ieee754_pow+0x760>)
 800a0f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a0fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a100:	429c      	cmp	r4, r3
 800a102:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a106:	dd08      	ble.n	800a11a <__ieee754_pow+0x442>
 800a108:	4bcc      	ldr	r3, [pc, #816]	; (800a43c <__ieee754_pow+0x764>)
 800a10a:	429c      	cmp	r4, r3
 800a10c:	f340 8162 	ble.w	800a3d4 <__ieee754_pow+0x6fc>
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	3301      	adds	r3, #1
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a11a:	2400      	movs	r4, #0
 800a11c:	00e3      	lsls	r3, r4, #3
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	4bc7      	ldr	r3, [pc, #796]	; (800a440 <__ieee754_pow+0x768>)
 800a122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a126:	ed93 7b00 	vldr	d7, [r3]
 800a12a:	4629      	mov	r1, r5
 800a12c:	ec53 2b17 	vmov	r2, r3, d7
 800a130:	eeb0 9a47 	vmov.f32	s18, s14
 800a134:	eef0 9a67 	vmov.f32	s19, s15
 800a138:	4682      	mov	sl, r0
 800a13a:	f7f6 f8bd 	bl	80002b8 <__aeabi_dsub>
 800a13e:	4652      	mov	r2, sl
 800a140:	4606      	mov	r6, r0
 800a142:	460f      	mov	r7, r1
 800a144:	462b      	mov	r3, r5
 800a146:	ec51 0b19 	vmov	r0, r1, d9
 800a14a:	f7f6 f8b7 	bl	80002bc <__adddf3>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	2000      	movs	r0, #0
 800a154:	49bb      	ldr	r1, [pc, #748]	; (800a444 <__ieee754_pow+0x76c>)
 800a156:	f7f6 fb91 	bl	800087c <__aeabi_ddiv>
 800a15a:	ec41 0b1a 	vmov	d10, r0, r1
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fa5f 	bl	8000628 <__aeabi_dmul>
 800a16a:	2300      	movs	r3, #0
 800a16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a176:	46ab      	mov	fp, r5
 800a178:	106d      	asrs	r5, r5, #1
 800a17a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a17e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a182:	ec41 0b18 	vmov	d8, r0, r1
 800a186:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a18a:	2200      	movs	r2, #0
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	4614      	mov	r4, r2
 800a192:	461d      	mov	r5, r3
 800a194:	f7f6 fa48 	bl	8000628 <__aeabi_dmul>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 f88a 	bl	80002b8 <__aeabi_dsub>
 800a1a4:	ec53 2b19 	vmov	r2, r3, d9
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f882 	bl	80002b8 <__aeabi_dsub>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	f7f6 f87c 	bl	80002b8 <__aeabi_dsub>
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	f7f6 fa30 	bl	8000628 <__aeabi_dmul>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 f872 	bl	80002b8 <__aeabi_dsub>
 800a1d4:	ec53 2b1a 	vmov	r2, r3, d10
 800a1d8:	f7f6 fa26 	bl	8000628 <__aeabi_dmul>
 800a1dc:	ec53 2b18 	vmov	r2, r3, d8
 800a1e0:	ec41 0b19 	vmov	d9, r0, r1
 800a1e4:	ec51 0b18 	vmov	r0, r1, d8
 800a1e8:	f7f6 fa1e 	bl	8000628 <__aeabi_dmul>
 800a1ec:	a37c      	add	r3, pc, #496	; (adr r3, 800a3e0 <__ieee754_pow+0x708>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	f7f6 fa17 	bl	8000628 <__aeabi_dmul>
 800a1fa:	a37b      	add	r3, pc, #492	; (adr r3, 800a3e8 <__ieee754_pow+0x710>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 f85c 	bl	80002bc <__adddf3>
 800a204:	4622      	mov	r2, r4
 800a206:	462b      	mov	r3, r5
 800a208:	f7f6 fa0e 	bl	8000628 <__aeabi_dmul>
 800a20c:	a378      	add	r3, pc, #480	; (adr r3, 800a3f0 <__ieee754_pow+0x718>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f853 	bl	80002bc <__adddf3>
 800a216:	4622      	mov	r2, r4
 800a218:	462b      	mov	r3, r5
 800a21a:	f7f6 fa05 	bl	8000628 <__aeabi_dmul>
 800a21e:	a376      	add	r3, pc, #472	; (adr r3, 800a3f8 <__ieee754_pow+0x720>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f84a 	bl	80002bc <__adddf3>
 800a228:	4622      	mov	r2, r4
 800a22a:	462b      	mov	r3, r5
 800a22c:	f7f6 f9fc 	bl	8000628 <__aeabi_dmul>
 800a230:	a373      	add	r3, pc, #460	; (adr r3, 800a400 <__ieee754_pow+0x728>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 f841 	bl	80002bc <__adddf3>
 800a23a:	4622      	mov	r2, r4
 800a23c:	462b      	mov	r3, r5
 800a23e:	f7f6 f9f3 	bl	8000628 <__aeabi_dmul>
 800a242:	a371      	add	r3, pc, #452	; (adr r3, 800a408 <__ieee754_pow+0x730>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 f838 	bl	80002bc <__adddf3>
 800a24c:	4622      	mov	r2, r4
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	462b      	mov	r3, r5
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	f7f6 f9e6 	bl	8000628 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 f9e0 	bl	8000628 <__aeabi_dmul>
 800a268:	4642      	mov	r2, r8
 800a26a:	4604      	mov	r4, r0
 800a26c:	460d      	mov	r5, r1
 800a26e:	464b      	mov	r3, r9
 800a270:	ec51 0b18 	vmov	r0, r1, d8
 800a274:	f7f6 f822 	bl	80002bc <__adddf3>
 800a278:	ec53 2b19 	vmov	r2, r3, d9
 800a27c:	f7f6 f9d4 	bl	8000628 <__aeabi_dmul>
 800a280:	4622      	mov	r2, r4
 800a282:	462b      	mov	r3, r5
 800a284:	f7f6 f81a 	bl	80002bc <__adddf3>
 800a288:	4642      	mov	r2, r8
 800a28a:	4682      	mov	sl, r0
 800a28c:	468b      	mov	fp, r1
 800a28e:	464b      	mov	r3, r9
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f9c8 	bl	8000628 <__aeabi_dmul>
 800a298:	4b6b      	ldr	r3, [pc, #428]	; (800a448 <__ieee754_pow+0x770>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	4606      	mov	r6, r0
 800a29e:	460f      	mov	r7, r1
 800a2a0:	f7f6 f80c 	bl	80002bc <__adddf3>
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	465b      	mov	r3, fp
 800a2a8:	f7f6 f808 	bl	80002bc <__adddf3>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 f9b5 	bl	8000628 <__aeabi_dmul>
 800a2be:	4b62      	ldr	r3, [pc, #392]	; (800a448 <__ieee754_pow+0x770>)
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f5 fff5 	bl	80002b8 <__aeabi_dsub>
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	463b      	mov	r3, r7
 800a2d2:	f7f5 fff1 	bl	80002b8 <__aeabi_dsub>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4650      	mov	r0, sl
 800a2dc:	4659      	mov	r1, fp
 800a2de:	f7f5 ffeb 	bl	80002b8 <__aeabi_dsub>
 800a2e2:	ec53 2b18 	vmov	r2, r3, d8
 800a2e6:	f7f6 f99f 	bl	8000628 <__aeabi_dmul>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	ec51 0b19 	vmov	r0, r1, d9
 800a2f6:	f7f6 f997 	bl	8000628 <__aeabi_dmul>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f5 ffdb 	bl	80002bc <__adddf3>
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f5 ffd3 	bl	80002bc <__adddf3>
 800a316:	a33e      	add	r3, pc, #248	; (adr r3, 800a410 <__ieee754_pow+0x738>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	2000      	movs	r0, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	f7f6 f981 	bl	8000628 <__aeabi_dmul>
 800a326:	4642      	mov	r2, r8
 800a328:	ec41 0b18 	vmov	d8, r0, r1
 800a32c:	464b      	mov	r3, r9
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f5 ffc1 	bl	80002b8 <__aeabi_dsub>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ffbb 	bl	80002b8 <__aeabi_dsub>
 800a342:	a335      	add	r3, pc, #212	; (adr r3, 800a418 <__ieee754_pow+0x740>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f96e 	bl	8000628 <__aeabi_dmul>
 800a34c:	a334      	add	r3, pc, #208	; (adr r3, 800a420 <__ieee754_pow+0x748>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	4606      	mov	r6, r0
 800a354:	460f      	mov	r7, r1
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f6 f965 	bl	8000628 <__aeabi_dmul>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4630      	mov	r0, r6
 800a364:	4639      	mov	r1, r7
 800a366:	f7f5 ffa9 	bl	80002bc <__adddf3>
 800a36a:	9a07      	ldr	r2, [sp, #28]
 800a36c:	4b37      	ldr	r3, [pc, #220]	; (800a44c <__ieee754_pow+0x774>)
 800a36e:	4413      	add	r3, r2
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ffa2 	bl	80002bc <__adddf3>
 800a378:	4682      	mov	sl, r0
 800a37a:	9805      	ldr	r0, [sp, #20]
 800a37c:	468b      	mov	fp, r1
 800a37e:	f7f6 f8e9 	bl	8000554 <__aeabi_i2d>
 800a382:	9a07      	ldr	r2, [sp, #28]
 800a384:	4b32      	ldr	r3, [pc, #200]	; (800a450 <__ieee754_pow+0x778>)
 800a386:	4413      	add	r3, r2
 800a388:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a38c:	4606      	mov	r6, r0
 800a38e:	460f      	mov	r7, r1
 800a390:	4652      	mov	r2, sl
 800a392:	465b      	mov	r3, fp
 800a394:	ec51 0b18 	vmov	r0, r1, d8
 800a398:	f7f5 ff90 	bl	80002bc <__adddf3>
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	f7f5 ff8c 	bl	80002bc <__adddf3>
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	f7f5 ff88 	bl	80002bc <__adddf3>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	f7f5 ff7f 	bl	80002b8 <__aeabi_dsub>
 800a3ba:	4642      	mov	r2, r8
 800a3bc:	464b      	mov	r3, r9
 800a3be:	f7f5 ff7b 	bl	80002b8 <__aeabi_dsub>
 800a3c2:	ec53 2b18 	vmov	r2, r3, d8
 800a3c6:	f7f5 ff77 	bl	80002b8 <__aeabi_dsub>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	e610      	b.n	8009ff6 <__ieee754_pow+0x31e>
 800a3d4:	2401      	movs	r4, #1
 800a3d6:	e6a1      	b.n	800a11c <__ieee754_pow+0x444>
 800a3d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a428 <__ieee754_pow+0x750>
 800a3dc:	e617      	b.n	800a00e <__ieee754_pow+0x336>
 800a3de:	bf00      	nop
 800a3e0:	4a454eef 	.word	0x4a454eef
 800a3e4:	3fca7e28 	.word	0x3fca7e28
 800a3e8:	93c9db65 	.word	0x93c9db65
 800a3ec:	3fcd864a 	.word	0x3fcd864a
 800a3f0:	a91d4101 	.word	0xa91d4101
 800a3f4:	3fd17460 	.word	0x3fd17460
 800a3f8:	518f264d 	.word	0x518f264d
 800a3fc:	3fd55555 	.word	0x3fd55555
 800a400:	db6fabff 	.word	0xdb6fabff
 800a404:	3fdb6db6 	.word	0x3fdb6db6
 800a408:	33333303 	.word	0x33333303
 800a40c:	3fe33333 	.word	0x3fe33333
 800a410:	e0000000 	.word	0xe0000000
 800a414:	3feec709 	.word	0x3feec709
 800a418:	dc3a03fd 	.word	0xdc3a03fd
 800a41c:	3feec709 	.word	0x3feec709
 800a420:	145b01f5 	.word	0x145b01f5
 800a424:	be3e2fe0 	.word	0xbe3e2fe0
 800a428:	00000000 	.word	0x00000000
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	43400000 	.word	0x43400000
 800a438:	0003988e 	.word	0x0003988e
 800a43c:	000bb679 	.word	0x000bb679
 800a440:	0800b000 	.word	0x0800b000
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	40080000 	.word	0x40080000
 800a44c:	0800b020 	.word	0x0800b020
 800a450:	0800b010 	.word	0x0800b010
 800a454:	a3b5      	add	r3, pc, #724	; (adr r3, 800a72c <__ieee754_pow+0xa54>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 ff2d 	bl	80002bc <__adddf3>
 800a462:	4622      	mov	r2, r4
 800a464:	ec41 0b1a 	vmov	d10, r0, r1
 800a468:	462b      	mov	r3, r5
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f5 ff23 	bl	80002b8 <__aeabi_dsub>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	ec51 0b1a 	vmov	r0, r1, d10
 800a47a:	f7f6 fb65 	bl	8000b48 <__aeabi_dcmpgt>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f47f ae04 	bne.w	800a08c <__ieee754_pow+0x3b4>
 800a484:	4aa4      	ldr	r2, [pc, #656]	; (800a718 <__ieee754_pow+0xa40>)
 800a486:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a48a:	4293      	cmp	r3, r2
 800a48c:	f340 8108 	ble.w	800a6a0 <__ieee754_pow+0x9c8>
 800a490:	151b      	asrs	r3, r3, #20
 800a492:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a496:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a49a:	fa4a f303 	asr.w	r3, sl, r3
 800a49e:	445b      	add	r3, fp
 800a4a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a4a4:	4e9d      	ldr	r6, [pc, #628]	; (800a71c <__ieee754_pow+0xa44>)
 800a4a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a4aa:	4116      	asrs	r6, r2
 800a4ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	ea23 0106 	bic.w	r1, r3, r6
 800a4b6:	f1c2 0214 	rsb	r2, r2, #20
 800a4ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a4be:	fa4a fa02 	asr.w	sl, sl, r2
 800a4c2:	f1bb 0f00 	cmp.w	fp, #0
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	bfb8      	it	lt
 800a4d0:	f1ca 0a00 	rsblt	sl, sl, #0
 800a4d4:	f7f5 fef0 	bl	80002b8 <__aeabi_dsub>
 800a4d8:	ec41 0b19 	vmov	d9, r0, r1
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	ec51 0b19 	vmov	r0, r1, d9
 800a4e4:	f7f5 feea 	bl	80002bc <__adddf3>
 800a4e8:	a37b      	add	r3, pc, #492	; (adr r3, 800a6d8 <__ieee754_pow+0xa00>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	f7f6 f898 	bl	8000628 <__aeabi_dmul>
 800a4f8:	ec53 2b19 	vmov	r2, r3, d9
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	4620      	mov	r0, r4
 800a502:	4629      	mov	r1, r5
 800a504:	f7f5 fed8 	bl	80002b8 <__aeabi_dsub>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7f5 fed2 	bl	80002b8 <__aeabi_dsub>
 800a514:	a372      	add	r3, pc, #456	; (adr r3, 800a6e0 <__ieee754_pow+0xa08>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f7f6 f885 	bl	8000628 <__aeabi_dmul>
 800a51e:	a372      	add	r3, pc, #456	; (adr r3, 800a6e8 <__ieee754_pow+0xa10>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	4680      	mov	r8, r0
 800a526:	4689      	mov	r9, r1
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	f7f6 f87c 	bl	8000628 <__aeabi_dmul>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4640      	mov	r0, r8
 800a536:	4649      	mov	r1, r9
 800a538:	f7f5 fec0 	bl	80002bc <__adddf3>
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f5 feb8 	bl	80002bc <__adddf3>
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	4680      	mov	r8, r0
 800a552:	4689      	mov	r9, r1
 800a554:	f7f5 feb0 	bl	80002b8 <__aeabi_dsub>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 feaa 	bl	80002b8 <__aeabi_dsub>
 800a564:	4642      	mov	r2, r8
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	464b      	mov	r3, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	4649      	mov	r1, r9
 800a570:	f7f6 f85a 	bl	8000628 <__aeabi_dmul>
 800a574:	a35e      	add	r3, pc, #376	; (adr r3, 800a6f0 <__ieee754_pow+0xa18>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	4604      	mov	r4, r0
 800a57c:	460d      	mov	r5, r1
 800a57e:	f7f6 f853 	bl	8000628 <__aeabi_dmul>
 800a582:	a35d      	add	r3, pc, #372	; (adr r3, 800a6f8 <__ieee754_pow+0xa20>)
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f7f5 fe96 	bl	80002b8 <__aeabi_dsub>
 800a58c:	4622      	mov	r2, r4
 800a58e:	462b      	mov	r3, r5
 800a590:	f7f6 f84a 	bl	8000628 <__aeabi_dmul>
 800a594:	a35a      	add	r3, pc, #360	; (adr r3, 800a700 <__ieee754_pow+0xa28>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f7f5 fe8f 	bl	80002bc <__adddf3>
 800a59e:	4622      	mov	r2, r4
 800a5a0:	462b      	mov	r3, r5
 800a5a2:	f7f6 f841 	bl	8000628 <__aeabi_dmul>
 800a5a6:	a358      	add	r3, pc, #352	; (adr r3, 800a708 <__ieee754_pow+0xa30>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fe84 	bl	80002b8 <__aeabi_dsub>
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	f7f6 f838 	bl	8000628 <__aeabi_dmul>
 800a5b8:	a355      	add	r3, pc, #340	; (adr r3, 800a710 <__ieee754_pow+0xa38>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f5 fe7d 	bl	80002bc <__adddf3>
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	462b      	mov	r3, r5
 800a5c6:	f7f6 f82f 	bl	8000628 <__aeabi_dmul>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f5 fe71 	bl	80002b8 <__aeabi_dsub>
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	460d      	mov	r5, r1
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f7f6 f821 	bl	8000628 <__aeabi_dmul>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	ec41 0b19 	vmov	d9, r0, r1
 800a5ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fe60 	bl	80002b8 <__aeabi_dsub>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	ec51 0b19 	vmov	r0, r1, d9
 800a600:	f7f6 f93c 	bl	800087c <__aeabi_ddiv>
 800a604:	4632      	mov	r2, r6
 800a606:	4604      	mov	r4, r0
 800a608:	460d      	mov	r5, r1
 800a60a:	463b      	mov	r3, r7
 800a60c:	4640      	mov	r0, r8
 800a60e:	4649      	mov	r1, r9
 800a610:	f7f6 f80a 	bl	8000628 <__aeabi_dmul>
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	f7f5 fe50 	bl	80002bc <__adddf3>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4620      	mov	r0, r4
 800a622:	4629      	mov	r1, r5
 800a624:	f7f5 fe48 	bl	80002b8 <__aeabi_dsub>
 800a628:	4642      	mov	r2, r8
 800a62a:	464b      	mov	r3, r9
 800a62c:	f7f5 fe44 	bl	80002b8 <__aeabi_dsub>
 800a630:	460b      	mov	r3, r1
 800a632:	4602      	mov	r2, r0
 800a634:	493a      	ldr	r1, [pc, #232]	; (800a720 <__ieee754_pow+0xa48>)
 800a636:	2000      	movs	r0, #0
 800a638:	f7f5 fe3e 	bl	80002b8 <__aeabi_dsub>
 800a63c:	ec41 0b10 	vmov	d0, r0, r1
 800a640:	ee10 3a90 	vmov	r3, s1
 800a644:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64c:	da2b      	bge.n	800a6a6 <__ieee754_pow+0x9ce>
 800a64e:	4650      	mov	r0, sl
 800a650:	f000 f966 	bl	800a920 <scalbn>
 800a654:	ec51 0b10 	vmov	r0, r1, d0
 800a658:	ec53 2b18 	vmov	r2, r3, d8
 800a65c:	f7ff bbed 	b.w	8009e3a <__ieee754_pow+0x162>
 800a660:	4b30      	ldr	r3, [pc, #192]	; (800a724 <__ieee754_pow+0xa4c>)
 800a662:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a666:	429e      	cmp	r6, r3
 800a668:	f77f af0c 	ble.w	800a484 <__ieee754_pow+0x7ac>
 800a66c:	4b2e      	ldr	r3, [pc, #184]	; (800a728 <__ieee754_pow+0xa50>)
 800a66e:	440b      	add	r3, r1
 800a670:	4303      	orrs	r3, r0
 800a672:	d009      	beq.n	800a688 <__ieee754_pow+0x9b0>
 800a674:	ec51 0b18 	vmov	r0, r1, d8
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	f7f6 fa46 	bl	8000b0c <__aeabi_dcmplt>
 800a680:	3800      	subs	r0, #0
 800a682:	bf18      	it	ne
 800a684:	2001      	movne	r0, #1
 800a686:	e447      	b.n	8009f18 <__ieee754_pow+0x240>
 800a688:	4622      	mov	r2, r4
 800a68a:	462b      	mov	r3, r5
 800a68c:	f7f5 fe14 	bl	80002b8 <__aeabi_dsub>
 800a690:	4642      	mov	r2, r8
 800a692:	464b      	mov	r3, r9
 800a694:	f7f6 fa4e 	bl	8000b34 <__aeabi_dcmpge>
 800a698:	2800      	cmp	r0, #0
 800a69a:	f43f aef3 	beq.w	800a484 <__ieee754_pow+0x7ac>
 800a69e:	e7e9      	b.n	800a674 <__ieee754_pow+0x99c>
 800a6a0:	f04f 0a00 	mov.w	sl, #0
 800a6a4:	e71a      	b.n	800a4dc <__ieee754_pow+0x804>
 800a6a6:	ec51 0b10 	vmov	r0, r1, d0
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	e7d4      	b.n	800a658 <__ieee754_pow+0x980>
 800a6ae:	491c      	ldr	r1, [pc, #112]	; (800a720 <__ieee754_pow+0xa48>)
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	f7ff bb30 	b.w	8009d16 <__ieee754_pow+0x3e>
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	f7ff bb2c 	b.w	8009d16 <__ieee754_pow+0x3e>
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	f7ff bb28 	b.w	8009d16 <__ieee754_pow+0x3e>
 800a6c6:	9204      	str	r2, [sp, #16]
 800a6c8:	f7ff bb7a 	b.w	8009dc0 <__ieee754_pow+0xe8>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f7ff bb64 	b.w	8009d9a <__ieee754_pow+0xc2>
 800a6d2:	bf00      	nop
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	3fe62e43 	.word	0x3fe62e43
 800a6e0:	fefa39ef 	.word	0xfefa39ef
 800a6e4:	3fe62e42 	.word	0x3fe62e42
 800a6e8:	0ca86c39 	.word	0x0ca86c39
 800a6ec:	be205c61 	.word	0xbe205c61
 800a6f0:	72bea4d0 	.word	0x72bea4d0
 800a6f4:	3e663769 	.word	0x3e663769
 800a6f8:	c5d26bf1 	.word	0xc5d26bf1
 800a6fc:	3ebbbd41 	.word	0x3ebbbd41
 800a700:	af25de2c 	.word	0xaf25de2c
 800a704:	3f11566a 	.word	0x3f11566a
 800a708:	16bebd93 	.word	0x16bebd93
 800a70c:	3f66c16c 	.word	0x3f66c16c
 800a710:	5555553e 	.word	0x5555553e
 800a714:	3fc55555 	.word	0x3fc55555
 800a718:	3fe00000 	.word	0x3fe00000
 800a71c:	000fffff 	.word	0x000fffff
 800a720:	3ff00000 	.word	0x3ff00000
 800a724:	4090cbff 	.word	0x4090cbff
 800a728:	3f6f3400 	.word	0x3f6f3400
 800a72c:	652b82fe 	.word	0x652b82fe
 800a730:	3c971547 	.word	0x3c971547

0800a734 <__ieee754_sqrt>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	ec55 4b10 	vmov	r4, r5, d0
 800a73c:	4e55      	ldr	r6, [pc, #340]	; (800a894 <__ieee754_sqrt+0x160>)
 800a73e:	43ae      	bics	r6, r5
 800a740:	ee10 0a10 	vmov	r0, s0
 800a744:	ee10 3a10 	vmov	r3, s0
 800a748:	462a      	mov	r2, r5
 800a74a:	4629      	mov	r1, r5
 800a74c:	d110      	bne.n	800a770 <__ieee754_sqrt+0x3c>
 800a74e:	ee10 2a10 	vmov	r2, s0
 800a752:	462b      	mov	r3, r5
 800a754:	f7f5 ff68 	bl	8000628 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fdac 	bl	80002bc <__adddf3>
 800a764:	4604      	mov	r4, r0
 800a766:	460d      	mov	r5, r1
 800a768:	ec45 4b10 	vmov	d0, r4, r5
 800a76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a770:	2d00      	cmp	r5, #0
 800a772:	dc10      	bgt.n	800a796 <__ieee754_sqrt+0x62>
 800a774:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a778:	4330      	orrs	r0, r6
 800a77a:	d0f5      	beq.n	800a768 <__ieee754_sqrt+0x34>
 800a77c:	b15d      	cbz	r5, 800a796 <__ieee754_sqrt+0x62>
 800a77e:	ee10 2a10 	vmov	r2, s0
 800a782:	462b      	mov	r3, r5
 800a784:	ee10 0a10 	vmov	r0, s0
 800a788:	f7f5 fd96 	bl	80002b8 <__aeabi_dsub>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	f7f6 f874 	bl	800087c <__aeabi_ddiv>
 800a794:	e7e6      	b.n	800a764 <__ieee754_sqrt+0x30>
 800a796:	1512      	asrs	r2, r2, #20
 800a798:	d074      	beq.n	800a884 <__ieee754_sqrt+0x150>
 800a79a:	07d4      	lsls	r4, r2, #31
 800a79c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a7a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a7a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a7a8:	bf5e      	ittt	pl
 800a7aa:	0fda      	lsrpl	r2, r3, #31
 800a7ac:	005b      	lslpl	r3, r3, #1
 800a7ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a7b2:	2400      	movs	r4, #0
 800a7b4:	0fda      	lsrs	r2, r3, #31
 800a7b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a7ba:	107f      	asrs	r7, r7, #1
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	2516      	movs	r5, #22
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a7c6:	1886      	adds	r6, r0, r2
 800a7c8:	428e      	cmp	r6, r1
 800a7ca:	bfde      	ittt	le
 800a7cc:	1b89      	suble	r1, r1, r6
 800a7ce:	18b0      	addle	r0, r6, r2
 800a7d0:	18a4      	addle	r4, r4, r2
 800a7d2:	0049      	lsls	r1, r1, #1
 800a7d4:	3d01      	subs	r5, #1
 800a7d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a7da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a7de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7e2:	d1f0      	bne.n	800a7c6 <__ieee754_sqrt+0x92>
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	f04f 0e20 	mov.w	lr, #32
 800a7ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a7ee:	4281      	cmp	r1, r0
 800a7f0:	eb06 0c05 	add.w	ip, r6, r5
 800a7f4:	dc02      	bgt.n	800a7fc <__ieee754_sqrt+0xc8>
 800a7f6:	d113      	bne.n	800a820 <__ieee754_sqrt+0xec>
 800a7f8:	459c      	cmp	ip, r3
 800a7fa:	d811      	bhi.n	800a820 <__ieee754_sqrt+0xec>
 800a7fc:	f1bc 0f00 	cmp.w	ip, #0
 800a800:	eb0c 0506 	add.w	r5, ip, r6
 800a804:	da43      	bge.n	800a88e <__ieee754_sqrt+0x15a>
 800a806:	2d00      	cmp	r5, #0
 800a808:	db41      	blt.n	800a88e <__ieee754_sqrt+0x15a>
 800a80a:	f100 0801 	add.w	r8, r0, #1
 800a80e:	1a09      	subs	r1, r1, r0
 800a810:	459c      	cmp	ip, r3
 800a812:	bf88      	it	hi
 800a814:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a818:	eba3 030c 	sub.w	r3, r3, ip
 800a81c:	4432      	add	r2, r6
 800a81e:	4640      	mov	r0, r8
 800a820:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a824:	f1be 0e01 	subs.w	lr, lr, #1
 800a828:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a82c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a830:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a834:	d1db      	bne.n	800a7ee <__ieee754_sqrt+0xba>
 800a836:	430b      	orrs	r3, r1
 800a838:	d006      	beq.n	800a848 <__ieee754_sqrt+0x114>
 800a83a:	1c50      	adds	r0, r2, #1
 800a83c:	bf13      	iteet	ne
 800a83e:	3201      	addne	r2, #1
 800a840:	3401      	addeq	r4, #1
 800a842:	4672      	moveq	r2, lr
 800a844:	f022 0201 	bicne.w	r2, r2, #1
 800a848:	1063      	asrs	r3, r4, #1
 800a84a:	0852      	lsrs	r2, r2, #1
 800a84c:	07e1      	lsls	r1, r4, #31
 800a84e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a852:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a856:	bf48      	it	mi
 800a858:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a85c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a860:	4614      	mov	r4, r2
 800a862:	e781      	b.n	800a768 <__ieee754_sqrt+0x34>
 800a864:	0ad9      	lsrs	r1, r3, #11
 800a866:	3815      	subs	r0, #21
 800a868:	055b      	lsls	r3, r3, #21
 800a86a:	2900      	cmp	r1, #0
 800a86c:	d0fa      	beq.n	800a864 <__ieee754_sqrt+0x130>
 800a86e:	02cd      	lsls	r5, r1, #11
 800a870:	d50a      	bpl.n	800a888 <__ieee754_sqrt+0x154>
 800a872:	f1c2 0420 	rsb	r4, r2, #32
 800a876:	fa23 f404 	lsr.w	r4, r3, r4
 800a87a:	1e55      	subs	r5, r2, #1
 800a87c:	4093      	lsls	r3, r2
 800a87e:	4321      	orrs	r1, r4
 800a880:	1b42      	subs	r2, r0, r5
 800a882:	e78a      	b.n	800a79a <__ieee754_sqrt+0x66>
 800a884:	4610      	mov	r0, r2
 800a886:	e7f0      	b.n	800a86a <__ieee754_sqrt+0x136>
 800a888:	0049      	lsls	r1, r1, #1
 800a88a:	3201      	adds	r2, #1
 800a88c:	e7ef      	b.n	800a86e <__ieee754_sqrt+0x13a>
 800a88e:	4680      	mov	r8, r0
 800a890:	e7bd      	b.n	800a80e <__ieee754_sqrt+0xda>
 800a892:	bf00      	nop
 800a894:	7ff00000 	.word	0x7ff00000

0800a898 <with_errno>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	460d      	mov	r5, r1
 800a89e:	4616      	mov	r6, r2
 800a8a0:	f7fe f95e 	bl	8008b60 <__errno>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	6006      	str	r6, [r0, #0]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}

0800a8ac <xflow>:
 800a8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ae:	4614      	mov	r4, r2
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	b108      	cbz	r0, 800a8b8 <xflow+0xc>
 800a8b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a8b8:	e9cd 2300 	strd	r2, r3, [sp]
 800a8bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f5 feb0 	bl	8000628 <__aeabi_dmul>
 800a8c8:	2222      	movs	r2, #34	; 0x22
 800a8ca:	b003      	add	sp, #12
 800a8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8d0:	f7ff bfe2 	b.w	800a898 <with_errno>

0800a8d4 <__math_uflow>:
 800a8d4:	b508      	push	{r3, lr}
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8dc:	f7ff ffe6 	bl	800a8ac <xflow>
 800a8e0:	ec41 0b10 	vmov	d0, r0, r1
 800a8e4:	bd08      	pop	{r3, pc}

0800a8e6 <__math_oflow>:
 800a8e6:	b508      	push	{r3, lr}
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a8ee:	f7ff ffdd 	bl	800a8ac <xflow>
 800a8f2:	ec41 0b10 	vmov	d0, r0, r1
 800a8f6:	bd08      	pop	{r3, pc}

0800a8f8 <fabs>:
 800a8f8:	ec51 0b10 	vmov	r0, r1, d0
 800a8fc:	ee10 2a10 	vmov	r2, s0
 800a900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a904:	ec43 2b10 	vmov	d0, r2, r3
 800a908:	4770      	bx	lr

0800a90a <finite>:
 800a90a:	b082      	sub	sp, #8
 800a90c:	ed8d 0b00 	vstr	d0, [sp]
 800a910:	9801      	ldr	r0, [sp, #4]
 800a912:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a916:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a91a:	0fc0      	lsrs	r0, r0, #31
 800a91c:	b002      	add	sp, #8
 800a91e:	4770      	bx	lr

0800a920 <scalbn>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	ec55 4b10 	vmov	r4, r5, d0
 800a926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a92a:	4606      	mov	r6, r0
 800a92c:	462b      	mov	r3, r5
 800a92e:	b99a      	cbnz	r2, 800a958 <scalbn+0x38>
 800a930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a934:	4323      	orrs	r3, r4
 800a936:	d036      	beq.n	800a9a6 <scalbn+0x86>
 800a938:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <scalbn+0x100>)
 800a93a:	4629      	mov	r1, r5
 800a93c:	ee10 0a10 	vmov	r0, s0
 800a940:	2200      	movs	r2, #0
 800a942:	f7f5 fe71 	bl	8000628 <__aeabi_dmul>
 800a946:	4b37      	ldr	r3, [pc, #220]	; (800aa24 <scalbn+0x104>)
 800a948:	429e      	cmp	r6, r3
 800a94a:	4604      	mov	r4, r0
 800a94c:	460d      	mov	r5, r1
 800a94e:	da10      	bge.n	800a972 <scalbn+0x52>
 800a950:	a32b      	add	r3, pc, #172	; (adr r3, 800aa00 <scalbn+0xe0>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	e03a      	b.n	800a9ce <scalbn+0xae>
 800a958:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a95c:	428a      	cmp	r2, r1
 800a95e:	d10c      	bne.n	800a97a <scalbn+0x5a>
 800a960:	ee10 2a10 	vmov	r2, s0
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 fca8 	bl	80002bc <__adddf3>
 800a96c:	4604      	mov	r4, r0
 800a96e:	460d      	mov	r5, r1
 800a970:	e019      	b.n	800a9a6 <scalbn+0x86>
 800a972:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a976:	460b      	mov	r3, r1
 800a978:	3a36      	subs	r2, #54	; 0x36
 800a97a:	4432      	add	r2, r6
 800a97c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a980:	428a      	cmp	r2, r1
 800a982:	dd08      	ble.n	800a996 <scalbn+0x76>
 800a984:	2d00      	cmp	r5, #0
 800a986:	a120      	add	r1, pc, #128	; (adr r1, 800aa08 <scalbn+0xe8>)
 800a988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98c:	da1c      	bge.n	800a9c8 <scalbn+0xa8>
 800a98e:	a120      	add	r1, pc, #128	; (adr r1, 800aa10 <scalbn+0xf0>)
 800a990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a994:	e018      	b.n	800a9c8 <scalbn+0xa8>
 800a996:	2a00      	cmp	r2, #0
 800a998:	dd08      	ble.n	800a9ac <scalbn+0x8c>
 800a99a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a99e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9a6:	ec45 4b10 	vmov	d0, r4, r5
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a9b0:	da19      	bge.n	800a9e6 <scalbn+0xc6>
 800a9b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9b6:	429e      	cmp	r6, r3
 800a9b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a9bc:	dd0a      	ble.n	800a9d4 <scalbn+0xb4>
 800a9be:	a112      	add	r1, pc, #72	; (adr r1, 800aa08 <scalbn+0xe8>)
 800a9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e2      	bne.n	800a98e <scalbn+0x6e>
 800a9c8:	a30f      	add	r3, pc, #60	; (adr r3, 800aa08 <scalbn+0xe8>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe2b 	bl	8000628 <__aeabi_dmul>
 800a9d2:	e7cb      	b.n	800a96c <scalbn+0x4c>
 800a9d4:	a10a      	add	r1, pc, #40	; (adr r1, 800aa00 <scalbn+0xe0>)
 800a9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0b8      	beq.n	800a950 <scalbn+0x30>
 800a9de:	a10e      	add	r1, pc, #56	; (adr r1, 800aa18 <scalbn+0xf8>)
 800a9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e4:	e7b4      	b.n	800a950 <scalbn+0x30>
 800a9e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9ea:	3236      	adds	r2, #54	; 0x36
 800a9ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <scalbn+0x108>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	e7e8      	b.n	800a9ce <scalbn+0xae>
 800a9fc:	f3af 8000 	nop.w
 800aa00:	c2f8f359 	.word	0xc2f8f359
 800aa04:	01a56e1f 	.word	0x01a56e1f
 800aa08:	8800759c 	.word	0x8800759c
 800aa0c:	7e37e43c 	.word	0x7e37e43c
 800aa10:	8800759c 	.word	0x8800759c
 800aa14:	fe37e43c 	.word	0xfe37e43c
 800aa18:	c2f8f359 	.word	0xc2f8f359
 800aa1c:	81a56e1f 	.word	0x81a56e1f
 800aa20:	43500000 	.word	0x43500000
 800aa24:	ffff3cb0 	.word	0xffff3cb0
 800aa28:	3c900000 	.word	0x3c900000

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr
